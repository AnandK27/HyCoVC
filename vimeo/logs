12:59:55 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
12:59:59 INFO - load_model: Loading model ...
12:59:59 INFO - load_model: MODEL TYPE: compression_gan
12:59:59 INFO - load_model: MODEL MODE: evaluation
12:59:59 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
12:59:59 INFO - load_model: Trainable parameters:
12:59:59 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
12:59:59 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
12:59:59 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
12:59:59 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
12:59:59 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
12:59:59 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
12:59:59 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
12:59:59 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
12:59:59 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
12:59:59 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
12:59:59 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
12:59:59 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
12:59:59 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
12:59:59 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
12:59:59 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
12:59:59 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
12:59:59 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
12:59:59 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
12:59:59 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
12:59:59 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
12:59:59 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
12:59:59 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
12:59:59 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
12:59:59 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
12:59:59 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
12:59:59 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
12:59:59 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
12:59:59 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
12:59:59 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
12:59:59 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
12:59:59 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
12:59:59 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
12:59:59 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
12:59:59 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
12:59:59 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
12:59:59 INFO - load_model: Number of trainable parameters: 181484483
12:59:59 INFO - load_model: Estimated model size (under fp32): 725.938 MB
12:59:59 INFO - load_model: Model init 3.475s
12:59:59 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 2, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_20_17_40', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'low', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_20_17_40', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/storage', 'target_rate': 0.14, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_20_17_40/tensorboard', 'timestamp': '2022_06_21_14:22', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_20_12_28/checkpoints/vimeo_compression_2022_06_20_12_28_epoch1_idx64612_2022_06_20_17:14.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': True}
12:59:59 INFO - compress_and_decompress: Building hyperprior probability tables...
13:00:09 INFO - compress_and_decompress: All tables built.
13:00:09 INFO - compress_and_decompress: Starting compression...
13:34:22 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
13:34:22 INFO - compress_and_decompress: Time elapsed: 2052.522 s
13:34:22 INFO - compress_and_decompress: Rate: 22.871 Images / s:
14:08:40 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
14:08:53 INFO - load_model: Loading model ...
14:08:53 INFO - load_model: MODEL TYPE: compression_gan
14:08:53 INFO - load_model: MODEL MODE: evaluation
14:08:53 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
14:08:53 INFO - load_model: Trainable parameters:
14:08:53 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
14:08:53 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
14:08:53 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
14:08:53 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
14:08:53 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
14:08:53 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
14:08:53 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
14:08:53 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
14:08:53 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
14:08:53 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
14:08:53 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
14:08:53 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
14:08:53 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
14:08:53 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
14:08:53 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
14:08:53 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
14:08:53 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
14:08:53 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
14:08:53 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
14:08:53 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
14:08:53 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
14:08:53 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
14:08:53 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
14:08:53 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
14:08:53 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
14:08:53 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
14:08:53 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
14:08:53 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
14:08:53 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
14:08:53 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
14:08:53 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
14:08:53 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
14:08:53 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
14:08:53 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
14:08:53 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
14:08:53 INFO - load_model: Number of trainable parameters: 181484483
14:08:53 INFO - load_model: Estimated model size (under fp32): 725.938 MB
14:08:53 INFO - load_model: Model init 12.416s
14:08:53 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 2, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_20_17_40', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'low', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_20_17_40', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/storage', 'target_rate': 0.14, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_20_17_40/tensorboard', 'timestamp': '2022_06_21_14:22', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_20_12_28/checkpoints/vimeo_compression_2022_06_20_12_28_epoch1_idx64612_2022_06_20_17:14.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': True}
14:08:53 INFO - compress_and_decompress: Building hyperprior probability tables...
14:08:59 INFO - compress_and_decompress: All tables built.
14:08:59 INFO - compress_and_decompress: Starting compression...
14:36:56 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
14:36:56 INFO - compress_and_decompress: Time elapsed: 1677.334 s
14:36:56 INFO - compress_and_decompress: Rate: 27.987 Images / s:
11:21:54 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
11:26:31 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
11:26:43 INFO - load_model: Loading model ...
11:26:43 INFO - load_model: MODEL TYPE: compression_gan
11:26:43 INFO - load_model: MODEL MODE: evaluation
11:26:43 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
11:26:43 INFO - load_model: Trainable parameters:
11:26:43 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
11:26:43 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
11:26:43 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
11:26:43 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
11:26:43 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
11:26:43 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
11:26:43 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
11:26:43 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
11:26:43 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
11:26:43 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
11:26:43 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
11:26:43 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
11:26:43 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
11:26:43 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
11:26:43 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
11:26:43 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
11:26:43 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
11:26:43 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
11:26:43 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
11:26:43 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
11:26:43 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
11:26:43 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
11:26:43 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
11:26:43 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
11:26:43 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
11:26:43 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
11:26:43 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
11:26:43 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
11:26:43 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
11:26:43 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
11:26:43 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
11:26:43 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
11:26:43 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
11:26:43 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
11:26:43 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
11:26:43 INFO - load_model: Number of trainable parameters: 181484483
11:26:43 INFO - load_model: Estimated model size (under fp32): 725.938 MB
11:26:43 INFO - load_model: Model init 12.314s
11:26:43 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': True}
11:26:43 INFO - compress_and_decompress: Building hyperprior probability tables...
11:26:59 INFO - compress_and_decompress: All tables built.
11:26:59 INFO - compress_and_decompress: Starting compression...
11:56:39 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
11:56:39 INFO - compress_and_decompress: Time elapsed: 1779.966 s
11:56:39 INFO - compress_and_decompress: Rate: 26.374 Images / s:
17:21:49 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:23:02 INFO - load_model: Loading model ...
17:23:02 INFO - load_model: MODEL TYPE: compression_gan
17:23:02 INFO - load_model: MODEL MODE: evaluation
17:23:02 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:23:02 INFO - load_model: Trainable parameters:
17:23:02 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:23:02 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:23:02 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:23:02 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:23:02 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:23:02 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:23:02 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:23:02 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:23:02 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:23:02 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:23:02 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:23:02 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:23:02 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:23:02 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:23:02 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:23:02 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:23:02 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:23:02 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:23:02 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:23:02 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:23:02 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:23:02 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:23:02 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:23:02 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:23:02 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:23:02 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:23:02 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:23:02 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:23:02 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:23:02 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:23:02 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:23:02 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:23:02 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:23:02 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:23:02 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:23:02 INFO - load_model: Number of trainable parameters: 181484483
17:23:02 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:23:02 INFO - load_model: Model init 73.128s
17:23:02 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:23:02 INFO - compress_and_decompress: Building hyperprior probability tables...
17:23:59 INFO - compress_and_decompress: All tables built.
17:24:00 INFO - compress_and_decompress: Starting compression...
17:24:36 INFO - compress: [ESTIMATED]
17:24:36 INFO - compress: BPP: 0.329
17:24:36 INFO - compress: HL BPP: 0.019
17:24:36 INFO - compress: L BPP: 0.310
17:24:36 INFO - compress: [ATTAINED]
17:24:36 INFO - compress: BPP: 0.839
17:24:36 INFO - compress: HL BPP: 0.323
17:24:36 INFO - compress: L BPP: 0.516
17:24:37 INFO - compress: [ESTIMATED]
17:24:37 INFO - compress: BPP: 0.254
17:24:37 INFO - compress: HL BPP: 0.019
17:24:37 INFO - compress: L BPP: 0.235
17:24:37 INFO - compress: [ATTAINED]
17:24:37 INFO - compress: BPP: 0.758
17:24:37 INFO - compress: HL BPP: 0.320
17:24:37 INFO - compress: L BPP: 0.438
17:24:37 INFO - compress: [ESTIMATED]
17:24:37 INFO - compress: BPP: 0.318
17:24:37 INFO - compress: HL BPP: 0.019
17:24:37 INFO - compress: L BPP: 0.298
17:24:37 INFO - compress: [ATTAINED]
17:24:37 INFO - compress: BPP: 0.825
17:24:37 INFO - compress: HL BPP: 0.322
17:24:37 INFO - compress: L BPP: 0.503
17:24:38 INFO - compress: [ESTIMATED]
17:24:38 INFO - compress: BPP: 0.540
17:24:38 INFO - compress: HL BPP: 0.021
17:24:38 INFO - compress: L BPP: 0.519
17:24:38 INFO - compress: [ATTAINED]
17:24:38 INFO - compress: BPP: 1.045
17:24:38 INFO - compress: HL BPP: 0.324
17:24:38 INFO - compress: L BPP: 0.721
17:24:38 INFO - compress: [ESTIMATED]
17:24:38 INFO - compress: BPP: 0.496
17:24:38 INFO - compress: HL BPP: 0.021
17:24:38 INFO - compress: L BPP: 0.475
17:24:38 INFO - compress: [ATTAINED]
17:24:38 INFO - compress: BPP: 1.003
17:24:38 INFO - compress: HL BPP: 0.323
17:24:38 INFO - compress: L BPP: 0.680
17:24:39 INFO - compress: [ESTIMATED]
17:24:39 INFO - compress: BPP: 0.306
17:24:39 INFO - compress: HL BPP: 0.021
17:24:39 INFO - compress: L BPP: 0.285
17:24:39 INFO - compress: [ATTAINED]
17:24:39 INFO - compress: BPP: 0.811
17:24:39 INFO - compress: HL BPP: 0.324
17:24:39 INFO - compress: L BPP: 0.487
17:24:39 INFO - compress: [ESTIMATED]
17:24:39 INFO - compress: BPP: 0.439
17:24:39 INFO - compress: HL BPP: 0.022
17:24:39 INFO - compress: L BPP: 0.417
17:24:39 INFO - compress: [ATTAINED]
17:24:39 INFO - compress: BPP: 0.945
17:24:39 INFO - compress: HL BPP: 0.324
17:24:39 INFO - compress: L BPP: 0.622
17:24:40 INFO - compress: [ESTIMATED]
17:24:40 INFO - compress: BPP: 0.485
17:24:40 INFO - compress: HL BPP: 0.020
17:24:40 INFO - compress: L BPP: 0.466
17:24:40 INFO - compress: [ATTAINED]
17:24:40 INFO - compress: BPP: 0.993
17:24:40 INFO - compress: HL BPP: 0.321
17:24:40 INFO - compress: L BPP: 0.672
17:24:40 INFO - compress: [ESTIMATED]
17:24:40 INFO - compress: BPP: 0.375
17:24:40 INFO - compress: HL BPP: 0.020
17:24:40 INFO - compress: L BPP: 0.355
17:24:40 INFO - compress: [ATTAINED]
17:24:40 INFO - compress: BPP: 0.883
17:24:40 INFO - compress: HL BPP: 0.322
17:24:40 INFO - compress: L BPP: 0.561
17:24:41 INFO - compress: [ESTIMATED]
17:24:41 INFO - compress: BPP: 0.496
17:24:41 INFO - compress: HL BPP: 0.021
17:24:41 INFO - compress: L BPP: 0.475
17:24:41 INFO - compress: [ATTAINED]
17:24:41 INFO - compress: BPP: 1.001
17:24:41 INFO - compress: HL BPP: 0.323
17:24:41 INFO - compress: L BPP: 0.678
17:24:41 INFO - compress: [ESTIMATED]
17:24:41 INFO - compress: BPP: 0.414
17:24:41 INFO - compress: HL BPP: 0.020
17:24:41 INFO - compress: L BPP: 0.393
17:24:41 INFO - compress: [ATTAINED]
17:24:41 INFO - compress: BPP: 0.918
17:24:41 INFO - compress: HL BPP: 0.322
17:24:41 INFO - compress: L BPP: 0.596
17:24:42 INFO - compress: [ESTIMATED]
17:24:42 INFO - compress: BPP: 0.512
17:24:42 INFO - compress: HL BPP: 0.020
17:24:42 INFO - compress: L BPP: 0.492
17:24:42 INFO - compress: [ATTAINED]
17:24:42 INFO - compress: BPP: 1.019
17:24:42 INFO - compress: HL BPP: 0.322
17:24:42 INFO - compress: L BPP: 0.696
17:24:42 INFO - compress: [ESTIMATED]
17:24:42 INFO - compress: BPP: 0.295
17:24:42 INFO - compress: HL BPP: 0.020
17:24:42 INFO - compress: L BPP: 0.275
17:24:42 INFO - compress: [ATTAINED]
17:24:42 INFO - compress: BPP: 0.804
17:24:42 INFO - compress: HL BPP: 0.322
17:24:42 INFO - compress: L BPP: 0.482
17:24:43 INFO - compress: [ESTIMATED]
17:24:43 INFO - compress: BPP: 0.637
17:24:43 INFO - compress: HL BPP: 0.021
17:24:43 INFO - compress: L BPP: 0.617
17:24:43 INFO - compress: [ATTAINED]
17:24:43 INFO - compress: BPP: 1.145
17:24:43 INFO - compress: HL BPP: 0.324
17:24:43 INFO - compress: L BPP: 0.821
17:24:43 INFO - compress: [ESTIMATED]
17:24:43 INFO - compress: BPP: 0.400
17:24:43 INFO - compress: HL BPP: 0.020
17:24:43 INFO - compress: L BPP: 0.380
17:24:43 INFO - compress: [ATTAINED]
17:24:43 INFO - compress: BPP: 0.905
17:24:43 INFO - compress: HL BPP: 0.321
17:24:43 INFO - compress: L BPP: 0.584
17:24:44 INFO - compress: [ESTIMATED]
17:24:44 INFO - compress: BPP: 0.474
17:24:44 INFO - compress: HL BPP: 0.024
17:24:44 INFO - compress: L BPP: 0.450
17:24:44 INFO - compress: [ATTAINED]
17:24:44 INFO - compress: BPP: 0.981
17:24:44 INFO - compress: HL BPP: 0.328
17:24:44 INFO - compress: L BPP: 0.653
17:24:44 INFO - compress: [ESTIMATED]
17:24:44 INFO - compress: BPP: 0.571
17:24:44 INFO - compress: HL BPP: 0.022
17:24:44 INFO - compress: L BPP: 0.549
17:24:44 INFO - compress: [ATTAINED]
17:24:44 INFO - compress: BPP: 1.078
17:24:44 INFO - compress: HL BPP: 0.326
17:24:44 INFO - compress: L BPP: 0.752
17:24:45 INFO - compress: [ESTIMATED]
17:24:45 INFO - compress: BPP: 0.410
17:24:45 INFO - compress: HL BPP: 0.021
17:24:45 INFO - compress: L BPP: 0.389
17:24:45 INFO - compress: [ATTAINED]
17:24:45 INFO - compress: BPP: 0.916
17:24:45 INFO - compress: HL BPP: 0.324
17:24:45 INFO - compress: L BPP: 0.592
17:24:45 INFO - compress: [ESTIMATED]
17:24:45 INFO - compress: BPP: 0.338
17:24:45 INFO - compress: HL BPP: 0.018
17:24:45 INFO - compress: L BPP: 0.320
17:24:45 INFO - compress: [ATTAINED]
17:24:45 INFO - compress: BPP: 0.846
17:24:45 INFO - compress: HL BPP: 0.321
17:24:45 INFO - compress: L BPP: 0.525
17:24:45 INFO - compress: [ESTIMATED]
17:24:45 INFO - compress: BPP: 0.465
17:24:45 INFO - compress: HL BPP: 0.022
17:24:45 INFO - compress: L BPP: 0.443
17:24:45 INFO - compress: [ATTAINED]
17:24:45 INFO - compress: BPP: 0.973
17:24:45 INFO - compress: HL BPP: 0.325
17:24:45 INFO - compress: L BPP: 0.648
17:24:46 INFO - compress: [ESTIMATED]
17:24:46 INFO - compress: BPP: 0.485
17:24:46 INFO - compress: HL BPP: 0.023
17:24:46 INFO - compress: L BPP: 0.463
17:24:46 INFO - compress: [ATTAINED]
17:24:46 INFO - compress: BPP: 0.994
17:24:46 INFO - compress: HL BPP: 0.328
17:24:46 INFO - compress: L BPP: 0.666
17:24:46 INFO - compress: [ESTIMATED]
17:24:46 INFO - compress: BPP: 0.241
17:24:46 INFO - compress: HL BPP: 0.019
17:24:46 INFO - compress: L BPP: 0.223
17:24:46 INFO - compress: [ATTAINED]
17:24:46 INFO - compress: BPP: 0.749
17:24:46 INFO - compress: HL BPP: 0.321
17:24:46 INFO - compress: L BPP: 0.427
17:24:47 INFO - compress: [ESTIMATED]
17:24:47 INFO - compress: BPP: 0.376
17:24:47 INFO - compress: HL BPP: 0.024
17:24:47 INFO - compress: L BPP: 0.352
17:24:47 INFO - compress: [ATTAINED]
17:24:47 INFO - compress: BPP: 0.884
17:24:47 INFO - compress: HL BPP: 0.327
17:24:47 INFO - compress: L BPP: 0.557
17:24:47 INFO - compress: [ESTIMATED]
17:24:47 INFO - compress: BPP: 0.349
17:24:47 INFO - compress: HL BPP: 0.019
17:24:47 INFO - compress: L BPP: 0.330
17:24:47 INFO - compress: [ATTAINED]
17:24:47 INFO - compress: BPP: 0.855
17:24:47 INFO - compress: HL BPP: 0.322
17:24:47 INFO - compress: L BPP: 0.533
17:24:48 INFO - compress: [ESTIMATED]
17:24:48 INFO - compress: BPP: 0.371
17:24:48 INFO - compress: HL BPP: 0.019
17:24:48 INFO - compress: L BPP: 0.352
17:24:48 INFO - compress: [ATTAINED]
17:24:48 INFO - compress: BPP: 0.877
17:24:48 INFO - compress: HL BPP: 0.321
17:24:48 INFO - compress: L BPP: 0.556
17:24:48 INFO - compress: [ESTIMATED]
17:24:48 INFO - compress: BPP: 0.337
17:24:48 INFO - compress: HL BPP: 0.019
17:24:48 INFO - compress: L BPP: 0.318
17:24:48 INFO - compress: [ATTAINED]
17:24:48 INFO - compress: BPP: 0.844
17:24:48 INFO - compress: HL BPP: 0.322
17:24:48 INFO - compress: L BPP: 0.522
17:24:49 INFO - compress: [ESTIMATED]
17:24:49 INFO - compress: BPP: 0.317
17:24:49 INFO - compress: HL BPP: 0.021
17:24:49 INFO - compress: L BPP: 0.297
17:24:49 INFO - compress: [ATTAINED]
17:24:49 INFO - compress: BPP: 0.826
17:24:49 INFO - compress: HL BPP: 0.324
17:24:49 INFO - compress: L BPP: 0.502
17:24:49 INFO - compress: [ESTIMATED]
17:24:49 INFO - compress: BPP: 0.525
17:24:49 INFO - compress: HL BPP: 0.021
17:24:49 INFO - compress: L BPP: 0.504
17:24:49 INFO - compress: [ATTAINED]
17:24:49 INFO - compress: BPP: 1.034
17:24:49 INFO - compress: HL BPP: 0.323
17:24:49 INFO - compress: L BPP: 0.710
17:24:50 INFO - compress: [ESTIMATED]
17:24:50 INFO - compress: BPP: 0.511
17:24:50 INFO - compress: HL BPP: 0.021
17:24:50 INFO - compress: L BPP: 0.489
17:24:50 INFO - compress: [ATTAINED]
17:24:50 INFO - compress: BPP: 1.016
17:24:50 INFO - compress: HL BPP: 0.324
17:24:50 INFO - compress: L BPP: 0.692
17:24:50 INFO - compress: [ESTIMATED]
17:24:50 INFO - compress: BPP: 0.295
17:24:50 INFO - compress: HL BPP: 0.018
17:24:50 INFO - compress: L BPP: 0.277
17:24:50 INFO - compress: [ATTAINED]
17:24:50 INFO - compress: BPP: 0.802
17:24:50 INFO - compress: HL BPP: 0.321
17:24:50 INFO - compress: L BPP: 0.481
17:24:51 INFO - compress: [ESTIMATED]
17:24:51 INFO - compress: BPP: 0.321
17:24:51 INFO - compress: HL BPP: 0.019
17:24:51 INFO - compress: L BPP: 0.301
17:24:51 INFO - compress: [ATTAINED]
17:24:51 INFO - compress: BPP: 0.827
17:24:51 INFO - compress: HL BPP: 0.322
17:24:51 INFO - compress: L BPP: 0.505
17:24:51 INFO - compress: [ESTIMATED]
17:24:51 INFO - compress: BPP: 0.581
17:24:51 INFO - compress: HL BPP: 0.020
17:24:51 INFO - compress: L BPP: 0.562
17:24:51 INFO - compress: [ATTAINED]
17:24:51 INFO - compress: BPP: 1.088
17:24:51 INFO - compress: HL BPP: 0.323
17:24:51 INFO - compress: L BPP: 0.765
17:24:52 INFO - compress: [ESTIMATED]
17:24:52 INFO - compress: BPP: 0.388
17:24:52 INFO - compress: HL BPP: 0.021
17:24:52 INFO - compress: L BPP: 0.367
17:24:52 INFO - compress: [ATTAINED]
17:24:52 INFO - compress: BPP: 0.896
17:24:52 INFO - compress: HL BPP: 0.324
17:24:52 INFO - compress: L BPP: 0.572
17:24:52 INFO - compress: [ESTIMATED]
17:24:52 INFO - compress: BPP: 0.223
17:24:52 INFO - compress: HL BPP: 0.017
17:24:52 INFO - compress: L BPP: 0.205
17:24:52 INFO - compress: [ATTAINED]
17:24:52 INFO - compress: BPP: 0.731
17:24:52 INFO - compress: HL BPP: 0.321
17:24:52 INFO - compress: L BPP: 0.410
17:24:53 INFO - compress: [ESTIMATED]
17:24:53 INFO - compress: BPP: 0.460
17:24:53 INFO - compress: HL BPP: 0.020
17:24:53 INFO - compress: L BPP: 0.439
17:24:53 INFO - compress: [ATTAINED]
17:24:53 INFO - compress: BPP: 0.968
17:24:53 INFO - compress: HL BPP: 0.322
17:24:53 INFO - compress: L BPP: 0.646
17:24:53 INFO - compress: [ESTIMATED]
17:24:53 INFO - compress: BPP: 0.235
17:24:53 INFO - compress: HL BPP: 0.018
17:24:53 INFO - compress: L BPP: 0.217
17:24:53 INFO - compress: [ATTAINED]
17:24:53 INFO - compress: BPP: 0.741
17:24:53 INFO - compress: HL BPP: 0.320
17:24:53 INFO - compress: L BPP: 0.420
17:24:54 INFO - compress: [ESTIMATED]
17:24:54 INFO - compress: BPP: 0.241
17:24:54 INFO - compress: HL BPP: 0.019
17:24:54 INFO - compress: L BPP: 0.222
17:24:54 INFO - compress: [ATTAINED]
17:24:54 INFO - compress: BPP: 0.746
17:24:54 INFO - compress: HL BPP: 0.321
17:24:54 INFO - compress: L BPP: 0.424
17:24:54 INFO - compress: [ESTIMATED]
17:24:54 INFO - compress: BPP: 0.319
17:24:54 INFO - compress: HL BPP: 0.019
17:24:54 INFO - compress: L BPP: 0.300
17:24:54 INFO - compress: [ATTAINED]
17:24:54 INFO - compress: BPP: 0.827
17:24:54 INFO - compress: HL BPP: 0.322
17:24:54 INFO - compress: L BPP: 0.505
17:24:55 INFO - compress: [ESTIMATED]
17:24:55 INFO - compress: BPP: 0.620
17:24:55 INFO - compress: HL BPP: 0.021
17:24:55 INFO - compress: L BPP: 0.599
17:24:55 INFO - compress: [ATTAINED]
17:24:55 INFO - compress: BPP: 1.128
17:24:55 INFO - compress: HL BPP: 0.325
17:24:55 INFO - compress: L BPP: 0.803
17:24:55 INFO - compress: [ESTIMATED]
17:24:55 INFO - compress: BPP: 0.440
17:24:55 INFO - compress: HL BPP: 0.019
17:24:55 INFO - compress: L BPP: 0.421
17:24:55 INFO - compress: [ATTAINED]
17:24:55 INFO - compress: BPP: 0.948
17:24:55 INFO - compress: HL BPP: 0.322
17:24:55 INFO - compress: L BPP: 0.626
17:24:56 INFO - compress: [ESTIMATED]
17:24:56 INFO - compress: BPP: 0.416
17:24:56 INFO - compress: HL BPP: 0.022
17:24:56 INFO - compress: L BPP: 0.393
17:24:56 INFO - compress: [ATTAINED]
17:24:56 INFO - compress: BPP: 0.925
17:24:56 INFO - compress: HL BPP: 0.327
17:24:56 INFO - compress: L BPP: 0.598
17:24:56 INFO - compress: [ESTIMATED]
17:24:56 INFO - compress: BPP: 0.241
17:24:56 INFO - compress: HL BPP: 0.019
17:24:56 INFO - compress: L BPP: 0.221
17:24:56 INFO - compress: [ATTAINED]
17:24:56 INFO - compress: BPP: 0.748
17:24:56 INFO - compress: HL BPP: 0.323
17:24:56 INFO - compress: L BPP: 0.425
17:24:56 INFO - compress: [ESTIMATED]
17:24:56 INFO - compress: BPP: 0.420
17:24:56 INFO - compress: HL BPP: 0.021
17:24:56 INFO - compress: L BPP: 0.399
17:24:56 INFO - compress: [ATTAINED]
17:24:56 INFO - compress: BPP: 0.927
17:24:56 INFO - compress: HL BPP: 0.324
17:24:56 INFO - compress: L BPP: 0.603
17:24:57 INFO - compress: [ESTIMATED]
17:24:57 INFO - compress: BPP: 0.572
17:24:57 INFO - compress: HL BPP: 0.023
17:24:57 INFO - compress: L BPP: 0.549
17:24:57 INFO - compress: [ATTAINED]
17:24:57 INFO - compress: BPP: 1.082
17:24:57 INFO - compress: HL BPP: 0.327
17:24:57 INFO - compress: L BPP: 0.755
17:24:57 INFO - compress: [ESTIMATED]
17:24:57 INFO - compress: BPP: 0.609
17:24:57 INFO - compress: HL BPP: 0.024
17:24:57 INFO - compress: L BPP: 0.585
17:24:57 INFO - compress: [ATTAINED]
17:24:57 INFO - compress: BPP: 1.116
17:24:57 INFO - compress: HL BPP: 0.327
17:24:57 INFO - compress: L BPP: 0.789
17:24:58 INFO - compress: [ESTIMATED]
17:24:58 INFO - compress: BPP: 0.353
17:24:58 INFO - compress: HL BPP: 0.020
17:24:58 INFO - compress: L BPP: 0.334
17:24:58 INFO - compress: [ATTAINED]
17:24:58 INFO - compress: BPP: 0.862
17:24:58 INFO - compress: HL BPP: 0.323
17:24:58 INFO - compress: L BPP: 0.540
17:24:58 INFO - compress: [ESTIMATED]
17:24:58 INFO - compress: BPP: 0.390
17:24:58 INFO - compress: HL BPP: 0.019
17:24:58 INFO - compress: L BPP: 0.371
17:24:58 INFO - compress: [ATTAINED]
17:24:58 INFO - compress: BPP: 0.893
17:24:58 INFO - compress: HL BPP: 0.321
17:24:58 INFO - compress: L BPP: 0.572
17:24:59 INFO - compress: [ESTIMATED]
17:24:59 INFO - compress: BPP: 0.386
17:24:59 INFO - compress: HL BPP: 0.023
17:24:59 INFO - compress: L BPP: 0.363
17:24:59 INFO - compress: [ATTAINED]
17:24:59 INFO - compress: BPP: 0.893
17:24:59 INFO - compress: HL BPP: 0.325
17:24:59 INFO - compress: L BPP: 0.567
17:24:59 INFO - compress: [ESTIMATED]
17:24:59 INFO - compress: BPP: 0.366
17:24:59 INFO - compress: HL BPP: 0.022
17:24:59 INFO - compress: L BPP: 0.344
17:24:59 INFO - compress: [ATTAINED]
17:24:59 INFO - compress: BPP: 0.872
17:24:59 INFO - compress: HL BPP: 0.324
17:24:59 INFO - compress: L BPP: 0.548
17:25:00 INFO - compress: [ESTIMATED]
17:25:00 INFO - compress: BPP: 0.411
17:25:00 INFO - compress: HL BPP: 0.021
17:25:00 INFO - compress: L BPP: 0.390
17:25:00 INFO - compress: [ATTAINED]
17:25:00 INFO - compress: BPP: 0.915
17:25:00 INFO - compress: HL BPP: 0.323
17:25:00 INFO - compress: L BPP: 0.592
17:25:00 INFO - compress: [ESTIMATED]
17:25:00 INFO - compress: BPP: 0.535
17:25:00 INFO - compress: HL BPP: 0.019
17:25:00 INFO - compress: L BPP: 0.516
17:25:00 INFO - compress: [ATTAINED]
17:25:00 INFO - compress: BPP: 1.042
17:25:00 INFO - compress: HL BPP: 0.321
17:25:00 INFO - compress: L BPP: 0.720
17:25:01 INFO - compress: [ESTIMATED]
17:25:01 INFO - compress: BPP: 0.404
17:25:01 INFO - compress: HL BPP: 0.021
17:25:01 INFO - compress: L BPP: 0.382
17:25:01 INFO - compress: [ATTAINED]
17:25:01 INFO - compress: BPP: 0.909
17:25:01 INFO - compress: HL BPP: 0.324
17:25:01 INFO - compress: L BPP: 0.585
17:25:01 INFO - compress: [ESTIMATED]
17:25:01 INFO - compress: BPP: 0.369
17:25:01 INFO - compress: HL BPP: 0.022
17:25:01 INFO - compress: L BPP: 0.347
17:25:01 INFO - compress: [ATTAINED]
17:25:01 INFO - compress: BPP: 0.878
17:25:01 INFO - compress: HL BPP: 0.326
17:25:01 INFO - compress: L BPP: 0.552
17:25:02 INFO - compress: [ESTIMATED]
17:25:02 INFO - compress: BPP: 0.558
17:25:02 INFO - compress: HL BPP: 0.019
17:25:02 INFO - compress: L BPP: 0.538
17:25:02 INFO - compress: [ATTAINED]
17:25:02 INFO - compress: BPP: 1.064
17:25:02 INFO - compress: HL BPP: 0.322
17:25:02 INFO - compress: L BPP: 0.742
17:25:02 INFO - compress: [ESTIMATED]
17:25:02 INFO - compress: BPP: 0.445
17:25:02 INFO - compress: HL BPP: 0.021
17:25:02 INFO - compress: L BPP: 0.424
17:25:02 INFO - compress: [ATTAINED]
17:25:02 INFO - compress: BPP: 0.952
17:25:02 INFO - compress: HL BPP: 0.326
17:25:02 INFO - compress: L BPP: 0.626
17:25:03 INFO - compress: [ESTIMATED]
17:25:03 INFO - compress: BPP: 0.626
17:25:03 INFO - compress: HL BPP: 0.025
17:25:03 INFO - compress: L BPP: 0.601
17:25:03 INFO - compress: [ATTAINED]
17:25:03 INFO - compress: BPP: 1.136
17:25:03 INFO - compress: HL BPP: 0.330
17:25:03 INFO - compress: L BPP: 0.806
17:25:03 INFO - compress: [ESTIMATED]
17:25:03 INFO - compress: BPP: 0.400
17:25:03 INFO - compress: HL BPP: 0.019
17:25:03 INFO - compress: L BPP: 0.381
17:25:03 INFO - compress: [ATTAINED]
17:25:03 INFO - compress: BPP: 0.908
17:25:03 INFO - compress: HL BPP: 0.322
17:25:03 INFO - compress: L BPP: 0.585
17:25:04 INFO - compress: [ESTIMATED]
17:25:04 INFO - compress: BPP: 0.078
17:25:04 INFO - compress: HL BPP: 0.017
17:25:04 INFO - compress: L BPP: 0.061
17:25:04 INFO - compress: [ATTAINED]
17:25:04 INFO - compress: BPP: 0.583
17:25:04 INFO - compress: HL BPP: 0.318
17:25:04 INFO - compress: L BPP: 0.265
17:25:04 INFO - compress: [ESTIMATED]
17:25:04 INFO - compress: BPP: 0.421
17:25:04 INFO - compress: HL BPP: 0.020
17:25:04 INFO - compress: L BPP: 0.400
17:25:04 INFO - compress: [ATTAINED]
17:25:04 INFO - compress: BPP: 0.928
17:25:04 INFO - compress: HL BPP: 0.324
17:25:04 INFO - compress: L BPP: 0.604
17:25:05 INFO - compress: [ESTIMATED]
17:25:05 INFO - compress: BPP: 0.304
17:25:05 INFO - compress: HL BPP: 0.020
17:25:05 INFO - compress: L BPP: 0.285
17:25:05 INFO - compress: [ATTAINED]
17:25:05 INFO - compress: BPP: 0.809
17:25:05 INFO - compress: HL BPP: 0.321
17:25:05 INFO - compress: L BPP: 0.488
17:25:05 INFO - compress: [ESTIMATED]
17:25:05 INFO - compress: BPP: 0.247
17:25:05 INFO - compress: HL BPP: 0.018
17:25:05 INFO - compress: L BPP: 0.229
17:25:05 INFO - compress: [ATTAINED]
17:25:05 INFO - compress: BPP: 0.751
17:25:05 INFO - compress: HL BPP: 0.320
17:25:05 INFO - compress: L BPP: 0.431
17:25:06 INFO - compress: [ESTIMATED]
17:25:06 INFO - compress: BPP: 0.259
17:25:06 INFO - compress: HL BPP: 0.019
17:25:06 INFO - compress: L BPP: 0.240
17:25:06 INFO - compress: [ATTAINED]
17:25:06 INFO - compress: BPP: 0.767
17:25:06 INFO - compress: HL BPP: 0.322
17:25:06 INFO - compress: L BPP: 0.445
17:25:06 INFO - compress: [ESTIMATED]
17:25:06 INFO - compress: BPP: 0.266
17:25:06 INFO - compress: HL BPP: 0.021
17:25:06 INFO - compress: L BPP: 0.245
17:25:06 INFO - compress: [ATTAINED]
17:25:06 INFO - compress: BPP: 0.771
17:25:06 INFO - compress: HL BPP: 0.322
17:25:06 INFO - compress: L BPP: 0.449
17:25:06 INFO - compress: [ESTIMATED]
17:25:06 INFO - compress: BPP: 0.305
17:25:06 INFO - compress: HL BPP: 0.019
17:25:06 INFO - compress: L BPP: 0.286
17:25:06 INFO - compress: [ATTAINED]
17:25:06 INFO - compress: BPP: 0.812
17:25:06 INFO - compress: HL BPP: 0.322
17:25:06 INFO - compress: L BPP: 0.491
17:25:07 INFO - compress: [ESTIMATED]
17:25:07 INFO - compress: BPP: 0.361
17:25:07 INFO - compress: HL BPP: 0.020
17:25:07 INFO - compress: L BPP: 0.341
17:25:07 INFO - compress: [ATTAINED]
17:25:07 INFO - compress: BPP: 0.871
17:25:07 INFO - compress: HL BPP: 0.325
17:25:07 INFO - compress: L BPP: 0.546
17:25:07 INFO - compress: [ESTIMATED]
17:25:07 INFO - compress: BPP: 0.215
17:25:07 INFO - compress: HL BPP: 0.018
17:25:07 INFO - compress: L BPP: 0.197
17:25:07 INFO - compress: [ATTAINED]
17:25:07 INFO - compress: BPP: 0.723
17:25:07 INFO - compress: HL BPP: 0.321
17:25:07 INFO - compress: L BPP: 0.402
17:25:08 INFO - compress: [ESTIMATED]
17:25:08 INFO - compress: BPP: 0.340
17:25:08 INFO - compress: HL BPP: 0.020
17:25:08 INFO - compress: L BPP: 0.320
17:25:08 INFO - compress: [ATTAINED]
17:25:08 INFO - compress: BPP: 0.849
17:25:08 INFO - compress: HL BPP: 0.324
17:25:08 INFO - compress: L BPP: 0.525
17:25:08 INFO - compress: [ESTIMATED]
17:25:08 INFO - compress: BPP: 0.536
17:25:08 INFO - compress: HL BPP: 0.023
17:25:08 INFO - compress: L BPP: 0.514
17:25:08 INFO - compress: [ATTAINED]
17:25:08 INFO - compress: BPP: 1.047
17:25:08 INFO - compress: HL BPP: 0.327
17:25:08 INFO - compress: L BPP: 0.720
17:25:09 INFO - compress: [ESTIMATED]
17:25:09 INFO - compress: BPP: 0.381
17:25:09 INFO - compress: HL BPP: 0.020
17:25:09 INFO - compress: L BPP: 0.361
17:25:09 INFO - compress: [ATTAINED]
17:25:09 INFO - compress: BPP: 0.886
17:25:09 INFO - compress: HL BPP: 0.321
17:25:09 INFO - compress: L BPP: 0.564
17:25:09 INFO - compress: [ESTIMATED]
17:25:09 INFO - compress: BPP: 0.324
17:25:09 INFO - compress: HL BPP: 0.019
17:25:09 INFO - compress: L BPP: 0.305
17:25:09 INFO - compress: [ATTAINED]
17:25:09 INFO - compress: BPP: 0.829
17:25:09 INFO - compress: HL BPP: 0.321
17:25:09 INFO - compress: L BPP: 0.508
17:25:10 INFO - compress: [ESTIMATED]
17:25:10 INFO - compress: BPP: 0.489
17:25:10 INFO - compress: HL BPP: 0.021
17:25:10 INFO - compress: L BPP: 0.467
17:25:10 INFO - compress: [ATTAINED]
17:25:10 INFO - compress: BPP: 0.998
17:25:10 INFO - compress: HL BPP: 0.325
17:25:10 INFO - compress: L BPP: 0.673
17:25:10 INFO - compress: [ESTIMATED]
17:25:10 INFO - compress: BPP: 0.627
17:25:10 INFO - compress: HL BPP: 0.021
17:25:10 INFO - compress: L BPP: 0.605
17:25:10 INFO - compress: [ATTAINED]
17:25:10 INFO - compress: BPP: 1.135
17:25:10 INFO - compress: HL BPP: 0.325
17:25:10 INFO - compress: L BPP: 0.810
17:25:11 INFO - compress: [ESTIMATED]
17:25:11 INFO - compress: BPP: 0.264
17:25:11 INFO - compress: HL BPP: 0.018
17:25:11 INFO - compress: L BPP: 0.246
17:25:11 INFO - compress: [ATTAINED]
17:25:11 INFO - compress: BPP: 0.771
17:25:11 INFO - compress: HL BPP: 0.320
17:25:11 INFO - compress: L BPP: 0.451
17:25:11 INFO - compress: [ESTIMATED]
17:25:11 INFO - compress: BPP: 0.462
17:25:11 INFO - compress: HL BPP: 0.020
17:25:11 INFO - compress: L BPP: 0.442
17:25:11 INFO - compress: [ATTAINED]
17:25:11 INFO - compress: BPP: 0.970
17:25:11 INFO - compress: HL BPP: 0.323
17:25:11 INFO - compress: L BPP: 0.647
17:25:12 INFO - compress: [ESTIMATED]
17:25:12 INFO - compress: BPP: 0.441
17:25:12 INFO - compress: HL BPP: 0.020
17:25:12 INFO - compress: L BPP: 0.422
17:25:12 INFO - compress: [ATTAINED]
17:25:12 INFO - compress: BPP: 0.948
17:25:12 INFO - compress: HL BPP: 0.323
17:25:12 INFO - compress: L BPP: 0.625
17:25:12 INFO - compress: [ESTIMATED]
17:25:12 INFO - compress: BPP: 0.462
17:25:12 INFO - compress: HL BPP: 0.023
17:25:12 INFO - compress: L BPP: 0.439
17:25:12 INFO - compress: [ATTAINED]
17:25:12 INFO - compress: BPP: 0.968
17:25:12 INFO - compress: HL BPP: 0.326
17:25:12 INFO - compress: L BPP: 0.642
17:25:13 INFO - compress: [ESTIMATED]
17:25:13 INFO - compress: BPP: 0.400
17:25:13 INFO - compress: HL BPP: 0.021
17:25:13 INFO - compress: L BPP: 0.379
17:25:13 INFO - compress: [ATTAINED]
17:25:13 INFO - compress: BPP: 0.906
17:25:13 INFO - compress: HL BPP: 0.324
17:25:13 INFO - compress: L BPP: 0.582
17:25:13 INFO - compress: [ESTIMATED]
17:25:13 INFO - compress: BPP: 0.413
17:25:13 INFO - compress: HL BPP: 0.019
17:25:13 INFO - compress: L BPP: 0.394
17:25:13 INFO - compress: [ATTAINED]
17:25:13 INFO - compress: BPP: 0.919
17:25:13 INFO - compress: HL BPP: 0.321
17:25:13 INFO - compress: L BPP: 0.598
17:25:14 INFO - compress: [ESTIMATED]
17:25:14 INFO - compress: BPP: 0.370
17:25:14 INFO - compress: HL BPP: 0.019
17:25:14 INFO - compress: L BPP: 0.351
17:25:14 INFO - compress: [ATTAINED]
17:25:14 INFO - compress: BPP: 0.874
17:25:14 INFO - compress: HL BPP: 0.319
17:25:14 INFO - compress: L BPP: 0.554
17:25:14 INFO - compress: [ESTIMATED]
17:25:14 INFO - compress: BPP: 0.290
17:25:14 INFO - compress: HL BPP: 0.021
17:25:14 INFO - compress: L BPP: 0.269
17:25:14 INFO - compress: [ATTAINED]
17:25:14 INFO - compress: BPP: 0.793
17:25:14 INFO - compress: HL BPP: 0.323
17:25:14 INFO - compress: L BPP: 0.470
17:25:15 INFO - compress: [ESTIMATED]
17:25:15 INFO - compress: BPP: 0.396
17:25:15 INFO - compress: HL BPP: 0.021
17:25:15 INFO - compress: L BPP: 0.375
17:25:15 INFO - compress: [ATTAINED]
17:25:15 INFO - compress: BPP: 0.904
17:25:15 INFO - compress: HL BPP: 0.325
17:25:15 INFO - compress: L BPP: 0.579
17:25:15 INFO - compress: [ESTIMATED]
17:25:15 INFO - compress: BPP: 0.316
17:25:15 INFO - compress: HL BPP: 0.017
17:25:15 INFO - compress: L BPP: 0.298
17:25:15 INFO - compress: [ATTAINED]
17:25:15 INFO - compress: BPP: 0.824
17:25:15 INFO - compress: HL BPP: 0.320
17:25:15 INFO - compress: L BPP: 0.504
17:25:16 INFO - compress: [ESTIMATED]
17:25:16 INFO - compress: BPP: 0.364
17:25:16 INFO - compress: HL BPP: 0.022
17:25:16 INFO - compress: L BPP: 0.343
17:25:16 INFO - compress: [ATTAINED]
17:25:16 INFO - compress: BPP: 0.871
17:25:16 INFO - compress: HL BPP: 0.324
17:25:16 INFO - compress: L BPP: 0.547
17:25:16 INFO - compress: [ESTIMATED]
17:25:16 INFO - compress: BPP: 0.302
17:25:16 INFO - compress: HL BPP: 0.021
17:25:16 INFO - compress: L BPP: 0.281
17:25:16 INFO - compress: [ATTAINED]
17:25:16 INFO - compress: BPP: 0.809
17:25:16 INFO - compress: HL BPP: 0.324
17:25:16 INFO - compress: L BPP: 0.485
17:25:16 INFO - compress: [ESTIMATED]
17:25:16 INFO - compress: BPP: 0.476
17:25:16 INFO - compress: HL BPP: 0.021
17:25:16 INFO - compress: L BPP: 0.455
17:25:16 INFO - compress: [ATTAINED]
17:25:16 INFO - compress: BPP: 0.984
17:25:16 INFO - compress: HL BPP: 0.323
17:25:16 INFO - compress: L BPP: 0.661
17:25:17 INFO - compress: [ESTIMATED]
17:25:17 INFO - compress: BPP: 0.458
17:25:17 INFO - compress: HL BPP: 0.020
17:25:17 INFO - compress: L BPP: 0.438
17:25:17 INFO - compress: [ATTAINED]
17:25:17 INFO - compress: BPP: 0.965
17:25:17 INFO - compress: HL BPP: 0.322
17:25:17 INFO - compress: L BPP: 0.643
17:25:17 INFO - compress: [ESTIMATED]
17:25:17 INFO - compress: BPP: 0.585
17:25:17 INFO - compress: HL BPP: 0.021
17:25:17 INFO - compress: L BPP: 0.564
17:25:17 INFO - compress: [ATTAINED]
17:25:17 INFO - compress: BPP: 1.093
17:25:17 INFO - compress: HL BPP: 0.325
17:25:17 INFO - compress: L BPP: 0.768
17:25:18 INFO - compress: [ESTIMATED]
17:25:18 INFO - compress: BPP: 0.450
17:25:18 INFO - compress: HL BPP: 0.019
17:25:18 INFO - compress: L BPP: 0.432
17:25:18 INFO - compress: [ATTAINED]
17:25:18 INFO - compress: BPP: 0.958
17:25:18 INFO - compress: HL BPP: 0.320
17:25:18 INFO - compress: L BPP: 0.637
17:25:18 INFO - compress: [ESTIMATED]
17:25:18 INFO - compress: BPP: 0.363
17:25:18 INFO - compress: HL BPP: 0.020
17:25:18 INFO - compress: L BPP: 0.343
17:25:18 INFO - compress: [ATTAINED]
17:25:18 INFO - compress: BPP: 0.870
17:25:18 INFO - compress: HL BPP: 0.323
17:25:18 INFO - compress: L BPP: 0.547
17:25:19 INFO - compress: [ESTIMATED]
17:25:19 INFO - compress: BPP: 0.409
17:25:19 INFO - compress: HL BPP: 0.019
17:25:19 INFO - compress: L BPP: 0.390
17:25:19 INFO - compress: [ATTAINED]
17:25:19 INFO - compress: BPP: 0.918
17:25:19 INFO - compress: HL BPP: 0.321
17:25:19 INFO - compress: L BPP: 0.597
17:25:19 INFO - compress: [ESTIMATED]
17:25:19 INFO - compress: BPP: 0.180
17:25:19 INFO - compress: HL BPP: 0.020
17:25:19 INFO - compress: L BPP: 0.160
17:25:19 INFO - compress: [ATTAINED]
17:25:19 INFO - compress: BPP: 0.686
17:25:19 INFO - compress: HL BPP: 0.322
17:25:19 INFO - compress: L BPP: 0.363
17:25:20 INFO - compress: [ESTIMATED]
17:25:20 INFO - compress: BPP: 0.423
17:25:20 INFO - compress: HL BPP: 0.023
17:25:20 INFO - compress: L BPP: 0.400
17:25:20 INFO - compress: [ATTAINED]
17:25:20 INFO - compress: BPP: 0.932
17:25:20 INFO - compress: HL BPP: 0.325
17:25:20 INFO - compress: L BPP: 0.607
17:25:20 INFO - compress: [ESTIMATED]
17:25:20 INFO - compress: BPP: 0.351
17:25:20 INFO - compress: HL BPP: 0.021
17:25:20 INFO - compress: L BPP: 0.330
17:25:20 INFO - compress: [ATTAINED]
17:25:20 INFO - compress: BPP: 0.859
17:25:20 INFO - compress: HL BPP: 0.324
17:25:20 INFO - compress: L BPP: 0.535
17:25:21 INFO - compress: [ESTIMATED]
17:25:21 INFO - compress: BPP: 0.425
17:25:21 INFO - compress: HL BPP: 0.020
17:25:21 INFO - compress: L BPP: 0.405
17:25:21 INFO - compress: [ATTAINED]
17:25:21 INFO - compress: BPP: 0.932
17:25:21 INFO - compress: HL BPP: 0.322
17:25:21 INFO - compress: L BPP: 0.610
17:25:21 INFO - compress: [ESTIMATED]
17:25:21 INFO - compress: BPP: 0.278
17:25:21 INFO - compress: HL BPP: 0.018
17:25:21 INFO - compress: L BPP: 0.260
17:25:21 INFO - compress: [ATTAINED]
17:25:21 INFO - compress: BPP: 0.786
17:25:21 INFO - compress: HL BPP: 0.320
17:25:21 INFO - compress: L BPP: 0.466
17:25:22 INFO - compress: [ESTIMATED]
17:25:22 INFO - compress: BPP: 0.388
17:25:22 INFO - compress: HL BPP: 0.021
17:25:22 INFO - compress: L BPP: 0.367
17:25:22 INFO - compress: [ATTAINED]
17:25:22 INFO - compress: BPP: 0.896
17:25:22 INFO - compress: HL BPP: 0.325
17:25:22 INFO - compress: L BPP: 0.571
17:25:22 INFO - compress: [ESTIMATED]
17:25:22 INFO - compress: BPP: 0.360
17:25:22 INFO - compress: HL BPP: 0.019
17:25:22 INFO - compress: L BPP: 0.341
17:25:22 INFO - compress: [ATTAINED]
17:25:22 INFO - compress: BPP: 0.867
17:25:22 INFO - compress: HL BPP: 0.322
17:25:22 INFO - compress: L BPP: 0.545
17:25:23 INFO - compress: [ESTIMATED]
17:25:23 INFO - compress: BPP: 0.187
17:25:23 INFO - compress: HL BPP: 0.018
17:25:23 INFO - compress: L BPP: 0.169
17:25:23 INFO - compress: [ATTAINED]
17:25:23 INFO - compress: BPP: 0.694
17:25:23 INFO - compress: HL BPP: 0.321
17:25:23 INFO - compress: L BPP: 0.374
17:25:23 INFO - compress: [ESTIMATED]
17:25:23 INFO - compress: BPP: 0.551
17:25:23 INFO - compress: HL BPP: 0.020
17:25:23 INFO - compress: L BPP: 0.530
17:25:23 INFO - compress: [ATTAINED]
17:25:23 INFO - compress: BPP: 1.061
17:25:23 INFO - compress: HL BPP: 0.325
17:25:23 INFO - compress: L BPP: 0.736
17:25:24 INFO - compress: [ESTIMATED]
17:25:24 INFO - compress: BPP: 0.484
17:25:24 INFO - compress: HL BPP: 0.021
17:25:24 INFO - compress: L BPP: 0.464
17:25:24 INFO - compress: [ATTAINED]
17:25:24 INFO - compress: BPP: 0.994
17:25:24 INFO - compress: HL BPP: 0.324
17:25:24 INFO - compress: L BPP: 0.669
17:25:24 INFO - compress: [ESTIMATED]
17:25:24 INFO - compress: BPP: 0.535
17:25:24 INFO - compress: HL BPP: 0.019
17:25:24 INFO - compress: L BPP: 0.516
17:25:24 INFO - compress: [ATTAINED]
17:25:24 INFO - compress: BPP: 1.043
17:25:24 INFO - compress: HL BPP: 0.322
17:25:24 INFO - compress: L BPP: 0.721
17:25:25 INFO - compress: [ESTIMATED]
17:25:25 INFO - compress: BPP: 0.466
17:25:25 INFO - compress: HL BPP: 0.021
17:25:25 INFO - compress: L BPP: 0.445
17:25:25 INFO - compress: [ATTAINED]
17:25:25 INFO - compress: BPP: 0.974
17:25:25 INFO - compress: HL BPP: 0.324
17:25:25 INFO - compress: L BPP: 0.649
17:25:25 INFO - compress: [ESTIMATED]
17:25:25 INFO - compress: BPP: 0.447
17:25:25 INFO - compress: HL BPP: 0.019
17:25:25 INFO - compress: L BPP: 0.428
17:25:25 INFO - compress: [ATTAINED]
17:25:25 INFO - compress: BPP: 0.954
17:25:25 INFO - compress: HL BPP: 0.321
17:25:25 INFO - compress: L BPP: 0.633
17:25:26 INFO - compress: [ESTIMATED]
17:25:26 INFO - compress: BPP: 0.151
17:25:26 INFO - compress: HL BPP: 0.017
17:25:26 INFO - compress: L BPP: 0.134
17:25:26 INFO - compress: [ATTAINED]
17:25:26 INFO - compress: BPP: 0.657
17:25:26 INFO - compress: HL BPP: 0.318
17:25:26 INFO - compress: L BPP: 0.338
17:25:26 INFO - compress: [ESTIMATED]
17:25:26 INFO - compress: BPP: 0.240
17:25:26 INFO - compress: HL BPP: 0.019
17:25:26 INFO - compress: L BPP: 0.221
17:25:26 INFO - compress: [ATTAINED]
17:25:26 INFO - compress: BPP: 0.745
17:25:26 INFO - compress: HL BPP: 0.322
17:25:26 INFO - compress: L BPP: 0.423
17:25:26 INFO - compress: [ESTIMATED]
17:25:26 INFO - compress: BPP: 0.581
17:25:26 INFO - compress: HL BPP: 0.021
17:25:26 INFO - compress: L BPP: 0.560
17:25:26 INFO - compress: [ATTAINED]
17:25:26 INFO - compress: BPP: 1.089
17:25:26 INFO - compress: HL BPP: 0.324
17:25:26 INFO - compress: L BPP: 0.765
17:25:27 INFO - compress: [ESTIMATED]
17:25:27 INFO - compress: BPP: 0.508
17:25:27 INFO - compress: HL BPP: 0.021
17:25:27 INFO - compress: L BPP: 0.488
17:25:27 INFO - compress: [ATTAINED]
17:25:27 INFO - compress: BPP: 1.014
17:25:27 INFO - compress: HL BPP: 0.323
17:25:27 INFO - compress: L BPP: 0.691
17:25:27 INFO - compress: [ESTIMATED]
17:25:27 INFO - compress: BPP: 0.437
17:25:27 INFO - compress: HL BPP: 0.021
17:25:27 INFO - compress: L BPP: 0.416
17:25:27 INFO - compress: [ATTAINED]
17:25:27 INFO - compress: BPP: 0.943
17:25:27 INFO - compress: HL BPP: 0.324
17:25:27 INFO - compress: L BPP: 0.619
17:25:28 INFO - compress: [ESTIMATED]
17:25:28 INFO - compress: BPP: 0.514
17:25:28 INFO - compress: HL BPP: 0.019
17:25:28 INFO - compress: L BPP: 0.495
17:25:28 INFO - compress: [ATTAINED]
17:25:28 INFO - compress: BPP: 1.019
17:25:28 INFO - compress: HL BPP: 0.320
17:25:28 INFO - compress: L BPP: 0.699
17:25:28 INFO - compress: [ESTIMATED]
17:25:28 INFO - compress: BPP: 0.350
17:25:28 INFO - compress: HL BPP: 0.020
17:25:28 INFO - compress: L BPP: 0.329
17:25:28 INFO - compress: [ATTAINED]
17:25:28 INFO - compress: BPP: 0.854
17:25:28 INFO - compress: HL BPP: 0.323
17:25:28 INFO - compress: L BPP: 0.531
17:25:29 INFO - compress: [ESTIMATED]
17:25:29 INFO - compress: BPP: 0.192
17:25:29 INFO - compress: HL BPP: 0.019
17:25:29 INFO - compress: L BPP: 0.174
17:25:29 INFO - compress: [ATTAINED]
17:25:29 INFO - compress: BPP: 0.698
17:25:29 INFO - compress: HL BPP: 0.320
17:25:29 INFO - compress: L BPP: 0.378
17:25:29 INFO - compress: [ESTIMATED]
17:25:29 INFO - compress: BPP: 0.364
17:25:29 INFO - compress: HL BPP: 0.020
17:25:29 INFO - compress: L BPP: 0.344
17:25:29 INFO - compress: [ATTAINED]
17:25:29 INFO - compress: BPP: 0.873
17:25:29 INFO - compress: HL BPP: 0.324
17:25:29 INFO - compress: L BPP: 0.549
17:25:30 INFO - compress: [ESTIMATED]
17:25:30 INFO - compress: BPP: 0.400
17:25:30 INFO - compress: HL BPP: 0.022
17:25:30 INFO - compress: L BPP: 0.377
17:25:30 INFO - compress: [ATTAINED]
17:25:30 INFO - compress: BPP: 0.905
17:25:30 INFO - compress: HL BPP: 0.326
17:25:30 INFO - compress: L BPP: 0.579
17:25:30 INFO - compress: [ESTIMATED]
17:25:30 INFO - compress: BPP: 0.323
17:25:30 INFO - compress: HL BPP: 0.020
17:25:30 INFO - compress: L BPP: 0.303
17:25:30 INFO - compress: [ATTAINED]
17:25:30 INFO - compress: BPP: 0.833
17:25:30 INFO - compress: HL BPP: 0.325
17:25:30 INFO - compress: L BPP: 0.508
17:25:31 INFO - compress: [ESTIMATED]
17:25:31 INFO - compress: BPP: 0.400
17:25:31 INFO - compress: HL BPP: 0.020
17:25:31 INFO - compress: L BPP: 0.380
17:25:31 INFO - compress: [ATTAINED]
17:25:31 INFO - compress: BPP: 0.906
17:25:31 INFO - compress: HL BPP: 0.322
17:25:31 INFO - compress: L BPP: 0.584
17:25:31 INFO - compress: [ESTIMATED]
17:25:31 INFO - compress: BPP: 0.443
17:25:31 INFO - compress: HL BPP: 0.021
17:25:31 INFO - compress: L BPP: 0.422
17:25:31 INFO - compress: [ATTAINED]
17:25:31 INFO - compress: BPP: 0.951
17:25:31 INFO - compress: HL BPP: 0.325
17:25:31 INFO - compress: L BPP: 0.626
17:25:32 INFO - compress: [ESTIMATED]
17:25:32 INFO - compress: BPP: 0.080
17:25:32 INFO - compress: HL BPP: 0.016
17:25:32 INFO - compress: L BPP: 0.064
17:25:32 INFO - compress: [ATTAINED]
17:25:32 INFO - compress: BPP: 0.585
17:25:32 INFO - compress: HL BPP: 0.318
17:25:32 INFO - compress: L BPP: 0.267
17:25:32 INFO - compress: [ESTIMATED]
17:25:32 INFO - compress: BPP: 0.544
17:25:32 INFO - compress: HL BPP: 0.022
17:25:32 INFO - compress: L BPP: 0.522
17:25:32 INFO - compress: [ATTAINED]
17:25:32 INFO - compress: BPP: 1.054
17:25:32 INFO - compress: HL BPP: 0.325
17:25:32 INFO - compress: L BPP: 0.729
17:25:33 INFO - compress: [ESTIMATED]
17:25:33 INFO - compress: BPP: 0.600
17:25:33 INFO - compress: HL BPP: 0.020
17:25:33 INFO - compress: L BPP: 0.580
17:25:33 INFO - compress: [ATTAINED]
17:25:33 INFO - compress: BPP: 1.105
17:25:33 INFO - compress: HL BPP: 0.321
17:25:33 INFO - compress: L BPP: 0.784
17:25:33 INFO - compress: [ESTIMATED]
17:25:33 INFO - compress: BPP: 0.412
17:25:33 INFO - compress: HL BPP: 0.024
17:25:33 INFO - compress: L BPP: 0.388
17:25:33 INFO - compress: [ATTAINED]
17:25:33 INFO - compress: BPP: 0.920
17:25:33 INFO - compress: HL BPP: 0.327
17:25:33 INFO - compress: L BPP: 0.593
17:25:34 INFO - compress: [ESTIMATED]
17:25:34 INFO - compress: BPP: 0.478
17:25:34 INFO - compress: HL BPP: 0.021
17:25:34 INFO - compress: L BPP: 0.457
17:25:34 INFO - compress: [ATTAINED]
17:25:34 INFO - compress: BPP: 0.987
17:25:34 INFO - compress: HL BPP: 0.325
17:25:34 INFO - compress: L BPP: 0.662
17:25:34 INFO - compress: [ESTIMATED]
17:25:34 INFO - compress: BPP: 0.418
17:25:34 INFO - compress: HL BPP: 0.019
17:25:34 INFO - compress: L BPP: 0.399
17:25:34 INFO - compress: [ATTAINED]
17:25:34 INFO - compress: BPP: 0.927
17:25:34 INFO - compress: HL BPP: 0.322
17:25:34 INFO - compress: L BPP: 0.605
17:25:35 INFO - compress: [ESTIMATED]
17:25:35 INFO - compress: BPP: 0.278
17:25:35 INFO - compress: HL BPP: 0.021
17:25:35 INFO - compress: L BPP: 0.258
17:25:35 INFO - compress: [ATTAINED]
17:25:35 INFO - compress: BPP: 0.787
17:25:35 INFO - compress: HL BPP: 0.324
17:25:35 INFO - compress: L BPP: 0.463
17:25:35 INFO - compress: [ESTIMATED]
17:25:35 INFO - compress: BPP: 0.446
17:25:35 INFO - compress: HL BPP: 0.022
17:25:35 INFO - compress: L BPP: 0.424
17:25:35 INFO - compress: [ATTAINED]
17:25:35 INFO - compress: BPP: 0.952
17:25:35 INFO - compress: HL BPP: 0.325
17:25:35 INFO - compress: L BPP: 0.627
17:25:36 INFO - compress: [ESTIMATED]
17:25:36 INFO - compress: BPP: 0.319
17:25:36 INFO - compress: HL BPP: 0.017
17:25:36 INFO - compress: L BPP: 0.301
17:25:36 INFO - compress: [ATTAINED]
17:25:36 INFO - compress: BPP: 0.825
17:25:36 INFO - compress: HL BPP: 0.318
17:25:36 INFO - compress: L BPP: 0.506
17:25:36 INFO - compress: [ESTIMATED]
17:25:36 INFO - compress: BPP: 0.299
17:25:36 INFO - compress: HL BPP: 0.019
17:25:36 INFO - compress: L BPP: 0.281
17:25:36 INFO - compress: [ATTAINED]
17:25:36 INFO - compress: BPP: 0.806
17:25:36 INFO - compress: HL BPP: 0.321
17:25:36 INFO - compress: L BPP: 0.485
17:25:36 INFO - compress: [ESTIMATED]
17:25:36 INFO - compress: BPP: 0.336
17:25:36 INFO - compress: HL BPP: 0.019
17:25:36 INFO - compress: L BPP: 0.316
17:25:36 INFO - compress: [ATTAINED]
17:25:36 INFO - compress: BPP: 0.841
17:25:36 INFO - compress: HL BPP: 0.322
17:25:36 INFO - compress: L BPP: 0.519
17:25:37 INFO - compress: [ESTIMATED]
17:25:37 INFO - compress: BPP: 0.282
17:25:37 INFO - compress: HL BPP: 0.019
17:25:37 INFO - compress: L BPP: 0.262
17:25:37 INFO - compress: [ATTAINED]
17:25:37 INFO - compress: BPP: 0.789
17:25:37 INFO - compress: HL BPP: 0.323
17:25:37 INFO - compress: L BPP: 0.466
17:25:37 INFO - compress: [ESTIMATED]
17:25:37 INFO - compress: BPP: 0.454
17:25:37 INFO - compress: HL BPP: 0.020
17:25:37 INFO - compress: L BPP: 0.434
17:25:37 INFO - compress: [ATTAINED]
17:25:37 INFO - compress: BPP: 0.960
17:25:37 INFO - compress: HL BPP: 0.324
17:25:37 INFO - compress: L BPP: 0.636
17:25:38 INFO - compress: [ESTIMATED]
17:25:38 INFO - compress: BPP: 0.407
17:25:38 INFO - compress: HL BPP: 0.022
17:25:38 INFO - compress: L BPP: 0.386
17:25:38 INFO - compress: [ATTAINED]
17:25:38 INFO - compress: BPP: 0.914
17:25:38 INFO - compress: HL BPP: 0.324
17:25:38 INFO - compress: L BPP: 0.590
17:25:38 INFO - compress: [ESTIMATED]
17:25:38 INFO - compress: BPP: 0.158
17:25:38 INFO - compress: HL BPP: 0.019
17:25:38 INFO - compress: L BPP: 0.139
17:25:38 INFO - compress: [ATTAINED]
17:25:38 INFO - compress: BPP: 0.664
17:25:38 INFO - compress: HL BPP: 0.323
17:25:38 INFO - compress: L BPP: 0.341
17:25:39 INFO - compress: [ESTIMATED]
17:25:39 INFO - compress: BPP: 0.237
17:25:39 INFO - compress: HL BPP: 0.019
17:25:39 INFO - compress: L BPP: 0.217
17:25:39 INFO - compress: [ATTAINED]
17:25:39 INFO - compress: BPP: 0.742
17:25:39 INFO - compress: HL BPP: 0.322
17:25:39 INFO - compress: L BPP: 0.420
17:25:39 INFO - compress: [ESTIMATED]
17:25:39 INFO - compress: BPP: 0.256
17:25:39 INFO - compress: HL BPP: 0.018
17:25:39 INFO - compress: L BPP: 0.238
17:25:39 INFO - compress: [ATTAINED]
17:25:39 INFO - compress: BPP: 0.762
17:25:39 INFO - compress: HL BPP: 0.320
17:25:39 INFO - compress: L BPP: 0.442
17:25:40 INFO - compress: [ESTIMATED]
17:25:40 INFO - compress: BPP: 0.501
17:25:40 INFO - compress: HL BPP: 0.020
17:25:40 INFO - compress: L BPP: 0.481
17:25:40 INFO - compress: [ATTAINED]
17:25:40 INFO - compress: BPP: 1.006
17:25:40 INFO - compress: HL BPP: 0.323
17:25:40 INFO - compress: L BPP: 0.684
17:25:40 INFO - compress: [ESTIMATED]
17:25:40 INFO - compress: BPP: 0.389
17:25:40 INFO - compress: HL BPP: 0.020
17:25:40 INFO - compress: L BPP: 0.370
17:25:40 INFO - compress: [ATTAINED]
17:25:40 INFO - compress: BPP: 0.897
17:25:40 INFO - compress: HL BPP: 0.322
17:25:40 INFO - compress: L BPP: 0.575
17:25:41 INFO - compress: [ESTIMATED]
17:25:41 INFO - compress: BPP: 0.371
17:25:41 INFO - compress: HL BPP: 0.020
17:25:41 INFO - compress: L BPP: 0.350
17:25:41 INFO - compress: [ATTAINED]
17:25:41 INFO - compress: BPP: 0.879
17:25:41 INFO - compress: HL BPP: 0.325
17:25:41 INFO - compress: L BPP: 0.555
17:25:41 INFO - compress: [ESTIMATED]
17:25:41 INFO - compress: BPP: 0.326
17:25:41 INFO - compress: HL BPP: 0.017
17:25:41 INFO - compress: L BPP: 0.309
17:25:41 INFO - compress: [ATTAINED]
17:25:41 INFO - compress: BPP: 0.833
17:25:41 INFO - compress: HL BPP: 0.318
17:25:41 INFO - compress: L BPP: 0.515
17:25:42 INFO - compress: [ESTIMATED]
17:25:42 INFO - compress: BPP: 0.310
17:25:42 INFO - compress: HL BPP: 0.020
17:25:42 INFO - compress: L BPP: 0.290
17:25:42 INFO - compress: [ATTAINED]
17:25:42 INFO - compress: BPP: 0.817
17:25:42 INFO - compress: HL BPP: 0.322
17:25:42 INFO - compress: L BPP: 0.495
17:25:42 INFO - compress: [ESTIMATED]
17:25:42 INFO - compress: BPP: 0.239
17:25:42 INFO - compress: HL BPP: 0.019
17:25:42 INFO - compress: L BPP: 0.220
17:25:42 INFO - compress: [ATTAINED]
17:25:42 INFO - compress: BPP: 0.747
17:25:42 INFO - compress: HL BPP: 0.322
17:25:42 INFO - compress: L BPP: 0.425
17:25:43 INFO - compress: [ESTIMATED]
17:25:43 INFO - compress: BPP: 0.361
17:25:43 INFO - compress: HL BPP: 0.020
17:25:43 INFO - compress: L BPP: 0.340
17:25:43 INFO - compress: [ATTAINED]
17:25:43 INFO - compress: BPP: 0.869
17:25:43 INFO - compress: HL BPP: 0.323
17:25:43 INFO - compress: L BPP: 0.546
17:25:43 INFO - compress: [ESTIMATED]
17:25:43 INFO - compress: BPP: 0.469
17:25:43 INFO - compress: HL BPP: 0.020
17:25:43 INFO - compress: L BPP: 0.449
17:25:43 INFO - compress: [ATTAINED]
17:25:43 INFO - compress: BPP: 0.977
17:25:43 INFO - compress: HL BPP: 0.324
17:25:43 INFO - compress: L BPP: 0.653
17:25:44 INFO - compress: [ESTIMATED]
17:25:44 INFO - compress: BPP: 0.381
17:25:44 INFO - compress: HL BPP: 0.021
17:25:44 INFO - compress: L BPP: 0.360
17:25:44 INFO - compress: [ATTAINED]
17:25:44 INFO - compress: BPP: 0.889
17:25:44 INFO - compress: HL BPP: 0.325
17:25:44 INFO - compress: L BPP: 0.563
17:25:44 INFO - compress: [ESTIMATED]
17:25:44 INFO - compress: BPP: 0.617
17:25:44 INFO - compress: HL BPP: 0.023
17:25:44 INFO - compress: L BPP: 0.595
17:25:44 INFO - compress: [ATTAINED]
17:25:44 INFO - compress: BPP: 1.124
17:25:44 INFO - compress: HL BPP: 0.328
17:25:44 INFO - compress: L BPP: 0.796
17:25:45 INFO - compress: [ESTIMATED]
17:25:45 INFO - compress: BPP: 0.405
17:25:45 INFO - compress: HL BPP: 0.019
17:25:45 INFO - compress: L BPP: 0.386
17:25:45 INFO - compress: [ATTAINED]
17:25:45 INFO - compress: BPP: 0.911
17:25:45 INFO - compress: HL BPP: 0.322
17:25:45 INFO - compress: L BPP: 0.589
17:25:45 INFO - compress: [ESTIMATED]
17:25:45 INFO - compress: BPP: 0.381
17:25:45 INFO - compress: HL BPP: 0.020
17:25:45 INFO - compress: L BPP: 0.361
17:25:45 INFO - compress: [ATTAINED]
17:25:45 INFO - compress: BPP: 0.887
17:25:45 INFO - compress: HL BPP: 0.323
17:25:45 INFO - compress: L BPP: 0.564
17:25:46 INFO - compress: [ESTIMATED]
17:25:46 INFO - compress: BPP: 0.364
17:25:46 INFO - compress: HL BPP: 0.019
17:25:46 INFO - compress: L BPP: 0.345
17:25:46 INFO - compress: [ATTAINED]
17:25:46 INFO - compress: BPP: 0.873
17:25:46 INFO - compress: HL BPP: 0.322
17:25:46 INFO - compress: L BPP: 0.550
17:25:46 INFO - compress: [ESTIMATED]
17:25:46 INFO - compress: BPP: 0.372
17:25:46 INFO - compress: HL BPP: 0.019
17:25:46 INFO - compress: L BPP: 0.353
17:25:46 INFO - compress: [ATTAINED]
17:25:46 INFO - compress: BPP: 0.879
17:25:46 INFO - compress: HL BPP: 0.321
17:25:46 INFO - compress: L BPP: 0.559
17:25:47 INFO - compress: [ESTIMATED]
17:25:47 INFO - compress: BPP: 0.435
17:25:47 INFO - compress: HL BPP: 0.023
17:25:47 INFO - compress: L BPP: 0.412
17:25:47 INFO - compress: [ATTAINED]
17:25:47 INFO - compress: BPP: 0.941
17:25:47 INFO - compress: HL BPP: 0.326
17:25:47 INFO - compress: L BPP: 0.616
17:25:47 INFO - compress: [ESTIMATED]
17:25:47 INFO - compress: BPP: 0.449
17:25:47 INFO - compress: HL BPP: 0.020
17:25:47 INFO - compress: L BPP: 0.429
17:25:47 INFO - compress: [ATTAINED]
17:25:47 INFO - compress: BPP: 0.957
17:25:47 INFO - compress: HL BPP: 0.322
17:25:47 INFO - compress: L BPP: 0.635
17:25:48 INFO - compress: [ESTIMATED]
17:25:48 INFO - compress: BPP: 0.387
17:25:48 INFO - compress: HL BPP: 0.020
17:25:48 INFO - compress: L BPP: 0.367
17:25:48 INFO - compress: [ATTAINED]
17:25:48 INFO - compress: BPP: 0.896
17:25:48 INFO - compress: HL BPP: 0.323
17:25:48 INFO - compress: L BPP: 0.573
17:25:48 INFO - compress: [ESTIMATED]
17:25:48 INFO - compress: BPP: 0.250
17:25:48 INFO - compress: HL BPP: 0.018
17:25:48 INFO - compress: L BPP: 0.231
17:25:48 INFO - compress: [ATTAINED]
17:25:48 INFO - compress: BPP: 0.758
17:25:48 INFO - compress: HL BPP: 0.322
17:25:48 INFO - compress: L BPP: 0.437
17:25:49 INFO - compress: [ESTIMATED]
17:25:49 INFO - compress: BPP: 0.452
17:25:49 INFO - compress: HL BPP: 0.022
17:25:49 INFO - compress: L BPP: 0.430
17:25:49 INFO - compress: [ATTAINED]
17:25:49 INFO - compress: BPP: 0.958
17:25:49 INFO - compress: HL BPP: 0.324
17:25:49 INFO - compress: L BPP: 0.633
17:25:49 INFO - compress: [ESTIMATED]
17:25:49 INFO - compress: BPP: 0.281
17:25:49 INFO - compress: HL BPP: 0.018
17:25:49 INFO - compress: L BPP: 0.263
17:25:49 INFO - compress: [ATTAINED]
17:25:49 INFO - compress: BPP: 0.787
17:25:49 INFO - compress: HL BPP: 0.320
17:25:49 INFO - compress: L BPP: 0.467
17:25:49 INFO - compress: [ESTIMATED]
17:25:49 INFO - compress: BPP: 0.425
17:25:49 INFO - compress: HL BPP: 0.021
17:25:49 INFO - compress: L BPP: 0.404
17:25:49 INFO - compress: [ATTAINED]
17:25:49 INFO - compress: BPP: 0.932
17:25:49 INFO - compress: HL BPP: 0.323
17:25:49 INFO - compress: L BPP: 0.609
17:25:50 INFO - compress: [ESTIMATED]
17:25:50 INFO - compress: BPP: 0.463
17:25:50 INFO - compress: HL BPP: 0.019
17:25:50 INFO - compress: L BPP: 0.444
17:25:50 INFO - compress: [ATTAINED]
17:25:50 INFO - compress: BPP: 0.970
17:25:50 INFO - compress: HL BPP: 0.322
17:25:50 INFO - compress: L BPP: 0.648
17:25:50 INFO - compress: [ESTIMATED]
17:25:50 INFO - compress: BPP: 0.525
17:25:50 INFO - compress: HL BPP: 0.018
17:25:50 INFO - compress: L BPP: 0.507
17:25:50 INFO - compress: [ATTAINED]
17:25:50 INFO - compress: BPP: 1.030
17:25:50 INFO - compress: HL BPP: 0.320
17:25:50 INFO - compress: L BPP: 0.710
17:25:51 INFO - compress: [ESTIMATED]
17:25:51 INFO - compress: BPP: 0.573
17:25:51 INFO - compress: HL BPP: 0.023
17:25:51 INFO - compress: L BPP: 0.551
17:25:51 INFO - compress: [ATTAINED]
17:25:51 INFO - compress: BPP: 1.083
17:25:51 INFO - compress: HL BPP: 0.327
17:25:51 INFO - compress: L BPP: 0.757
17:25:51 INFO - compress: [ESTIMATED]
17:25:51 INFO - compress: BPP: 0.624
17:25:51 INFO - compress: HL BPP: 0.021
17:25:51 INFO - compress: L BPP: 0.603
17:25:51 INFO - compress: [ATTAINED]
17:25:51 INFO - compress: BPP: 1.131
17:25:51 INFO - compress: HL BPP: 0.325
17:25:51 INFO - compress: L BPP: 0.807
17:25:52 INFO - compress: [ESTIMATED]
17:25:52 INFO - compress: BPP: 0.544
17:25:52 INFO - compress: HL BPP: 0.021
17:25:52 INFO - compress: L BPP: 0.523
17:25:52 INFO - compress: [ATTAINED]
17:25:52 INFO - compress: BPP: 1.052
17:25:52 INFO - compress: HL BPP: 0.325
17:25:52 INFO - compress: L BPP: 0.728
17:25:52 INFO - compress: [ESTIMATED]
17:25:52 INFO - compress: BPP: 0.581
17:25:52 INFO - compress: HL BPP: 0.024
17:25:52 INFO - compress: L BPP: 0.558
17:25:52 INFO - compress: [ATTAINED]
17:25:52 INFO - compress: BPP: 1.092
17:25:52 INFO - compress: HL BPP: 0.328
17:25:52 INFO - compress: L BPP: 0.764
17:25:53 INFO - compress: [ESTIMATED]
17:25:53 INFO - compress: BPP: 0.591
17:25:53 INFO - compress: HL BPP: 0.020
17:25:53 INFO - compress: L BPP: 0.571
17:25:53 INFO - compress: [ATTAINED]
17:25:53 INFO - compress: BPP: 1.097
17:25:53 INFO - compress: HL BPP: 0.323
17:25:53 INFO - compress: L BPP: 0.774
17:25:53 INFO - compress: [ESTIMATED]
17:25:53 INFO - compress: BPP: 0.263
17:25:53 INFO - compress: HL BPP: 0.019
17:25:53 INFO - compress: L BPP: 0.244
17:25:53 INFO - compress: [ATTAINED]
17:25:53 INFO - compress: BPP: 0.770
17:25:53 INFO - compress: HL BPP: 0.321
17:25:53 INFO - compress: L BPP: 0.449
17:25:54 INFO - compress: [ESTIMATED]
17:25:54 INFO - compress: BPP: 0.224
17:25:54 INFO - compress: HL BPP: 0.019
17:25:54 INFO - compress: L BPP: 0.205
17:25:54 INFO - compress: [ATTAINED]
17:25:54 INFO - compress: BPP: 0.734
17:25:54 INFO - compress: HL BPP: 0.320
17:25:54 INFO - compress: L BPP: 0.414
17:25:54 INFO - compress: [ESTIMATED]
17:25:54 INFO - compress: BPP: 0.264
17:25:54 INFO - compress: HL BPP: 0.018
17:25:54 INFO - compress: L BPP: 0.246
17:25:54 INFO - compress: [ATTAINED]
17:25:54 INFO - compress: BPP: 0.770
17:25:54 INFO - compress: HL BPP: 0.321
17:25:54 INFO - compress: L BPP: 0.449
17:25:55 INFO - compress: [ESTIMATED]
17:25:55 INFO - compress: BPP: 0.159
17:25:55 INFO - compress: HL BPP: 0.017
17:25:55 INFO - compress: L BPP: 0.142
17:25:55 INFO - compress: [ATTAINED]
17:25:55 INFO - compress: BPP: 0.663
17:25:55 INFO - compress: HL BPP: 0.319
17:25:55 INFO - compress: L BPP: 0.344
17:25:55 INFO - compress: [ESTIMATED]
17:25:55 INFO - compress: BPP: 0.408
17:25:55 INFO - compress: HL BPP: 0.020
17:25:55 INFO - compress: L BPP: 0.388
17:25:55 INFO - compress: [ATTAINED]
17:25:55 INFO - compress: BPP: 0.916
17:25:55 INFO - compress: HL BPP: 0.322
17:25:55 INFO - compress: L BPP: 0.594
17:25:56 INFO - compress: [ESTIMATED]
17:25:56 INFO - compress: BPP: 0.518
17:25:56 INFO - compress: HL BPP: 0.021
17:25:56 INFO - compress: L BPP: 0.496
17:25:56 INFO - compress: [ATTAINED]
17:25:56 INFO - compress: BPP: 1.025
17:25:56 INFO - compress: HL BPP: 0.324
17:25:56 INFO - compress: L BPP: 0.701
17:30:13 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:30:32 INFO - load_model: Loading model ...
17:30:32 INFO - load_model: MODEL TYPE: compression_gan
17:30:32 INFO - load_model: MODEL MODE: evaluation
17:30:32 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:30:32 INFO - load_model: Trainable parameters:
17:30:32 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:30:32 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:30:32 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:30:32 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:30:32 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:30:32 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:30:32 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:30:32 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:30:32 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:30:32 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:30:32 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:30:32 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:30:32 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:30:32 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:30:32 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:30:32 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:30:32 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:30:32 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:30:32 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:30:32 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:30:32 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:30:32 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:30:32 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:30:32 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:30:32 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:30:32 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:30:32 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:30:32 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:30:32 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:30:32 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:30:32 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:30:32 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:30:32 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:30:32 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:30:32 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:30:32 INFO - load_model: Number of trainable parameters: 181484483
17:30:32 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:30:32 INFO - load_model: Model init 18.930s
17:30:32 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:30:32 INFO - compress_and_decompress: Building hyperprior probability tables...
17:30:41 INFO - compress_and_decompress: All tables built.
17:30:41 INFO - compress_and_decompress: Starting compression...
17:34:46 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:34:51 INFO - load_model: Loading model ...
17:34:51 INFO - load_model: MODEL TYPE: compression_gan
17:34:51 INFO - load_model: MODEL MODE: evaluation
17:34:51 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:34:51 INFO - load_model: Trainable parameters:
17:34:51 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:34:51 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:34:51 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:34:51 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:34:51 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:34:51 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:34:51 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:34:51 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:34:51 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:34:51 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:34:51 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:34:51 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:34:51 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:34:51 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:34:51 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:34:51 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:34:51 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:34:51 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:34:51 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:34:51 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:34:51 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:34:51 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:34:51 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:34:51 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:34:51 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:34:51 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:34:51 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:34:51 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:34:51 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:34:51 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:34:51 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:34:51 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:34:51 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:34:51 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:34:51 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:34:51 INFO - load_model: Number of trainable parameters: 181484483
17:34:51 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:34:51 INFO - load_model: Model init 5.216s
17:34:51 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:34:51 INFO - compress_and_decompress: Building hyperprior probability tables...
17:35:02 INFO - compress_and_decompress: All tables built.
17:35:02 INFO - compress_and_decompress: Starting compression...
17:35:04 INFO - compress: [ESTIMATED]
17:35:04 INFO - compress: BPP: 0.329
17:35:04 INFO - compress: HL BPP: 0.019
17:35:04 INFO - compress: L BPP: 0.310
17:35:04 INFO - compress: [ATTAINED]
17:35:04 INFO - compress: BPP: 0.839
17:35:04 INFO - compress: HL BPP: 0.323
17:35:04 INFO - compress: L BPP: 0.516
17:35:04 INFO - compress: [ESTIMATED]
17:35:04 INFO - compress: BPP: 0.254
17:35:04 INFO - compress: HL BPP: 0.019
17:35:04 INFO - compress: L BPP: 0.235
17:35:04 INFO - compress: [ATTAINED]
17:35:04 INFO - compress: BPP: 0.758
17:35:04 INFO - compress: HL BPP: 0.320
17:35:04 INFO - compress: L BPP: 0.438
17:35:05 INFO - compress: [ESTIMATED]
17:35:05 INFO - compress: BPP: 0.318
17:35:05 INFO - compress: HL BPP: 0.019
17:35:05 INFO - compress: L BPP: 0.298
17:35:05 INFO - compress: [ATTAINED]
17:35:05 INFO - compress: BPP: 0.825
17:35:05 INFO - compress: HL BPP: 0.322
17:35:05 INFO - compress: L BPP: 0.503
17:35:05 INFO - compress: [ESTIMATED]
17:35:05 INFO - compress: BPP: 0.540
17:35:05 INFO - compress: HL BPP: 0.021
17:35:05 INFO - compress: L BPP: 0.519
17:35:05 INFO - compress: [ATTAINED]
17:35:05 INFO - compress: BPP: 1.045
17:35:05 INFO - compress: HL BPP: 0.324
17:35:05 INFO - compress: L BPP: 0.721
17:35:06 INFO - compress: [ESTIMATED]
17:35:06 INFO - compress: BPP: 0.496
17:35:06 INFO - compress: HL BPP: 0.021
17:35:06 INFO - compress: L BPP: 0.475
17:35:06 INFO - compress: [ATTAINED]
17:35:06 INFO - compress: BPP: 1.003
17:35:06 INFO - compress: HL BPP: 0.323
17:35:06 INFO - compress: L BPP: 0.680
17:35:07 INFO - compress: [ESTIMATED]
17:35:07 INFO - compress: BPP: 0.306
17:35:07 INFO - compress: HL BPP: 0.021
17:35:07 INFO - compress: L BPP: 0.285
17:35:07 INFO - compress: [ATTAINED]
17:35:07 INFO - compress: BPP: 0.811
17:35:07 INFO - compress: HL BPP: 0.324
17:35:07 INFO - compress: L BPP: 0.487
17:35:07 INFO - compress: [ESTIMATED]
17:35:07 INFO - compress: BPP: 0.439
17:35:07 INFO - compress: HL BPP: 0.022
17:35:07 INFO - compress: L BPP: 0.417
17:35:07 INFO - compress: [ATTAINED]
17:35:07 INFO - compress: BPP: 0.945
17:35:07 INFO - compress: HL BPP: 0.324
17:35:07 INFO - compress: L BPP: 0.622
17:35:08 INFO - compress: [ESTIMATED]
17:35:08 INFO - compress: BPP: 0.485
17:35:08 INFO - compress: HL BPP: 0.020
17:35:08 INFO - compress: L BPP: 0.466
17:35:08 INFO - compress: [ATTAINED]
17:35:08 INFO - compress: BPP: 0.993
17:35:08 INFO - compress: HL BPP: 0.321
17:35:08 INFO - compress: L BPP: 0.672
17:35:08 INFO - compress: [ESTIMATED]
17:35:08 INFO - compress: BPP: 0.375
17:35:08 INFO - compress: HL BPP: 0.020
17:35:08 INFO - compress: L BPP: 0.355
17:35:08 INFO - compress: [ATTAINED]
17:35:08 INFO - compress: BPP: 0.883
17:35:08 INFO - compress: HL BPP: 0.322
17:35:08 INFO - compress: L BPP: 0.561
17:35:09 INFO - compress: [ESTIMATED]
17:35:09 INFO - compress: BPP: 0.496
17:35:09 INFO - compress: HL BPP: 0.021
17:35:09 INFO - compress: L BPP: 0.475
17:35:09 INFO - compress: [ATTAINED]
17:35:09 INFO - compress: BPP: 1.001
17:35:09 INFO - compress: HL BPP: 0.323
17:35:09 INFO - compress: L BPP: 0.678
17:35:09 INFO - compress: [ESTIMATED]
17:35:09 INFO - compress: BPP: 0.414
17:35:09 INFO - compress: HL BPP: 0.020
17:35:09 INFO - compress: L BPP: 0.393
17:35:09 INFO - compress: [ATTAINED]
17:35:09 INFO - compress: BPP: 0.918
17:35:09 INFO - compress: HL BPP: 0.322
17:35:09 INFO - compress: L BPP: 0.596
17:35:10 INFO - compress: [ESTIMATED]
17:35:10 INFO - compress: BPP: 0.512
17:35:10 INFO - compress: HL BPP: 0.020
17:35:10 INFO - compress: L BPP: 0.492
17:35:10 INFO - compress: [ATTAINED]
17:35:10 INFO - compress: BPP: 1.019
17:35:10 INFO - compress: HL BPP: 0.322
17:35:10 INFO - compress: L BPP: 0.696
17:35:11 INFO - compress: [ESTIMATED]
17:35:11 INFO - compress: BPP: 0.295
17:35:11 INFO - compress: HL BPP: 0.020
17:35:11 INFO - compress: L BPP: 0.275
17:35:11 INFO - compress: [ATTAINED]
17:35:11 INFO - compress: BPP: 0.804
17:35:11 INFO - compress: HL BPP: 0.322
17:35:11 INFO - compress: L BPP: 0.482
17:35:11 INFO - compress: [ESTIMATED]
17:35:11 INFO - compress: BPP: 0.637
17:35:11 INFO - compress: HL BPP: 0.021
17:35:11 INFO - compress: L BPP: 0.617
17:35:11 INFO - compress: [ATTAINED]
17:35:11 INFO - compress: BPP: 1.145
17:35:11 INFO - compress: HL BPP: 0.324
17:35:11 INFO - compress: L BPP: 0.821
17:35:12 INFO - compress: [ESTIMATED]
17:35:12 INFO - compress: BPP: 0.400
17:35:12 INFO - compress: HL BPP: 0.020
17:35:12 INFO - compress: L BPP: 0.380
17:35:12 INFO - compress: [ATTAINED]
17:35:12 INFO - compress: BPP: 0.905
17:35:12 INFO - compress: HL BPP: 0.321
17:35:12 INFO - compress: L BPP: 0.584
17:35:12 INFO - compress: [ESTIMATED]
17:35:12 INFO - compress: BPP: 0.474
17:35:12 INFO - compress: HL BPP: 0.024
17:35:12 INFO - compress: L BPP: 0.450
17:35:12 INFO - compress: [ATTAINED]
17:35:12 INFO - compress: BPP: 0.981
17:35:12 INFO - compress: HL BPP: 0.328
17:35:12 INFO - compress: L BPP: 0.653
17:35:13 INFO - compress: [ESTIMATED]
17:35:13 INFO - compress: BPP: 0.571
17:35:13 INFO - compress: HL BPP: 0.022
17:35:13 INFO - compress: L BPP: 0.549
17:35:13 INFO - compress: [ATTAINED]
17:35:13 INFO - compress: BPP: 1.078
17:35:13 INFO - compress: HL BPP: 0.326
17:35:13 INFO - compress: L BPP: 0.752
17:35:13 INFO - compress: [ESTIMATED]
17:35:13 INFO - compress: BPP: 0.410
17:35:13 INFO - compress: HL BPP: 0.021
17:35:13 INFO - compress: L BPP: 0.389
17:35:13 INFO - compress: [ATTAINED]
17:35:13 INFO - compress: BPP: 0.916
17:35:13 INFO - compress: HL BPP: 0.324
17:35:13 INFO - compress: L BPP: 0.592
17:35:14 INFO - compress: [ESTIMATED]
17:35:14 INFO - compress: BPP: 0.338
17:35:14 INFO - compress: HL BPP: 0.018
17:35:14 INFO - compress: L BPP: 0.320
17:35:14 INFO - compress: [ATTAINED]
17:35:14 INFO - compress: BPP: 0.846
17:35:14 INFO - compress: HL BPP: 0.321
17:35:14 INFO - compress: L BPP: 0.525
17:35:15 INFO - compress: [ESTIMATED]
17:35:15 INFO - compress: BPP: 0.465
17:35:15 INFO - compress: HL BPP: 0.022
17:35:15 INFO - compress: L BPP: 0.443
17:35:15 INFO - compress: [ATTAINED]
17:35:15 INFO - compress: BPP: 0.973
17:35:15 INFO - compress: HL BPP: 0.325
17:35:15 INFO - compress: L BPP: 0.648
17:35:15 INFO - compress: [ESTIMATED]
17:35:15 INFO - compress: BPP: 0.485
17:35:15 INFO - compress: HL BPP: 0.023
17:35:15 INFO - compress: L BPP: 0.463
17:35:15 INFO - compress: [ATTAINED]
17:35:15 INFO - compress: BPP: 0.994
17:35:15 INFO - compress: HL BPP: 0.328
17:35:15 INFO - compress: L BPP: 0.666
17:35:16 INFO - compress: [ESTIMATED]
17:35:16 INFO - compress: BPP: 0.241
17:35:16 INFO - compress: HL BPP: 0.019
17:35:16 INFO - compress: L BPP: 0.223
17:35:16 INFO - compress: [ATTAINED]
17:35:16 INFO - compress: BPP: 0.749
17:35:16 INFO - compress: HL BPP: 0.321
17:35:16 INFO - compress: L BPP: 0.427
17:35:16 INFO - compress: [ESTIMATED]
17:35:16 INFO - compress: BPP: 0.376
17:35:16 INFO - compress: HL BPP: 0.024
17:35:16 INFO - compress: L BPP: 0.352
17:35:16 INFO - compress: [ATTAINED]
17:35:16 INFO - compress: BPP: 0.884
17:35:16 INFO - compress: HL BPP: 0.327
17:35:16 INFO - compress: L BPP: 0.557
17:35:17 INFO - compress: [ESTIMATED]
17:35:17 INFO - compress: BPP: 0.349
17:35:17 INFO - compress: HL BPP: 0.019
17:35:17 INFO - compress: L BPP: 0.330
17:35:17 INFO - compress: [ATTAINED]
17:35:17 INFO - compress: BPP: 0.855
17:35:17 INFO - compress: HL BPP: 0.322
17:35:17 INFO - compress: L BPP: 0.533
17:35:17 INFO - compress: [ESTIMATED]
17:35:17 INFO - compress: BPP: 0.371
17:35:17 INFO - compress: HL BPP: 0.019
17:35:17 INFO - compress: L BPP: 0.352
17:35:17 INFO - compress: [ATTAINED]
17:35:17 INFO - compress: BPP: 0.877
17:35:17 INFO - compress: HL BPP: 0.321
17:35:17 INFO - compress: L BPP: 0.556
17:35:18 INFO - compress: [ESTIMATED]
17:35:18 INFO - compress: BPP: 0.337
17:35:18 INFO - compress: HL BPP: 0.019
17:35:18 INFO - compress: L BPP: 0.318
17:35:18 INFO - compress: [ATTAINED]
17:35:18 INFO - compress: BPP: 0.844
17:35:18 INFO - compress: HL BPP: 0.322
17:35:18 INFO - compress: L BPP: 0.522
17:35:18 INFO - compress: [ESTIMATED]
17:35:18 INFO - compress: BPP: 0.317
17:35:18 INFO - compress: HL BPP: 0.021
17:35:18 INFO - compress: L BPP: 0.297
17:35:18 INFO - compress: [ATTAINED]
17:35:18 INFO - compress: BPP: 0.826
17:35:18 INFO - compress: HL BPP: 0.324
17:35:18 INFO - compress: L BPP: 0.502
17:35:19 INFO - compress: [ESTIMATED]
17:35:19 INFO - compress: BPP: 0.525
17:35:19 INFO - compress: HL BPP: 0.021
17:35:19 INFO - compress: L BPP: 0.504
17:35:19 INFO - compress: [ATTAINED]
17:35:19 INFO - compress: BPP: 1.034
17:35:19 INFO - compress: HL BPP: 0.323
17:35:19 INFO - compress: L BPP: 0.710
17:35:19 INFO - compress: [ESTIMATED]
17:35:19 INFO - compress: BPP: 0.511
17:35:19 INFO - compress: HL BPP: 0.021
17:35:19 INFO - compress: L BPP: 0.489
17:35:19 INFO - compress: [ATTAINED]
17:35:19 INFO - compress: BPP: 1.016
17:35:19 INFO - compress: HL BPP: 0.324
17:35:19 INFO - compress: L BPP: 0.692
17:35:20 INFO - compress: [ESTIMATED]
17:35:20 INFO - compress: BPP: 0.295
17:35:20 INFO - compress: HL BPP: 0.018
17:35:20 INFO - compress: L BPP: 0.277
17:35:20 INFO - compress: [ATTAINED]
17:35:20 INFO - compress: BPP: 0.802
17:35:20 INFO - compress: HL BPP: 0.321
17:35:20 INFO - compress: L BPP: 0.481
17:35:20 INFO - compress: [ESTIMATED]
17:35:20 INFO - compress: BPP: 0.321
17:35:20 INFO - compress: HL BPP: 0.019
17:35:20 INFO - compress: L BPP: 0.301
17:35:20 INFO - compress: [ATTAINED]
17:35:20 INFO - compress: BPP: 0.827
17:35:20 INFO - compress: HL BPP: 0.322
17:35:20 INFO - compress: L BPP: 0.505
17:35:21 INFO - compress: [ESTIMATED]
17:35:21 INFO - compress: BPP: 0.581
17:35:21 INFO - compress: HL BPP: 0.020
17:35:21 INFO - compress: L BPP: 0.562
17:35:21 INFO - compress: [ATTAINED]
17:35:21 INFO - compress: BPP: 1.088
17:35:21 INFO - compress: HL BPP: 0.323
17:35:21 INFO - compress: L BPP: 0.765
17:35:21 INFO - compress: [ESTIMATED]
17:35:21 INFO - compress: BPP: 0.388
17:35:21 INFO - compress: HL BPP: 0.021
17:35:21 INFO - compress: L BPP: 0.367
17:35:21 INFO - compress: [ATTAINED]
17:35:21 INFO - compress: BPP: 0.896
17:35:21 INFO - compress: HL BPP: 0.324
17:35:21 INFO - compress: L BPP: 0.572
17:35:22 INFO - compress: [ESTIMATED]
17:35:22 INFO - compress: BPP: 0.223
17:35:22 INFO - compress: HL BPP: 0.017
17:35:22 INFO - compress: L BPP: 0.205
17:35:22 INFO - compress: [ATTAINED]
17:35:22 INFO - compress: BPP: 0.731
17:35:22 INFO - compress: HL BPP: 0.321
17:35:22 INFO - compress: L BPP: 0.410
17:35:22 INFO - compress: [ESTIMATED]
17:35:22 INFO - compress: BPP: 0.460
17:35:22 INFO - compress: HL BPP: 0.020
17:35:22 INFO - compress: L BPP: 0.439
17:35:22 INFO - compress: [ATTAINED]
17:35:22 INFO - compress: BPP: 0.968
17:35:22 INFO - compress: HL BPP: 0.322
17:35:22 INFO - compress: L BPP: 0.646
17:35:23 INFO - compress: [ESTIMATED]
17:35:23 INFO - compress: BPP: 0.235
17:35:23 INFO - compress: HL BPP: 0.018
17:35:23 INFO - compress: L BPP: 0.217
17:35:23 INFO - compress: [ATTAINED]
17:35:23 INFO - compress: BPP: 0.741
17:35:23 INFO - compress: HL BPP: 0.320
17:35:23 INFO - compress: L BPP: 0.420
17:35:23 INFO - compress: [ESTIMATED]
17:35:23 INFO - compress: BPP: 0.241
17:35:23 INFO - compress: HL BPP: 0.019
17:35:23 INFO - compress: L BPP: 0.222
17:35:23 INFO - compress: [ATTAINED]
17:35:23 INFO - compress: BPP: 0.746
17:35:23 INFO - compress: HL BPP: 0.321
17:35:23 INFO - compress: L BPP: 0.424
17:35:24 INFO - compress: [ESTIMATED]
17:35:24 INFO - compress: BPP: 0.319
17:35:24 INFO - compress: HL BPP: 0.019
17:35:24 INFO - compress: L BPP: 0.300
17:35:24 INFO - compress: [ATTAINED]
17:35:24 INFO - compress: BPP: 0.827
17:35:24 INFO - compress: HL BPP: 0.322
17:35:24 INFO - compress: L BPP: 0.505
17:35:24 INFO - compress: [ESTIMATED]
17:35:24 INFO - compress: BPP: 0.620
17:35:24 INFO - compress: HL BPP: 0.021
17:35:24 INFO - compress: L BPP: 0.599
17:35:24 INFO - compress: [ATTAINED]
17:35:24 INFO - compress: BPP: 1.128
17:35:24 INFO - compress: HL BPP: 0.325
17:35:24 INFO - compress: L BPP: 0.803
17:35:25 INFO - compress: [ESTIMATED]
17:35:25 INFO - compress: BPP: 0.440
17:35:25 INFO - compress: HL BPP: 0.019
17:35:25 INFO - compress: L BPP: 0.421
17:35:25 INFO - compress: [ATTAINED]
17:35:25 INFO - compress: BPP: 0.948
17:35:25 INFO - compress: HL BPP: 0.322
17:35:25 INFO - compress: L BPP: 0.626
17:35:25 INFO - compress: [ESTIMATED]
17:35:25 INFO - compress: BPP: 0.416
17:35:25 INFO - compress: HL BPP: 0.022
17:35:25 INFO - compress: L BPP: 0.393
17:35:25 INFO - compress: [ATTAINED]
17:35:25 INFO - compress: BPP: 0.925
17:35:25 INFO - compress: HL BPP: 0.327
17:35:25 INFO - compress: L BPP: 0.598
17:35:26 INFO - compress: [ESTIMATED]
17:35:26 INFO - compress: BPP: 0.241
17:35:26 INFO - compress: HL BPP: 0.019
17:35:26 INFO - compress: L BPP: 0.221
17:35:26 INFO - compress: [ATTAINED]
17:35:26 INFO - compress: BPP: 0.748
17:35:26 INFO - compress: HL BPP: 0.323
17:35:26 INFO - compress: L BPP: 0.425
17:35:26 INFO - compress: [ESTIMATED]
17:35:26 INFO - compress: BPP: 0.420
17:35:26 INFO - compress: HL BPP: 0.021
17:35:26 INFO - compress: L BPP: 0.399
17:35:26 INFO - compress: [ATTAINED]
17:35:26 INFO - compress: BPP: 0.927
17:35:26 INFO - compress: HL BPP: 0.324
17:35:26 INFO - compress: L BPP: 0.603
17:35:27 INFO - compress: [ESTIMATED]
17:35:27 INFO - compress: BPP: 0.572
17:35:27 INFO - compress: HL BPP: 0.023
17:35:27 INFO - compress: L BPP: 0.549
17:35:27 INFO - compress: [ATTAINED]
17:35:27 INFO - compress: BPP: 1.082
17:35:27 INFO - compress: HL BPP: 0.327
17:35:27 INFO - compress: L BPP: 0.755
17:35:27 INFO - compress: [ESTIMATED]
17:35:27 INFO - compress: BPP: 0.609
17:35:27 INFO - compress: HL BPP: 0.024
17:35:27 INFO - compress: L BPP: 0.585
17:35:27 INFO - compress: [ATTAINED]
17:35:27 INFO - compress: BPP: 1.116
17:35:27 INFO - compress: HL BPP: 0.327
17:35:27 INFO - compress: L BPP: 0.789
17:35:28 INFO - compress: [ESTIMATED]
17:35:28 INFO - compress: BPP: 0.353
17:35:28 INFO - compress: HL BPP: 0.020
17:35:28 INFO - compress: L BPP: 0.334
17:35:28 INFO - compress: [ATTAINED]
17:35:28 INFO - compress: BPP: 0.862
17:35:28 INFO - compress: HL BPP: 0.323
17:35:28 INFO - compress: L BPP: 0.540
17:35:28 INFO - compress: [ESTIMATED]
17:35:28 INFO - compress: BPP: 0.390
17:35:28 INFO - compress: HL BPP: 0.019
17:35:28 INFO - compress: L BPP: 0.371
17:35:28 INFO - compress: [ATTAINED]
17:35:28 INFO - compress: BPP: 0.893
17:35:28 INFO - compress: HL BPP: 0.321
17:35:28 INFO - compress: L BPP: 0.572
17:35:29 INFO - compress: [ESTIMATED]
17:35:29 INFO - compress: BPP: 0.386
17:35:29 INFO - compress: HL BPP: 0.023
17:35:29 INFO - compress: L BPP: 0.363
17:35:29 INFO - compress: [ATTAINED]
17:35:29 INFO - compress: BPP: 0.893
17:35:29 INFO - compress: HL BPP: 0.325
17:35:29 INFO - compress: L BPP: 0.567
17:35:30 INFO - compress: [ESTIMATED]
17:35:30 INFO - compress: BPP: 0.366
17:35:30 INFO - compress: HL BPP: 0.022
17:35:30 INFO - compress: L BPP: 0.344
17:35:30 INFO - compress: [ATTAINED]
17:35:30 INFO - compress: BPP: 0.872
17:35:30 INFO - compress: HL BPP: 0.324
17:35:30 INFO - compress: L BPP: 0.548
17:35:30 INFO - compress: [ESTIMATED]
17:35:30 INFO - compress: BPP: 0.411
17:35:30 INFO - compress: HL BPP: 0.021
17:35:30 INFO - compress: L BPP: 0.390
17:35:30 INFO - compress: [ATTAINED]
17:35:30 INFO - compress: BPP: 0.915
17:35:30 INFO - compress: HL BPP: 0.323
17:35:30 INFO - compress: L BPP: 0.592
17:35:31 INFO - compress: [ESTIMATED]
17:35:31 INFO - compress: BPP: 0.535
17:35:31 INFO - compress: HL BPP: 0.019
17:35:31 INFO - compress: L BPP: 0.516
17:35:31 INFO - compress: [ATTAINED]
17:35:31 INFO - compress: BPP: 1.042
17:35:31 INFO - compress: HL BPP: 0.321
17:35:31 INFO - compress: L BPP: 0.720
17:35:31 INFO - compress: [ESTIMATED]
17:35:31 INFO - compress: BPP: 0.404
17:35:31 INFO - compress: HL BPP: 0.021
17:35:31 INFO - compress: L BPP: 0.382
17:35:31 INFO - compress: [ATTAINED]
17:35:31 INFO - compress: BPP: 0.909
17:35:31 INFO - compress: HL BPP: 0.324
17:35:31 INFO - compress: L BPP: 0.585
17:35:32 INFO - compress: [ESTIMATED]
17:35:32 INFO - compress: BPP: 0.369
17:35:32 INFO - compress: HL BPP: 0.022
17:35:32 INFO - compress: L BPP: 0.347
17:35:32 INFO - compress: [ATTAINED]
17:35:32 INFO - compress: BPP: 0.878
17:35:32 INFO - compress: HL BPP: 0.326
17:35:32 INFO - compress: L BPP: 0.552
17:35:32 INFO - compress: [ESTIMATED]
17:35:32 INFO - compress: BPP: 0.558
17:35:32 INFO - compress: HL BPP: 0.019
17:35:32 INFO - compress: L BPP: 0.538
17:35:32 INFO - compress: [ATTAINED]
17:35:32 INFO - compress: BPP: 1.064
17:35:32 INFO - compress: HL BPP: 0.322
17:35:32 INFO - compress: L BPP: 0.742
17:35:33 INFO - compress: [ESTIMATED]
17:35:33 INFO - compress: BPP: 0.445
17:35:33 INFO - compress: HL BPP: 0.021
17:35:33 INFO - compress: L BPP: 0.424
17:35:33 INFO - compress: [ATTAINED]
17:35:33 INFO - compress: BPP: 0.952
17:35:33 INFO - compress: HL BPP: 0.326
17:35:33 INFO - compress: L BPP: 0.626
17:35:33 INFO - compress: [ESTIMATED]
17:35:33 INFO - compress: BPP: 0.626
17:35:33 INFO - compress: HL BPP: 0.025
17:35:33 INFO - compress: L BPP: 0.601
17:35:33 INFO - compress: [ATTAINED]
17:35:33 INFO - compress: BPP: 1.136
17:35:33 INFO - compress: HL BPP: 0.330
17:35:33 INFO - compress: L BPP: 0.806
17:35:34 INFO - compress: [ESTIMATED]
17:35:34 INFO - compress: BPP: 0.400
17:35:34 INFO - compress: HL BPP: 0.019
17:35:34 INFO - compress: L BPP: 0.381
17:35:34 INFO - compress: [ATTAINED]
17:35:34 INFO - compress: BPP: 0.908
17:35:34 INFO - compress: HL BPP: 0.322
17:35:34 INFO - compress: L BPP: 0.585
17:35:35 INFO - compress: [ESTIMATED]
17:35:35 INFO - compress: BPP: 0.078
17:35:35 INFO - compress: HL BPP: 0.017
17:35:35 INFO - compress: L BPP: 0.061
17:35:35 INFO - compress: [ATTAINED]
17:35:35 INFO - compress: BPP: 0.583
17:35:35 INFO - compress: HL BPP: 0.318
17:35:35 INFO - compress: L BPP: 0.265
17:35:35 INFO - compress: [ESTIMATED]
17:35:35 INFO - compress: BPP: 0.421
17:35:35 INFO - compress: HL BPP: 0.020
17:35:35 INFO - compress: L BPP: 0.400
17:35:35 INFO - compress: [ATTAINED]
17:35:35 INFO - compress: BPP: 0.928
17:35:35 INFO - compress: HL BPP: 0.324
17:35:35 INFO - compress: L BPP: 0.604
17:35:36 INFO - compress: [ESTIMATED]
17:35:36 INFO - compress: BPP: 0.304
17:35:36 INFO - compress: HL BPP: 0.020
17:35:36 INFO - compress: L BPP: 0.285
17:35:36 INFO - compress: [ATTAINED]
17:35:36 INFO - compress: BPP: 0.809
17:35:36 INFO - compress: HL BPP: 0.321
17:35:36 INFO - compress: L BPP: 0.488
17:35:36 INFO - compress: [ESTIMATED]
17:35:36 INFO - compress: BPP: 0.247
17:35:36 INFO - compress: HL BPP: 0.018
17:35:36 INFO - compress: L BPP: 0.229
17:35:36 INFO - compress: [ATTAINED]
17:35:36 INFO - compress: BPP: 0.751
17:35:36 INFO - compress: HL BPP: 0.320
17:35:36 INFO - compress: L BPP: 0.431
17:35:37 INFO - compress: [ESTIMATED]
17:35:37 INFO - compress: BPP: 0.259
17:35:37 INFO - compress: HL BPP: 0.019
17:35:37 INFO - compress: L BPP: 0.240
17:35:37 INFO - compress: [ATTAINED]
17:35:37 INFO - compress: BPP: 0.767
17:35:37 INFO - compress: HL BPP: 0.322
17:35:37 INFO - compress: L BPP: 0.445
17:35:37 INFO - compress: [ESTIMATED]
17:35:37 INFO - compress: BPP: 0.266
17:35:37 INFO - compress: HL BPP: 0.021
17:35:37 INFO - compress: L BPP: 0.245
17:35:37 INFO - compress: [ATTAINED]
17:35:37 INFO - compress: BPP: 0.771
17:35:37 INFO - compress: HL BPP: 0.322
17:35:37 INFO - compress: L BPP: 0.449
17:35:38 INFO - compress: [ESTIMATED]
17:35:38 INFO - compress: BPP: 0.305
17:35:38 INFO - compress: HL BPP: 0.019
17:35:38 INFO - compress: L BPP: 0.286
17:35:38 INFO - compress: [ATTAINED]
17:35:38 INFO - compress: BPP: 0.812
17:35:38 INFO - compress: HL BPP: 0.322
17:35:38 INFO - compress: L BPP: 0.491
17:35:38 INFO - compress: [ESTIMATED]
17:35:38 INFO - compress: BPP: 0.361
17:35:38 INFO - compress: HL BPP: 0.020
17:35:38 INFO - compress: L BPP: 0.341
17:35:38 INFO - compress: [ATTAINED]
17:35:38 INFO - compress: BPP: 0.871
17:35:38 INFO - compress: HL BPP: 0.325
17:35:38 INFO - compress: L BPP: 0.546
17:35:39 INFO - compress: [ESTIMATED]
17:35:39 INFO - compress: BPP: 0.215
17:35:39 INFO - compress: HL BPP: 0.018
17:35:39 INFO - compress: L BPP: 0.197
17:35:39 INFO - compress: [ATTAINED]
17:35:39 INFO - compress: BPP: 0.723
17:35:39 INFO - compress: HL BPP: 0.321
17:35:39 INFO - compress: L BPP: 0.402
17:35:40 INFO - compress: [ESTIMATED]
17:35:40 INFO - compress: BPP: 0.340
17:35:40 INFO - compress: HL BPP: 0.020
17:35:40 INFO - compress: L BPP: 0.320
17:35:40 INFO - compress: [ATTAINED]
17:35:40 INFO - compress: BPP: 0.849
17:35:40 INFO - compress: HL BPP: 0.324
17:35:40 INFO - compress: L BPP: 0.525
17:35:40 INFO - compress: [ESTIMATED]
17:35:40 INFO - compress: BPP: 0.536
17:35:40 INFO - compress: HL BPP: 0.023
17:35:40 INFO - compress: L BPP: 0.514
17:35:40 INFO - compress: [ATTAINED]
17:35:40 INFO - compress: BPP: 1.047
17:35:40 INFO - compress: HL BPP: 0.327
17:35:40 INFO - compress: L BPP: 0.720
17:35:41 INFO - compress: [ESTIMATED]
17:35:41 INFO - compress: BPP: 0.381
17:35:41 INFO - compress: HL BPP: 0.020
17:35:41 INFO - compress: L BPP: 0.361
17:35:41 INFO - compress: [ATTAINED]
17:35:41 INFO - compress: BPP: 0.886
17:35:41 INFO - compress: HL BPP: 0.321
17:35:41 INFO - compress: L BPP: 0.564
17:35:41 INFO - compress: [ESTIMATED]
17:35:41 INFO - compress: BPP: 0.324
17:35:41 INFO - compress: HL BPP: 0.019
17:35:41 INFO - compress: L BPP: 0.305
17:35:41 INFO - compress: [ATTAINED]
17:35:41 INFO - compress: BPP: 0.829
17:35:41 INFO - compress: HL BPP: 0.321
17:35:41 INFO - compress: L BPP: 0.508
17:35:42 INFO - compress: [ESTIMATED]
17:35:42 INFO - compress: BPP: 0.489
17:35:42 INFO - compress: HL BPP: 0.021
17:35:42 INFO - compress: L BPP: 0.467
17:35:42 INFO - compress: [ATTAINED]
17:35:42 INFO - compress: BPP: 0.998
17:35:42 INFO - compress: HL BPP: 0.325
17:35:42 INFO - compress: L BPP: 0.673
17:35:42 INFO - compress: [ESTIMATED]
17:35:42 INFO - compress: BPP: 0.627
17:35:42 INFO - compress: HL BPP: 0.021
17:35:42 INFO - compress: L BPP: 0.605
17:35:42 INFO - compress: [ATTAINED]
17:35:42 INFO - compress: BPP: 1.135
17:35:42 INFO - compress: HL BPP: 0.325
17:35:42 INFO - compress: L BPP: 0.810
17:35:43 INFO - compress: [ESTIMATED]
17:35:43 INFO - compress: BPP: 0.264
17:35:43 INFO - compress: HL BPP: 0.018
17:35:43 INFO - compress: L BPP: 0.246
17:35:43 INFO - compress: [ATTAINED]
17:35:43 INFO - compress: BPP: 0.771
17:35:43 INFO - compress: HL BPP: 0.320
17:35:43 INFO - compress: L BPP: 0.451
17:35:44 INFO - compress: [ESTIMATED]
17:35:44 INFO - compress: BPP: 0.462
17:35:44 INFO - compress: HL BPP: 0.020
17:35:44 INFO - compress: L BPP: 0.442
17:35:44 INFO - compress: [ATTAINED]
17:35:44 INFO - compress: BPP: 0.970
17:35:44 INFO - compress: HL BPP: 0.323
17:35:44 INFO - compress: L BPP: 0.647
17:35:44 INFO - compress: [ESTIMATED]
17:35:44 INFO - compress: BPP: 0.441
17:35:44 INFO - compress: HL BPP: 0.020
17:35:44 INFO - compress: L BPP: 0.422
17:35:44 INFO - compress: [ATTAINED]
17:35:44 INFO - compress: BPP: 0.948
17:35:44 INFO - compress: HL BPP: 0.323
17:35:44 INFO - compress: L BPP: 0.625
17:35:45 INFO - compress: [ESTIMATED]
17:35:45 INFO - compress: BPP: 0.462
17:35:45 INFO - compress: HL BPP: 0.023
17:35:45 INFO - compress: L BPP: 0.439
17:35:45 INFO - compress: [ATTAINED]
17:35:45 INFO - compress: BPP: 0.968
17:35:45 INFO - compress: HL BPP: 0.326
17:35:45 INFO - compress: L BPP: 0.642
17:35:45 INFO - compress: [ESTIMATED]
17:35:45 INFO - compress: BPP: 0.400
17:35:45 INFO - compress: HL BPP: 0.021
17:35:45 INFO - compress: L BPP: 0.379
17:35:45 INFO - compress: [ATTAINED]
17:35:45 INFO - compress: BPP: 0.906
17:35:45 INFO - compress: HL BPP: 0.324
17:35:45 INFO - compress: L BPP: 0.582
17:35:46 INFO - compress: [ESTIMATED]
17:35:46 INFO - compress: BPP: 0.413
17:35:46 INFO - compress: HL BPP: 0.019
17:35:46 INFO - compress: L BPP: 0.394
17:35:46 INFO - compress: [ATTAINED]
17:35:46 INFO - compress: BPP: 0.919
17:35:46 INFO - compress: HL BPP: 0.321
17:35:46 INFO - compress: L BPP: 0.598
17:35:46 INFO - compress: [ESTIMATED]
17:35:46 INFO - compress: BPP: 0.370
17:35:46 INFO - compress: HL BPP: 0.019
17:35:46 INFO - compress: L BPP: 0.351
17:35:46 INFO - compress: [ATTAINED]
17:35:46 INFO - compress: BPP: 0.874
17:35:46 INFO - compress: HL BPP: 0.319
17:35:46 INFO - compress: L BPP: 0.554
17:35:47 INFO - compress: [ESTIMATED]
17:35:47 INFO - compress: BPP: 0.290
17:35:47 INFO - compress: HL BPP: 0.021
17:35:47 INFO - compress: L BPP: 0.269
17:35:47 INFO - compress: [ATTAINED]
17:35:47 INFO - compress: BPP: 0.793
17:35:47 INFO - compress: HL BPP: 0.323
17:35:47 INFO - compress: L BPP: 0.470
17:35:47 INFO - compress: [ESTIMATED]
17:35:48 INFO - compress: BPP: 0.396
17:35:48 INFO - compress: HL BPP: 0.021
17:35:48 INFO - compress: L BPP: 0.375
17:35:48 INFO - compress: [ATTAINED]
17:35:48 INFO - compress: BPP: 0.904
17:35:48 INFO - compress: HL BPP: 0.325
17:35:48 INFO - compress: L BPP: 0.579
17:35:48 INFO - compress: [ESTIMATED]
17:35:48 INFO - compress: BPP: 0.316
17:35:48 INFO - compress: HL BPP: 0.017
17:35:48 INFO - compress: L BPP: 0.298
17:35:48 INFO - compress: [ATTAINED]
17:35:48 INFO - compress: BPP: 0.824
17:35:48 INFO - compress: HL BPP: 0.320
17:35:48 INFO - compress: L BPP: 0.504
17:35:49 INFO - compress: [ESTIMATED]
17:35:49 INFO - compress: BPP: 0.364
17:35:49 INFO - compress: HL BPP: 0.022
17:35:49 INFO - compress: L BPP: 0.343
17:35:49 INFO - compress: [ATTAINED]
17:35:49 INFO - compress: BPP: 0.871
17:35:49 INFO - compress: HL BPP: 0.324
17:35:49 INFO - compress: L BPP: 0.547
17:35:49 INFO - compress: [ESTIMATED]
17:35:49 INFO - compress: BPP: 0.302
17:35:49 INFO - compress: HL BPP: 0.021
17:35:49 INFO - compress: L BPP: 0.281
17:35:49 INFO - compress: [ATTAINED]
17:35:49 INFO - compress: BPP: 0.809
17:35:49 INFO - compress: HL BPP: 0.324
17:35:49 INFO - compress: L BPP: 0.485
17:35:50 INFO - compress: [ESTIMATED]
17:35:50 INFO - compress: BPP: 0.476
17:35:50 INFO - compress: HL BPP: 0.021
17:35:50 INFO - compress: L BPP: 0.455
17:35:50 INFO - compress: [ATTAINED]
17:35:50 INFO - compress: BPP: 0.984
17:35:50 INFO - compress: HL BPP: 0.323
17:35:50 INFO - compress: L BPP: 0.661
17:35:50 INFO - compress: [ESTIMATED]
17:35:50 INFO - compress: BPP: 0.458
17:35:50 INFO - compress: HL BPP: 0.020
17:35:50 INFO - compress: L BPP: 0.438
17:35:50 INFO - compress: [ATTAINED]
17:35:50 INFO - compress: BPP: 0.965
17:35:50 INFO - compress: HL BPP: 0.322
17:35:50 INFO - compress: L BPP: 0.643
17:35:51 INFO - compress: [ESTIMATED]
17:35:51 INFO - compress: BPP: 0.585
17:35:51 INFO - compress: HL BPP: 0.021
17:35:51 INFO - compress: L BPP: 0.564
17:35:51 INFO - compress: [ATTAINED]
17:35:51 INFO - compress: BPP: 1.093
17:35:51 INFO - compress: HL BPP: 0.325
17:35:51 INFO - compress: L BPP: 0.768
17:35:51 INFO - compress: [ESTIMATED]
17:35:51 INFO - compress: BPP: 0.450
17:35:51 INFO - compress: HL BPP: 0.019
17:35:51 INFO - compress: L BPP: 0.432
17:35:51 INFO - compress: [ATTAINED]
17:35:51 INFO - compress: BPP: 0.958
17:35:51 INFO - compress: HL BPP: 0.320
17:35:51 INFO - compress: L BPP: 0.637
17:35:52 INFO - compress: [ESTIMATED]
17:35:52 INFO - compress: BPP: 0.363
17:35:52 INFO - compress: HL BPP: 0.020
17:35:52 INFO - compress: L BPP: 0.343
17:35:52 INFO - compress: [ATTAINED]
17:35:52 INFO - compress: BPP: 0.870
17:35:52 INFO - compress: HL BPP: 0.323
17:35:52 INFO - compress: L BPP: 0.547
17:35:53 INFO - compress: [ESTIMATED]
17:35:53 INFO - compress: BPP: 0.409
17:35:53 INFO - compress: HL BPP: 0.019
17:35:53 INFO - compress: L BPP: 0.390
17:35:53 INFO - compress: [ATTAINED]
17:35:53 INFO - compress: BPP: 0.918
17:35:53 INFO - compress: HL BPP: 0.321
17:35:53 INFO - compress: L BPP: 0.597
17:35:53 INFO - compress: [ESTIMATED]
17:35:53 INFO - compress: BPP: 0.180
17:35:53 INFO - compress: HL BPP: 0.020
17:35:53 INFO - compress: L BPP: 0.160
17:35:53 INFO - compress: [ATTAINED]
17:35:53 INFO - compress: BPP: 0.686
17:35:53 INFO - compress: HL BPP: 0.322
17:35:53 INFO - compress: L BPP: 0.363
17:35:54 INFO - compress: [ESTIMATED]
17:35:54 INFO - compress: BPP: 0.423
17:35:54 INFO - compress: HL BPP: 0.023
17:35:54 INFO - compress: L BPP: 0.400
17:35:54 INFO - compress: [ATTAINED]
17:35:54 INFO - compress: BPP: 0.932
17:35:54 INFO - compress: HL BPP: 0.325
17:35:54 INFO - compress: L BPP: 0.607
17:35:54 INFO - compress: [ESTIMATED]
17:35:54 INFO - compress: BPP: 0.351
17:35:54 INFO - compress: HL BPP: 0.021
17:35:54 INFO - compress: L BPP: 0.330
17:35:54 INFO - compress: [ATTAINED]
17:35:54 INFO - compress: BPP: 0.859
17:35:54 INFO - compress: HL BPP: 0.324
17:35:54 INFO - compress: L BPP: 0.535
17:35:55 INFO - compress: [ESTIMATED]
17:35:55 INFO - compress: BPP: 0.425
17:35:55 INFO - compress: HL BPP: 0.020
17:35:55 INFO - compress: L BPP: 0.405
17:35:55 INFO - compress: [ATTAINED]
17:35:55 INFO - compress: BPP: 0.932
17:35:55 INFO - compress: HL BPP: 0.322
17:35:55 INFO - compress: L BPP: 0.610
17:35:55 INFO - compress: [ESTIMATED]
17:35:55 INFO - compress: BPP: 0.278
17:35:55 INFO - compress: HL BPP: 0.018
17:35:55 INFO - compress: L BPP: 0.260
17:35:55 INFO - compress: [ATTAINED]
17:35:55 INFO - compress: BPP: 0.786
17:35:55 INFO - compress: HL BPP: 0.320
17:35:55 INFO - compress: L BPP: 0.466
17:35:56 INFO - compress: [ESTIMATED]
17:35:56 INFO - compress: BPP: 0.388
17:35:56 INFO - compress: HL BPP: 0.021
17:35:56 INFO - compress: L BPP: 0.367
17:35:56 INFO - compress: [ATTAINED]
17:35:56 INFO - compress: BPP: 0.896
17:35:56 INFO - compress: HL BPP: 0.325
17:35:56 INFO - compress: L BPP: 0.571
17:35:57 INFO - compress: [ESTIMATED]
17:35:57 INFO - compress: BPP: 0.360
17:35:57 INFO - compress: HL BPP: 0.019
17:35:57 INFO - compress: L BPP: 0.341
17:35:57 INFO - compress: [ATTAINED]
17:35:57 INFO - compress: BPP: 0.867
17:35:57 INFO - compress: HL BPP: 0.322
17:35:57 INFO - compress: L BPP: 0.545
17:35:57 INFO - compress: [ESTIMATED]
17:35:57 INFO - compress: BPP: 0.187
17:35:57 INFO - compress: HL BPP: 0.018
17:35:57 INFO - compress: L BPP: 0.169
17:35:57 INFO - compress: [ATTAINED]
17:35:57 INFO - compress: BPP: 0.694
17:35:57 INFO - compress: HL BPP: 0.321
17:35:57 INFO - compress: L BPP: 0.374
17:35:58 INFO - compress: [ESTIMATED]
17:35:58 INFO - compress: BPP: 0.551
17:35:58 INFO - compress: HL BPP: 0.020
17:35:58 INFO - compress: L BPP: 0.530
17:35:58 INFO - compress: [ATTAINED]
17:35:58 INFO - compress: BPP: 1.061
17:35:58 INFO - compress: HL BPP: 0.325
17:35:58 INFO - compress: L BPP: 0.736
17:35:58 INFO - compress: [ESTIMATED]
17:35:58 INFO - compress: BPP: 0.484
17:35:58 INFO - compress: HL BPP: 0.021
17:35:58 INFO - compress: L BPP: 0.464
17:35:58 INFO - compress: [ATTAINED]
17:35:58 INFO - compress: BPP: 0.994
17:35:58 INFO - compress: HL BPP: 0.324
17:35:58 INFO - compress: L BPP: 0.669
17:35:59 INFO - compress: [ESTIMATED]
17:35:59 INFO - compress: BPP: 0.535
17:35:59 INFO - compress: HL BPP: 0.019
17:35:59 INFO - compress: L BPP: 0.516
17:35:59 INFO - compress: [ATTAINED]
17:35:59 INFO - compress: BPP: 1.043
17:35:59 INFO - compress: HL BPP: 0.322
17:35:59 INFO - compress: L BPP: 0.721
17:35:59 INFO - compress: [ESTIMATED]
17:35:59 INFO - compress: BPP: 0.466
17:35:59 INFO - compress: HL BPP: 0.021
17:35:59 INFO - compress: L BPP: 0.445
17:35:59 INFO - compress: [ATTAINED]
17:35:59 INFO - compress: BPP: 0.974
17:35:59 INFO - compress: HL BPP: 0.324
17:35:59 INFO - compress: L BPP: 0.649
17:36:00 INFO - compress: [ESTIMATED]
17:36:00 INFO - compress: BPP: 0.447
17:36:00 INFO - compress: HL BPP: 0.019
17:36:00 INFO - compress: L BPP: 0.428
17:36:00 INFO - compress: [ATTAINED]
17:36:00 INFO - compress: BPP: 0.954
17:36:00 INFO - compress: HL BPP: 0.321
17:36:00 INFO - compress: L BPP: 0.633
17:36:01 INFO - compress: [ESTIMATED]
17:36:01 INFO - compress: BPP: 0.151
17:36:01 INFO - compress: HL BPP: 0.017
17:36:01 INFO - compress: L BPP: 0.134
17:36:01 INFO - compress: [ATTAINED]
17:36:01 INFO - compress: BPP: 0.657
17:36:01 INFO - compress: HL BPP: 0.318
17:36:01 INFO - compress: L BPP: 0.338
17:36:01 INFO - compress: [ESTIMATED]
17:36:01 INFO - compress: BPP: 0.240
17:36:01 INFO - compress: HL BPP: 0.019
17:36:01 INFO - compress: L BPP: 0.221
17:36:01 INFO - compress: [ATTAINED]
17:36:01 INFO - compress: BPP: 0.745
17:36:01 INFO - compress: HL BPP: 0.322
17:36:01 INFO - compress: L BPP: 0.423
17:36:02 INFO - compress: [ESTIMATED]
17:36:02 INFO - compress: BPP: 0.581
17:36:02 INFO - compress: HL BPP: 0.021
17:36:02 INFO - compress: L BPP: 0.560
17:36:02 INFO - compress: [ATTAINED]
17:36:02 INFO - compress: BPP: 1.089
17:36:02 INFO - compress: HL BPP: 0.324
17:36:02 INFO - compress: L BPP: 0.765
17:36:02 INFO - compress: [ESTIMATED]
17:36:02 INFO - compress: BPP: 0.508
17:36:02 INFO - compress: HL BPP: 0.021
17:36:02 INFO - compress: L BPP: 0.488
17:36:02 INFO - compress: [ATTAINED]
17:36:02 INFO - compress: BPP: 1.014
17:36:02 INFO - compress: HL BPP: 0.323
17:36:02 INFO - compress: L BPP: 0.691
17:36:03 INFO - compress: [ESTIMATED]
17:36:03 INFO - compress: BPP: 0.437
17:36:03 INFO - compress: HL BPP: 0.021
17:36:03 INFO - compress: L BPP: 0.416
17:36:03 INFO - compress: [ATTAINED]
17:36:03 INFO - compress: BPP: 0.943
17:36:03 INFO - compress: HL BPP: 0.324
17:36:03 INFO - compress: L BPP: 0.619
17:36:03 INFO - compress: [ESTIMATED]
17:36:03 INFO - compress: BPP: 0.514
17:36:03 INFO - compress: HL BPP: 0.019
17:36:03 INFO - compress: L BPP: 0.495
17:36:03 INFO - compress: [ATTAINED]
17:36:03 INFO - compress: BPP: 1.019
17:36:03 INFO - compress: HL BPP: 0.320
17:36:03 INFO - compress: L BPP: 0.699
17:36:04 INFO - compress: [ESTIMATED]
17:36:04 INFO - compress: BPP: 0.350
17:36:04 INFO - compress: HL BPP: 0.020
17:36:04 INFO - compress: L BPP: 0.329
17:36:04 INFO - compress: [ATTAINED]
17:36:04 INFO - compress: BPP: 0.854
17:36:04 INFO - compress: HL BPP: 0.323
17:36:04 INFO - compress: L BPP: 0.531
17:36:05 INFO - compress: [ESTIMATED]
17:36:05 INFO - compress: BPP: 0.192
17:36:05 INFO - compress: HL BPP: 0.019
17:36:05 INFO - compress: L BPP: 0.174
17:36:05 INFO - compress: [ATTAINED]
17:36:05 INFO - compress: BPP: 0.698
17:36:05 INFO - compress: HL BPP: 0.320
17:36:05 INFO - compress: L BPP: 0.378
17:36:05 INFO - compress: [ESTIMATED]
17:36:05 INFO - compress: BPP: 0.364
17:36:05 INFO - compress: HL BPP: 0.020
17:36:05 INFO - compress: L BPP: 0.344
17:36:05 INFO - compress: [ATTAINED]
17:36:05 INFO - compress: BPP: 0.873
17:36:05 INFO - compress: HL BPP: 0.324
17:36:05 INFO - compress: L BPP: 0.549
17:36:06 INFO - compress: [ESTIMATED]
17:36:06 INFO - compress: BPP: 0.400
17:36:06 INFO - compress: HL BPP: 0.022
17:36:06 INFO - compress: L BPP: 0.377
17:36:06 INFO - compress: [ATTAINED]
17:36:06 INFO - compress: BPP: 0.905
17:36:06 INFO - compress: HL BPP: 0.326
17:36:06 INFO - compress: L BPP: 0.579
17:36:06 INFO - compress: [ESTIMATED]
17:36:06 INFO - compress: BPP: 0.323
17:36:06 INFO - compress: HL BPP: 0.020
17:36:06 INFO - compress: L BPP: 0.303
17:36:06 INFO - compress: [ATTAINED]
17:36:06 INFO - compress: BPP: 0.833
17:36:06 INFO - compress: HL BPP: 0.325
17:36:06 INFO - compress: L BPP: 0.508
17:36:07 INFO - compress: [ESTIMATED]
17:36:07 INFO - compress: BPP: 0.400
17:36:07 INFO - compress: HL BPP: 0.020
17:36:07 INFO - compress: L BPP: 0.380
17:36:07 INFO - compress: [ATTAINED]
17:36:07 INFO - compress: BPP: 0.906
17:36:07 INFO - compress: HL BPP: 0.322
17:36:07 INFO - compress: L BPP: 0.584
17:36:07 INFO - compress: [ESTIMATED]
17:36:07 INFO - compress: BPP: 0.443
17:36:07 INFO - compress: HL BPP: 0.021
17:36:07 INFO - compress: L BPP: 0.422
17:36:07 INFO - compress: [ATTAINED]
17:36:07 INFO - compress: BPP: 0.951
17:36:07 INFO - compress: HL BPP: 0.325
17:36:07 INFO - compress: L BPP: 0.626
17:36:08 INFO - compress: [ESTIMATED]
17:36:08 INFO - compress: BPP: 0.080
17:36:08 INFO - compress: HL BPP: 0.016
17:36:08 INFO - compress: L BPP: 0.064
17:36:08 INFO - compress: [ATTAINED]
17:36:08 INFO - compress: BPP: 0.585
17:36:08 INFO - compress: HL BPP: 0.318
17:36:08 INFO - compress: L BPP: 0.267
17:36:09 INFO - compress: [ESTIMATED]
17:36:09 INFO - compress: BPP: 0.544
17:36:09 INFO - compress: HL BPP: 0.022
17:36:09 INFO - compress: L BPP: 0.522
17:36:09 INFO - compress: [ATTAINED]
17:36:09 INFO - compress: BPP: 1.054
17:36:09 INFO - compress: HL BPP: 0.325
17:36:09 INFO - compress: L BPP: 0.729
17:36:09 INFO - compress: [ESTIMATED]
17:36:09 INFO - compress: BPP: 0.600
17:36:09 INFO - compress: HL BPP: 0.020
17:36:09 INFO - compress: L BPP: 0.580
17:36:09 INFO - compress: [ATTAINED]
17:36:09 INFO - compress: BPP: 1.105
17:36:09 INFO - compress: HL BPP: 0.321
17:36:09 INFO - compress: L BPP: 0.784
17:36:10 INFO - compress: [ESTIMATED]
17:36:10 INFO - compress: BPP: 0.412
17:36:10 INFO - compress: HL BPP: 0.024
17:36:10 INFO - compress: L BPP: 0.388
17:36:10 INFO - compress: [ATTAINED]
17:36:10 INFO - compress: BPP: 0.920
17:36:10 INFO - compress: HL BPP: 0.327
17:36:10 INFO - compress: L BPP: 0.593
17:36:10 INFO - compress: [ESTIMATED]
17:36:10 INFO - compress: BPP: 0.478
17:36:10 INFO - compress: HL BPP: 0.021
17:36:10 INFO - compress: L BPP: 0.457
17:36:10 INFO - compress: [ATTAINED]
17:36:10 INFO - compress: BPP: 0.987
17:36:10 INFO - compress: HL BPP: 0.325
17:36:10 INFO - compress: L BPP: 0.662
17:36:11 INFO - compress: [ESTIMATED]
17:36:11 INFO - compress: BPP: 0.418
17:36:11 INFO - compress: HL BPP: 0.019
17:36:11 INFO - compress: L BPP: 0.399
17:36:11 INFO - compress: [ATTAINED]
17:36:11 INFO - compress: BPP: 0.927
17:36:11 INFO - compress: HL BPP: 0.322
17:36:11 INFO - compress: L BPP: 0.605
17:36:11 INFO - compress: [ESTIMATED]
17:36:11 INFO - compress: BPP: 0.278
17:36:11 INFO - compress: HL BPP: 0.021
17:36:11 INFO - compress: L BPP: 0.258
17:36:11 INFO - compress: [ATTAINED]
17:36:11 INFO - compress: BPP: 0.787
17:36:11 INFO - compress: HL BPP: 0.324
17:36:11 INFO - compress: L BPP: 0.463
17:36:12 INFO - compress: [ESTIMATED]
17:36:12 INFO - compress: BPP: 0.446
17:36:12 INFO - compress: HL BPP: 0.022
17:36:12 INFO - compress: L BPP: 0.424
17:36:12 INFO - compress: [ATTAINED]
17:36:12 INFO - compress: BPP: 0.952
17:36:12 INFO - compress: HL BPP: 0.325
17:36:12 INFO - compress: L BPP: 0.627
17:36:13 INFO - compress: [ESTIMATED]
17:36:13 INFO - compress: BPP: 0.319
17:36:13 INFO - compress: HL BPP: 0.017
17:36:13 INFO - compress: L BPP: 0.301
17:36:13 INFO - compress: [ATTAINED]
17:36:13 INFO - compress: BPP: 0.825
17:36:13 INFO - compress: HL BPP: 0.318
17:36:13 INFO - compress: L BPP: 0.506
17:36:13 INFO - compress: [ESTIMATED]
17:36:13 INFO - compress: BPP: 0.299
17:36:13 INFO - compress: HL BPP: 0.019
17:36:13 INFO - compress: L BPP: 0.281
17:36:13 INFO - compress: [ATTAINED]
17:36:13 INFO - compress: BPP: 0.806
17:36:13 INFO - compress: HL BPP: 0.321
17:36:13 INFO - compress: L BPP: 0.485
17:36:14 INFO - compress: [ESTIMATED]
17:36:14 INFO - compress: BPP: 0.336
17:36:14 INFO - compress: HL BPP: 0.019
17:36:14 INFO - compress: L BPP: 0.316
17:36:14 INFO - compress: [ATTAINED]
17:36:14 INFO - compress: BPP: 0.841
17:36:14 INFO - compress: HL BPP: 0.322
17:36:14 INFO - compress: L BPP: 0.519
17:36:14 INFO - compress: [ESTIMATED]
17:36:14 INFO - compress: BPP: 0.282
17:36:14 INFO - compress: HL BPP: 0.019
17:36:14 INFO - compress: L BPP: 0.262
17:36:14 INFO - compress: [ATTAINED]
17:36:14 INFO - compress: BPP: 0.789
17:36:14 INFO - compress: HL BPP: 0.323
17:36:14 INFO - compress: L BPP: 0.466
17:36:15 INFO - compress: [ESTIMATED]
17:36:15 INFO - compress: BPP: 0.454
17:36:15 INFO - compress: HL BPP: 0.020
17:36:15 INFO - compress: L BPP: 0.434
17:36:15 INFO - compress: [ATTAINED]
17:36:15 INFO - compress: BPP: 0.960
17:36:15 INFO - compress: HL BPP: 0.324
17:36:15 INFO - compress: L BPP: 0.636
17:36:15 INFO - compress: [ESTIMATED]
17:36:15 INFO - compress: BPP: 0.407
17:36:15 INFO - compress: HL BPP: 0.022
17:36:15 INFO - compress: L BPP: 0.386
17:36:15 INFO - compress: [ATTAINED]
17:36:15 INFO - compress: BPP: 0.914
17:36:15 INFO - compress: HL BPP: 0.324
17:36:15 INFO - compress: L BPP: 0.590
17:36:16 INFO - compress: [ESTIMATED]
17:36:16 INFO - compress: BPP: 0.158
17:36:16 INFO - compress: HL BPP: 0.019
17:36:16 INFO - compress: L BPP: 0.139
17:36:16 INFO - compress: [ATTAINED]
17:36:16 INFO - compress: BPP: 0.664
17:36:16 INFO - compress: HL BPP: 0.323
17:36:16 INFO - compress: L BPP: 0.341
17:36:17 INFO - compress: [ESTIMATED]
17:36:17 INFO - compress: BPP: 0.237
17:36:17 INFO - compress: HL BPP: 0.019
17:36:17 INFO - compress: L BPP: 0.217
17:36:17 INFO - compress: [ATTAINED]
17:36:17 INFO - compress: BPP: 0.742
17:36:17 INFO - compress: HL BPP: 0.322
17:36:17 INFO - compress: L BPP: 0.420
17:36:17 INFO - compress: [ESTIMATED]
17:36:17 INFO - compress: BPP: 0.256
17:36:17 INFO - compress: HL BPP: 0.018
17:36:17 INFO - compress: L BPP: 0.238
17:36:17 INFO - compress: [ATTAINED]
17:36:17 INFO - compress: BPP: 0.762
17:36:17 INFO - compress: HL BPP: 0.320
17:36:17 INFO - compress: L BPP: 0.442
17:36:18 INFO - compress: [ESTIMATED]
17:36:18 INFO - compress: BPP: 0.501
17:36:18 INFO - compress: HL BPP: 0.020
17:36:18 INFO - compress: L BPP: 0.481
17:36:18 INFO - compress: [ATTAINED]
17:36:18 INFO - compress: BPP: 1.006
17:36:18 INFO - compress: HL BPP: 0.323
17:36:18 INFO - compress: L BPP: 0.684
17:36:18 INFO - compress: [ESTIMATED]
17:36:18 INFO - compress: BPP: 0.389
17:36:18 INFO - compress: HL BPP: 0.020
17:36:18 INFO - compress: L BPP: 0.370
17:36:18 INFO - compress: [ATTAINED]
17:36:18 INFO - compress: BPP: 0.897
17:36:18 INFO - compress: HL BPP: 0.322
17:36:18 INFO - compress: L BPP: 0.575
17:36:19 INFO - compress: [ESTIMATED]
17:36:19 INFO - compress: BPP: 0.371
17:36:19 INFO - compress: HL BPP: 0.020
17:36:19 INFO - compress: L BPP: 0.350
17:36:19 INFO - compress: [ATTAINED]
17:36:19 INFO - compress: BPP: 0.879
17:36:19 INFO - compress: HL BPP: 0.325
17:36:19 INFO - compress: L BPP: 0.555
17:36:20 INFO - compress: [ESTIMATED]
17:36:20 INFO - compress: BPP: 0.326
17:36:20 INFO - compress: HL BPP: 0.017
17:36:20 INFO - compress: L BPP: 0.309
17:36:20 INFO - compress: [ATTAINED]
17:36:20 INFO - compress: BPP: 0.833
17:36:20 INFO - compress: HL BPP: 0.318
17:36:20 INFO - compress: L BPP: 0.515
17:36:20 INFO - compress: [ESTIMATED]
17:36:20 INFO - compress: BPP: 0.310
17:36:20 INFO - compress: HL BPP: 0.020
17:36:20 INFO - compress: L BPP: 0.290
17:36:20 INFO - compress: [ATTAINED]
17:36:20 INFO - compress: BPP: 0.817
17:36:20 INFO - compress: HL BPP: 0.322
17:36:20 INFO - compress: L BPP: 0.495
17:36:21 INFO - compress: [ESTIMATED]
17:36:21 INFO - compress: BPP: 0.239
17:36:21 INFO - compress: HL BPP: 0.019
17:36:21 INFO - compress: L BPP: 0.220
17:36:21 INFO - compress: [ATTAINED]
17:36:21 INFO - compress: BPP: 0.747
17:36:21 INFO - compress: HL BPP: 0.322
17:36:21 INFO - compress: L BPP: 0.425
17:36:21 INFO - compress: [ESTIMATED]
17:36:21 INFO - compress: BPP: 0.361
17:36:21 INFO - compress: HL BPP: 0.020
17:36:21 INFO - compress: L BPP: 0.340
17:36:21 INFO - compress: [ATTAINED]
17:36:21 INFO - compress: BPP: 0.869
17:36:21 INFO - compress: HL BPP: 0.323
17:36:21 INFO - compress: L BPP: 0.546
17:36:22 INFO - compress: [ESTIMATED]
17:36:22 INFO - compress: BPP: 0.469
17:36:22 INFO - compress: HL BPP: 0.020
17:36:22 INFO - compress: L BPP: 0.449
17:36:22 INFO - compress: [ATTAINED]
17:36:22 INFO - compress: BPP: 0.977
17:36:22 INFO - compress: HL BPP: 0.324
17:36:22 INFO - compress: L BPP: 0.653
17:36:22 INFO - compress: [ESTIMATED]
17:36:22 INFO - compress: BPP: 0.381
17:36:22 INFO - compress: HL BPP: 0.021
17:36:22 INFO - compress: L BPP: 0.360
17:36:22 INFO - compress: [ATTAINED]
17:36:22 INFO - compress: BPP: 0.889
17:36:22 INFO - compress: HL BPP: 0.325
17:36:22 INFO - compress: L BPP: 0.563
17:36:23 INFO - compress: [ESTIMATED]
17:36:23 INFO - compress: BPP: 0.617
17:36:23 INFO - compress: HL BPP: 0.023
17:36:23 INFO - compress: L BPP: 0.595
17:36:23 INFO - compress: [ATTAINED]
17:36:23 INFO - compress: BPP: 1.124
17:36:23 INFO - compress: HL BPP: 0.328
17:36:23 INFO - compress: L BPP: 0.796
17:36:23 INFO - compress: [ESTIMATED]
17:36:23 INFO - compress: BPP: 0.405
17:36:23 INFO - compress: HL BPP: 0.019
17:36:23 INFO - compress: L BPP: 0.386
17:36:23 INFO - compress: [ATTAINED]
17:36:23 INFO - compress: BPP: 0.911
17:36:23 INFO - compress: HL BPP: 0.322
17:36:23 INFO - compress: L BPP: 0.589
17:36:24 INFO - compress: [ESTIMATED]
17:36:24 INFO - compress: BPP: 0.381
17:36:24 INFO - compress: HL BPP: 0.020
17:36:24 INFO - compress: L BPP: 0.361
17:36:24 INFO - compress: [ATTAINED]
17:36:24 INFO - compress: BPP: 0.887
17:36:24 INFO - compress: HL BPP: 0.323
17:36:24 INFO - compress: L BPP: 0.564
17:36:25 INFO - compress: [ESTIMATED]
17:36:25 INFO - compress: BPP: 0.364
17:36:25 INFO - compress: HL BPP: 0.019
17:36:25 INFO - compress: L BPP: 0.345
17:36:25 INFO - compress: [ATTAINED]
17:36:25 INFO - compress: BPP: 0.873
17:36:25 INFO - compress: HL BPP: 0.322
17:36:25 INFO - compress: L BPP: 0.550
17:36:25 INFO - compress: [ESTIMATED]
17:36:25 INFO - compress: BPP: 0.372
17:36:25 INFO - compress: HL BPP: 0.019
17:36:25 INFO - compress: L BPP: 0.353
17:36:25 INFO - compress: [ATTAINED]
17:36:25 INFO - compress: BPP: 0.879
17:36:25 INFO - compress: HL BPP: 0.321
17:36:25 INFO - compress: L BPP: 0.559
17:36:26 INFO - compress: [ESTIMATED]
17:36:26 INFO - compress: BPP: 0.435
17:36:26 INFO - compress: HL BPP: 0.023
17:36:26 INFO - compress: L BPP: 0.412
17:36:26 INFO - compress: [ATTAINED]
17:36:26 INFO - compress: BPP: 0.941
17:36:26 INFO - compress: HL BPP: 0.326
17:36:26 INFO - compress: L BPP: 0.616
17:36:26 INFO - compress: [ESTIMATED]
17:36:26 INFO - compress: BPP: 0.449
17:36:26 INFO - compress: HL BPP: 0.020
17:36:26 INFO - compress: L BPP: 0.429
17:36:26 INFO - compress: [ATTAINED]
17:36:26 INFO - compress: BPP: 0.957
17:36:26 INFO - compress: HL BPP: 0.322
17:36:26 INFO - compress: L BPP: 0.635
17:36:27 INFO - compress: [ESTIMATED]
17:36:27 INFO - compress: BPP: 0.387
17:36:27 INFO - compress: HL BPP: 0.020
17:36:27 INFO - compress: L BPP: 0.367
17:36:27 INFO - compress: [ATTAINED]
17:36:27 INFO - compress: BPP: 0.896
17:36:27 INFO - compress: HL BPP: 0.323
17:36:27 INFO - compress: L BPP: 0.573
17:36:27 INFO - compress: [ESTIMATED]
17:36:27 INFO - compress: BPP: 0.250
17:36:27 INFO - compress: HL BPP: 0.018
17:36:27 INFO - compress: L BPP: 0.231
17:36:27 INFO - compress: [ATTAINED]
17:36:27 INFO - compress: BPP: 0.758
17:36:27 INFO - compress: HL BPP: 0.322
17:36:27 INFO - compress: L BPP: 0.437
17:36:28 INFO - compress: [ESTIMATED]
17:36:28 INFO - compress: BPP: 0.452
17:36:28 INFO - compress: HL BPP: 0.022
17:36:28 INFO - compress: L BPP: 0.430
17:36:28 INFO - compress: [ATTAINED]
17:36:28 INFO - compress: BPP: 0.958
17:36:28 INFO - compress: HL BPP: 0.324
17:36:28 INFO - compress: L BPP: 0.633
17:36:28 INFO - compress: [ESTIMATED]
17:36:28 INFO - compress: BPP: 0.281
17:36:28 INFO - compress: HL BPP: 0.018
17:36:28 INFO - compress: L BPP: 0.263
17:36:28 INFO - compress: [ATTAINED]
17:36:28 INFO - compress: BPP: 0.787
17:36:28 INFO - compress: HL BPP: 0.320
17:36:28 INFO - compress: L BPP: 0.467
17:36:29 INFO - compress: [ESTIMATED]
17:36:29 INFO - compress: BPP: 0.425
17:36:29 INFO - compress: HL BPP: 0.021
17:36:29 INFO - compress: L BPP: 0.404
17:36:29 INFO - compress: [ATTAINED]
17:36:29 INFO - compress: BPP: 0.932
17:36:29 INFO - compress: HL BPP: 0.323
17:36:29 INFO - compress: L BPP: 0.609
17:36:30 INFO - compress: [ESTIMATED]
17:36:30 INFO - compress: BPP: 0.463
17:36:30 INFO - compress: HL BPP: 0.019
17:36:30 INFO - compress: L BPP: 0.444
17:36:30 INFO - compress: [ATTAINED]
17:36:30 INFO - compress: BPP: 0.970
17:36:30 INFO - compress: HL BPP: 0.322
17:36:30 INFO - compress: L BPP: 0.648
17:36:30 INFO - compress: [ESTIMATED]
17:36:30 INFO - compress: BPP: 0.525
17:36:30 INFO - compress: HL BPP: 0.018
17:36:30 INFO - compress: L BPP: 0.507
17:36:30 INFO - compress: [ATTAINED]
17:36:30 INFO - compress: BPP: 1.030
17:36:30 INFO - compress: HL BPP: 0.320
17:36:30 INFO - compress: L BPP: 0.710
17:36:31 INFO - compress: [ESTIMATED]
17:36:31 INFO - compress: BPP: 0.573
17:36:31 INFO - compress: HL BPP: 0.023
17:36:31 INFO - compress: L BPP: 0.551
17:36:31 INFO - compress: [ATTAINED]
17:36:31 INFO - compress: BPP: 1.083
17:36:31 INFO - compress: HL BPP: 0.327
17:36:31 INFO - compress: L BPP: 0.757
17:36:31 INFO - compress: [ESTIMATED]
17:36:31 INFO - compress: BPP: 0.624
17:36:31 INFO - compress: HL BPP: 0.021
17:36:31 INFO - compress: L BPP: 0.603
17:36:31 INFO - compress: [ATTAINED]
17:36:31 INFO - compress: BPP: 1.131
17:36:31 INFO - compress: HL BPP: 0.325
17:36:31 INFO - compress: L BPP: 0.807
17:36:32 INFO - compress: [ESTIMATED]
17:36:32 INFO - compress: BPP: 0.544
17:36:32 INFO - compress: HL BPP: 0.021
17:36:32 INFO - compress: L BPP: 0.523
17:36:32 INFO - compress: [ATTAINED]
17:36:32 INFO - compress: BPP: 1.052
17:36:32 INFO - compress: HL BPP: 0.325
17:36:32 INFO - compress: L BPP: 0.728
17:36:32 INFO - compress: [ESTIMATED]
17:36:32 INFO - compress: BPP: 0.581
17:36:32 INFO - compress: HL BPP: 0.024
17:36:32 INFO - compress: L BPP: 0.558
17:36:32 INFO - compress: [ATTAINED]
17:36:32 INFO - compress: BPP: 1.092
17:36:32 INFO - compress: HL BPP: 0.328
17:36:32 INFO - compress: L BPP: 0.764
17:36:33 INFO - compress: [ESTIMATED]
17:36:33 INFO - compress: BPP: 0.591
17:36:33 INFO - compress: HL BPP: 0.020
17:36:33 INFO - compress: L BPP: 0.571
17:36:33 INFO - compress: [ATTAINED]
17:36:33 INFO - compress: BPP: 1.097
17:36:33 INFO - compress: HL BPP: 0.323
17:36:33 INFO - compress: L BPP: 0.774
17:36:34 INFO - compress: [ESTIMATED]
17:36:34 INFO - compress: BPP: 0.263
17:36:34 INFO - compress: HL BPP: 0.019
17:36:34 INFO - compress: L BPP: 0.244
17:36:34 INFO - compress: [ATTAINED]
17:36:34 INFO - compress: BPP: 0.770
17:36:34 INFO - compress: HL BPP: 0.321
17:36:34 INFO - compress: L BPP: 0.449
17:36:34 INFO - compress: [ESTIMATED]
17:36:34 INFO - compress: BPP: 0.224
17:36:34 INFO - compress: HL BPP: 0.019
17:36:34 INFO - compress: L BPP: 0.205
17:36:34 INFO - compress: [ATTAINED]
17:36:34 INFO - compress: BPP: 0.734
17:36:34 INFO - compress: HL BPP: 0.320
17:36:34 INFO - compress: L BPP: 0.414
17:36:35 INFO - compress: [ESTIMATED]
17:36:35 INFO - compress: BPP: 0.264
17:36:35 INFO - compress: HL BPP: 0.018
17:36:35 INFO - compress: L BPP: 0.246
17:36:35 INFO - compress: [ATTAINED]
17:36:35 INFO - compress: BPP: 0.770
17:36:35 INFO - compress: HL BPP: 0.321
17:36:35 INFO - compress: L BPP: 0.449
17:36:35 INFO - compress: [ESTIMATED]
17:36:35 INFO - compress: BPP: 0.159
17:36:35 INFO - compress: HL BPP: 0.017
17:36:35 INFO - compress: L BPP: 0.142
17:36:35 INFO - compress: [ATTAINED]
17:36:35 INFO - compress: BPP: 0.663
17:36:35 INFO - compress: HL BPP: 0.319
17:36:35 INFO - compress: L BPP: 0.344
17:36:36 INFO - compress: [ESTIMATED]
17:36:36 INFO - compress: BPP: 0.408
17:36:36 INFO - compress: HL BPP: 0.020
17:36:36 INFO - compress: L BPP: 0.388
17:36:36 INFO - compress: [ATTAINED]
17:36:36 INFO - compress: BPP: 0.916
17:36:36 INFO - compress: HL BPP: 0.322
17:36:36 INFO - compress: L BPP: 0.594
17:36:36 INFO - compress: [ESTIMATED]
17:36:36 INFO - compress: BPP: 0.518
17:36:36 INFO - compress: HL BPP: 0.021
17:36:36 INFO - compress: L BPP: 0.496
17:36:36 INFO - compress: [ATTAINED]
17:36:36 INFO - compress: BPP: 1.025
17:36:36 INFO - compress: HL BPP: 0.324
17:36:36 INFO - compress: L BPP: 0.701
17:36:37 INFO - compress: [ESTIMATED]
17:36:37 INFO - compress: BPP: 0.513
17:36:37 INFO - compress: HL BPP: 0.021
17:36:37 INFO - compress: L BPP: 0.492
17:36:37 INFO - compress: [ATTAINED]
17:36:37 INFO - compress: BPP: 1.021
17:36:37 INFO - compress: HL BPP: 0.324
17:36:37 INFO - compress: L BPP: 0.697
17:36:37 INFO - compress: [ESTIMATED]
17:36:37 INFO - compress: BPP: 0.216
17:36:37 INFO - compress: HL BPP: 0.020
17:36:37 INFO - compress: L BPP: 0.196
17:36:37 INFO - compress: [ATTAINED]
17:36:37 INFO - compress: BPP: 0.718
17:36:37 INFO - compress: HL BPP: 0.321
17:36:37 INFO - compress: L BPP: 0.397
17:36:38 INFO - compress: [ESTIMATED]
17:36:38 INFO - compress: BPP: 0.375
17:36:38 INFO - compress: HL BPP: 0.019
17:36:38 INFO - compress: L BPP: 0.356
17:36:38 INFO - compress: [ATTAINED]
17:36:38 INFO - compress: BPP: 0.880
17:36:38 INFO - compress: HL BPP: 0.322
17:36:38 INFO - compress: L BPP: 0.559
17:36:39 INFO - compress: [ESTIMATED]
17:36:39 INFO - compress: BPP: 0.451
17:36:39 INFO - compress: HL BPP: 0.021
17:36:39 INFO - compress: L BPP: 0.431
17:36:39 INFO - compress: [ATTAINED]
17:36:39 INFO - compress: BPP: 0.960
17:36:39 INFO - compress: HL BPP: 0.323
17:36:39 INFO - compress: L BPP: 0.637
17:36:39 INFO - compress: [ESTIMATED]
17:36:39 INFO - compress: BPP: 0.438
17:36:39 INFO - compress: HL BPP: 0.019
17:36:39 INFO - compress: L BPP: 0.420
17:36:39 INFO - compress: [ATTAINED]
17:36:39 INFO - compress: BPP: 0.944
17:36:39 INFO - compress: HL BPP: 0.321
17:36:39 INFO - compress: L BPP: 0.623
17:36:40 INFO - compress: [ESTIMATED]
17:36:40 INFO - compress: BPP: 0.367
17:36:40 INFO - compress: HL BPP: 0.019
17:36:40 INFO - compress: L BPP: 0.347
17:36:40 INFO - compress: [ATTAINED]
17:36:40 INFO - compress: BPP: 0.875
17:36:40 INFO - compress: HL BPP: 0.322
17:36:40 INFO - compress: L BPP: 0.553
17:36:40 INFO - compress: [ESTIMATED]
17:36:40 INFO - compress: BPP: 0.362
17:36:40 INFO - compress: HL BPP: 0.018
17:36:40 INFO - compress: L BPP: 0.344
17:36:40 INFO - compress: [ATTAINED]
17:36:40 INFO - compress: BPP: 0.870
17:36:40 INFO - compress: HL BPP: 0.320
17:36:40 INFO - compress: L BPP: 0.550
17:36:41 INFO - compress: [ESTIMATED]
17:36:41 INFO - compress: BPP: 0.440
17:36:41 INFO - compress: HL BPP: 0.022
17:36:41 INFO - compress: L BPP: 0.418
17:36:41 INFO - compress: [ATTAINED]
17:36:41 INFO - compress: BPP: 0.951
17:36:41 INFO - compress: HL BPP: 0.327
17:36:41 INFO - compress: L BPP: 0.625
17:36:41 INFO - compress: [ESTIMATED]
17:36:41 INFO - compress: BPP: 0.492
17:36:41 INFO - compress: HL BPP: 0.023
17:36:41 INFO - compress: L BPP: 0.469
17:36:41 INFO - compress: [ATTAINED]
17:36:41 INFO - compress: BPP: 1.001
17:36:41 INFO - compress: HL BPP: 0.326
17:36:41 INFO - compress: L BPP: 0.675
17:36:42 INFO - compress: [ESTIMATED]
17:36:42 INFO - compress: BPP: 0.477
17:36:42 INFO - compress: HL BPP: 0.017
17:36:42 INFO - compress: L BPP: 0.460
17:36:42 INFO - compress: [ATTAINED]
17:36:42 INFO - compress: BPP: 0.982
17:36:42 INFO - compress: HL BPP: 0.319
17:36:42 INFO - compress: L BPP: 0.663
17:36:43 INFO - compress: [ESTIMATED]
17:36:43 INFO - compress: BPP: 0.472
17:36:43 INFO - compress: HL BPP: 0.023
17:36:43 INFO - compress: L BPP: 0.449
17:36:43 INFO - compress: [ATTAINED]
17:36:43 INFO - compress: BPP: 0.980
17:36:43 INFO - compress: HL BPP: 0.327
17:36:43 INFO - compress: L BPP: 0.653
17:36:43 INFO - compress: [ESTIMATED]
17:36:43 INFO - compress: BPP: 0.588
17:36:43 INFO - compress: HL BPP: 0.022
17:36:43 INFO - compress: L BPP: 0.566
17:36:43 INFO - compress: [ATTAINED]
17:36:43 INFO - compress: BPP: 1.095
17:36:43 INFO - compress: HL BPP: 0.325
17:36:43 INFO - compress: L BPP: 0.770
17:36:44 INFO - compress: [ESTIMATED]
17:36:44 INFO - compress: BPP: 0.412
17:36:44 INFO - compress: HL BPP: 0.020
17:36:44 INFO - compress: L BPP: 0.391
17:36:44 INFO - compress: [ATTAINED]
17:36:44 INFO - compress: BPP: 0.919
17:36:44 INFO - compress: HL BPP: 0.323
17:36:44 INFO - compress: L BPP: 0.596
17:36:44 INFO - compress: [ESTIMATED]
17:36:44 INFO - compress: BPP: 0.406
17:36:44 INFO - compress: HL BPP: 0.020
17:36:44 INFO - compress: L BPP: 0.386
17:36:44 INFO - compress: [ATTAINED]
17:36:44 INFO - compress: BPP: 0.911
17:36:44 INFO - compress: HL BPP: 0.323
17:36:44 INFO - compress: L BPP: 0.587
17:36:45 INFO - compress: [ESTIMATED]
17:36:45 INFO - compress: BPP: 0.460
17:36:45 INFO - compress: HL BPP: 0.022
17:36:45 INFO - compress: L BPP: 0.438
17:36:45 INFO - compress: [ATTAINED]
17:36:45 INFO - compress: BPP: 0.966
17:36:45 INFO - compress: HL BPP: 0.326
17:36:45 INFO - compress: L BPP: 0.640
17:36:45 INFO - compress: [ESTIMATED]
17:36:45 INFO - compress: BPP: 0.274
17:36:45 INFO - compress: HL BPP: 0.018
17:36:45 INFO - compress: L BPP: 0.256
17:36:45 INFO - compress: [ATTAINED]
17:36:45 INFO - compress: BPP: 0.782
17:36:45 INFO - compress: HL BPP: 0.320
17:36:45 INFO - compress: L BPP: 0.462
17:36:46 INFO - compress: [ESTIMATED]
17:36:46 INFO - compress: BPP: 0.327
17:36:46 INFO - compress: HL BPP: 0.020
17:36:46 INFO - compress: L BPP: 0.308
17:36:46 INFO - compress: [ATTAINED]
17:36:46 INFO - compress: BPP: 0.831
17:36:46 INFO - compress: HL BPP: 0.322
17:36:46 INFO - compress: L BPP: 0.508
17:36:46 INFO - compress: [ESTIMATED]
17:36:46 INFO - compress: BPP: 0.299
17:36:46 INFO - compress: HL BPP: 0.018
17:36:46 INFO - compress: L BPP: 0.281
17:36:46 INFO - compress: [ATTAINED]
17:36:46 INFO - compress: BPP: 0.804
17:36:46 INFO - compress: HL BPP: 0.320
17:36:46 INFO - compress: L BPP: 0.484
17:36:47 INFO - compress: [ESTIMATED]
17:36:47 INFO - compress: BPP: 0.580
17:36:47 INFO - compress: HL BPP: 0.020
17:36:47 INFO - compress: L BPP: 0.561
17:36:47 INFO - compress: [ATTAINED]
17:36:47 INFO - compress: BPP: 1.088
17:36:47 INFO - compress: HL BPP: 0.323
17:36:47 INFO - compress: L BPP: 0.766
17:36:48 INFO - compress: [ESTIMATED]
17:36:48 INFO - compress: BPP: 0.502
17:36:48 INFO - compress: HL BPP: 0.020
17:36:48 INFO - compress: L BPP: 0.482
17:36:48 INFO - compress: [ATTAINED]
17:36:48 INFO - compress: BPP: 1.009
17:36:48 INFO - compress: HL BPP: 0.322
17:36:48 INFO - compress: L BPP: 0.687
17:36:48 INFO - compress: [ESTIMATED]
17:36:48 INFO - compress: BPP: 0.441
17:36:48 INFO - compress: HL BPP: 0.021
17:36:48 INFO - compress: L BPP: 0.420
17:36:48 INFO - compress: [ATTAINED]
17:36:48 INFO - compress: BPP: 0.949
17:36:48 INFO - compress: HL BPP: 0.323
17:36:48 INFO - compress: L BPP: 0.626
17:36:49 INFO - compress: [ESTIMATED]
17:36:49 INFO - compress: BPP: 0.564
17:36:49 INFO - compress: HL BPP: 0.022
17:36:49 INFO - compress: L BPP: 0.542
17:36:49 INFO - compress: [ATTAINED]
17:36:49 INFO - compress: BPP: 1.073
17:36:49 INFO - compress: HL BPP: 0.326
17:36:49 INFO - compress: L BPP: 0.747
17:36:49 INFO - compress: [ESTIMATED]
17:36:49 INFO - compress: BPP: 0.317
17:36:49 INFO - compress: HL BPP: 0.020
17:36:49 INFO - compress: L BPP: 0.297
17:36:49 INFO - compress: [ATTAINED]
17:36:49 INFO - compress: BPP: 0.824
17:36:49 INFO - compress: HL BPP: 0.322
17:36:49 INFO - compress: L BPP: 0.502
17:36:50 INFO - compress: [ESTIMATED]
17:36:50 INFO - compress: BPP: 0.520
17:36:50 INFO - compress: HL BPP: 0.020
17:36:50 INFO - compress: L BPP: 0.500
17:36:50 INFO - compress: [ATTAINED]
17:36:50 INFO - compress: BPP: 1.029
17:36:50 INFO - compress: HL BPP: 0.325
17:36:50 INFO - compress: L BPP: 0.704
17:36:50 INFO - compress: [ESTIMATED]
17:36:50 INFO - compress: BPP: 0.227
17:36:50 INFO - compress: HL BPP: 0.018
17:36:50 INFO - compress: L BPP: 0.209
17:36:50 INFO - compress: [ATTAINED]
17:36:50 INFO - compress: BPP: 0.733
17:36:50 INFO - compress: HL BPP: 0.319
17:36:50 INFO - compress: L BPP: 0.414
17:36:51 INFO - compress: [ESTIMATED]
17:36:51 INFO - compress: BPP: 0.381
17:36:51 INFO - compress: HL BPP: 0.020
17:36:51 INFO - compress: L BPP: 0.361
17:36:51 INFO - compress: [ATTAINED]
17:36:51 INFO - compress: BPP: 0.888
17:36:51 INFO - compress: HL BPP: 0.322
17:36:51 INFO - compress: L BPP: 0.566
17:36:52 INFO - compress: [ESTIMATED]
17:36:52 INFO - compress: BPP: 0.360
17:36:52 INFO - compress: HL BPP: 0.020
17:36:52 INFO - compress: L BPP: 0.340
17:36:52 INFO - compress: [ATTAINED]
17:36:52 INFO - compress: BPP: 0.868
17:36:52 INFO - compress: HL BPP: 0.322
17:36:52 INFO - compress: L BPP: 0.545
17:36:52 INFO - compress: [ESTIMATED]
17:36:52 INFO - compress: BPP: 0.623
17:36:52 INFO - compress: HL BPP: 0.020
17:36:52 INFO - compress: L BPP: 0.603
17:36:52 INFO - compress: [ATTAINED]
17:36:52 INFO - compress: BPP: 1.132
17:36:52 INFO - compress: HL BPP: 0.323
17:36:52 INFO - compress: L BPP: 0.810
17:36:53 INFO - compress: [ESTIMATED]
17:36:53 INFO - compress: BPP: 0.167
17:36:53 INFO - compress: HL BPP: 0.018
17:36:53 INFO - compress: L BPP: 0.149
17:36:53 INFO - compress: [ATTAINED]
17:36:53 INFO - compress: BPP: 0.673
17:36:53 INFO - compress: HL BPP: 0.320
17:36:53 INFO - compress: L BPP: 0.353
17:36:53 INFO - compress: [ESTIMATED]
17:36:53 INFO - compress: BPP: 0.604
17:36:53 INFO - compress: HL BPP: 0.022
17:36:53 INFO - compress: L BPP: 0.582
17:36:53 INFO - compress: [ATTAINED]
17:36:53 INFO - compress: BPP: 1.112
17:36:53 INFO - compress: HL BPP: 0.326
17:36:53 INFO - compress: L BPP: 0.786
17:36:54 INFO - compress: [ESTIMATED]
17:36:54 INFO - compress: BPP: 0.401
17:36:54 INFO - compress: HL BPP: 0.020
17:36:54 INFO - compress: L BPP: 0.381
17:36:54 INFO - compress: [ATTAINED]
17:36:54 INFO - compress: BPP: 0.909
17:36:54 INFO - compress: HL BPP: 0.323
17:36:54 INFO - compress: L BPP: 0.585
17:36:54 INFO - compress: [ESTIMATED]
17:36:54 INFO - compress: BPP: 0.512
17:36:54 INFO - compress: HL BPP: 0.026
17:36:54 INFO - compress: L BPP: 0.486
17:36:54 INFO - compress: [ATTAINED]
17:36:54 INFO - compress: BPP: 1.018
17:36:54 INFO - compress: HL BPP: 0.331
17:36:54 INFO - compress: L BPP: 0.688
17:36:55 INFO - compress: [ESTIMATED]
17:36:55 INFO - compress: BPP: 0.412
17:36:55 INFO - compress: HL BPP: 0.022
17:36:55 INFO - compress: L BPP: 0.390
17:36:55 INFO - compress: [ATTAINED]
17:36:55 INFO - compress: BPP: 0.920
17:36:55 INFO - compress: HL BPP: 0.326
17:36:55 INFO - compress: L BPP: 0.594
17:36:55 INFO - compress: [ESTIMATED]
17:36:55 INFO - compress: BPP: 0.541
17:36:55 INFO - compress: HL BPP: 0.024
17:36:55 INFO - compress: L BPP: 0.517
17:36:55 INFO - compress: [ATTAINED]
17:36:55 INFO - compress: BPP: 1.048
17:36:55 INFO - compress: HL BPP: 0.327
17:36:55 INFO - compress: L BPP: 0.722
17:36:56 INFO - compress: [ESTIMATED]
17:36:56 INFO - compress: BPP: 0.447
17:36:56 INFO - compress: HL BPP: 0.019
17:36:56 INFO - compress: L BPP: 0.429
17:36:56 INFO - compress: [ATTAINED]
17:36:56 INFO - compress: BPP: 0.954
17:36:56 INFO - compress: HL BPP: 0.321
17:36:56 INFO - compress: L BPP: 0.633
17:36:57 INFO - compress: [ESTIMATED]
17:36:57 INFO - compress: BPP: 0.409
17:36:57 INFO - compress: HL BPP: 0.023
17:36:57 INFO - compress: L BPP: 0.385
17:36:57 INFO - compress: [ATTAINED]
17:36:57 INFO - compress: BPP: 0.918
17:36:57 INFO - compress: HL BPP: 0.328
17:36:57 INFO - compress: L BPP: 0.591
17:36:57 INFO - compress: [ESTIMATED]
17:36:57 INFO - compress: BPP: 0.594
17:36:57 INFO - compress: HL BPP: 0.022
17:36:57 INFO - compress: L BPP: 0.571
17:36:57 INFO - compress: [ATTAINED]
17:36:57 INFO - compress: BPP: 1.100
17:36:57 INFO - compress: HL BPP: 0.326
17:36:57 INFO - compress: L BPP: 0.774
17:36:58 INFO - compress: [ESTIMATED]
17:36:58 INFO - compress: BPP: 0.183
17:36:58 INFO - compress: HL BPP: 0.018
17:36:58 INFO - compress: L BPP: 0.164
17:36:58 INFO - compress: [ATTAINED]
17:36:58 INFO - compress: BPP: 0.690
17:36:58 INFO - compress: HL BPP: 0.321
17:36:58 INFO - compress: L BPP: 0.369
17:36:58 INFO - compress: [ESTIMATED]
17:36:58 INFO - compress: BPP: 0.497
17:36:58 INFO - compress: HL BPP: 0.018
17:36:58 INFO - compress: L BPP: 0.478
17:36:58 INFO - compress: [ATTAINED]
17:36:58 INFO - compress: BPP: 1.002
17:36:58 INFO - compress: HL BPP: 0.320
17:36:58 INFO - compress: L BPP: 0.682
17:36:59 INFO - compress: [ESTIMATED]
17:36:59 INFO - compress: BPP: 0.184
17:36:59 INFO - compress: HL BPP: 0.019
17:36:59 INFO - compress: L BPP: 0.165
17:36:59 INFO - compress: [ATTAINED]
17:36:59 INFO - compress: BPP: 0.688
17:36:59 INFO - compress: HL BPP: 0.322
17:36:59 INFO - compress: L BPP: 0.366
17:36:59 INFO - compress: [ESTIMATED]
17:36:59 INFO - compress: BPP: 0.578
17:36:59 INFO - compress: HL BPP: 0.021
17:36:59 INFO - compress: L BPP: 0.557
17:36:59 INFO - compress: [ATTAINED]
17:36:59 INFO - compress: BPP: 1.089
17:36:59 INFO - compress: HL BPP: 0.324
17:36:59 INFO - compress: L BPP: 0.765
17:37:00 INFO - compress: [ESTIMATED]
17:37:00 INFO - compress: BPP: 0.490
17:37:00 INFO - compress: HL BPP: 0.020
17:37:00 INFO - compress: L BPP: 0.470
17:37:00 INFO - compress: [ATTAINED]
17:37:00 INFO - compress: BPP: 0.999
17:37:00 INFO - compress: HL BPP: 0.322
17:37:00 INFO - compress: L BPP: 0.676
17:37:01 INFO - compress: [ESTIMATED]
17:37:01 INFO - compress: BPP: 0.496
17:37:01 INFO - compress: HL BPP: 0.023
17:37:01 INFO - compress: L BPP: 0.473
17:37:01 INFO - compress: [ATTAINED]
17:37:01 INFO - compress: BPP: 1.004
17:37:01 INFO - compress: HL BPP: 0.326
17:37:01 INFO - compress: L BPP: 0.678
17:37:01 INFO - compress: [ESTIMATED]
17:37:01 INFO - compress: BPP: 0.564
17:37:01 INFO - compress: HL BPP: 0.020
17:37:01 INFO - compress: L BPP: 0.543
17:37:01 INFO - compress: [ATTAINED]
17:37:01 INFO - compress: BPP: 1.070
17:37:01 INFO - compress: HL BPP: 0.323
17:37:01 INFO - compress: L BPP: 0.747
17:37:02 INFO - compress: [ESTIMATED]
17:37:02 INFO - compress: BPP: 0.535
17:37:02 INFO - compress: HL BPP: 0.019
17:37:02 INFO - compress: L BPP: 0.516
17:37:02 INFO - compress: [ATTAINED]
17:37:02 INFO - compress: BPP: 1.042
17:37:02 INFO - compress: HL BPP: 0.322
17:37:02 INFO - compress: L BPP: 0.720
17:37:02 INFO - compress: [ESTIMATED]
17:37:02 INFO - compress: BPP: 0.336
17:37:02 INFO - compress: HL BPP: 0.020
17:37:02 INFO - compress: L BPP: 0.316
17:37:02 INFO - compress: [ATTAINED]
17:37:02 INFO - compress: BPP: 0.843
17:37:02 INFO - compress: HL BPP: 0.322
17:37:02 INFO - compress: L BPP: 0.521
17:37:03 INFO - compress: [ESTIMATED]
17:37:03 INFO - compress: BPP: 0.402
17:37:03 INFO - compress: HL BPP: 0.022
17:37:03 INFO - compress: L BPP: 0.380
17:37:03 INFO - compress: [ATTAINED]
17:37:03 INFO - compress: BPP: 0.909
17:37:03 INFO - compress: HL BPP: 0.325
17:37:03 INFO - compress: L BPP: 0.584
17:37:03 INFO - compress: [ESTIMATED]
17:37:03 INFO - compress: BPP: 0.492
17:37:03 INFO - compress: HL BPP: 0.021
17:37:03 INFO - compress: L BPP: 0.470
17:37:03 INFO - compress: [ATTAINED]
17:37:03 INFO - compress: BPP: 1.000
17:37:03 INFO - compress: HL BPP: 0.325
17:37:03 INFO - compress: L BPP: 0.674
17:37:04 INFO - compress: [ESTIMATED]
17:37:04 INFO - compress: BPP: 0.451
17:37:04 INFO - compress: HL BPP: 0.022
17:37:04 INFO - compress: L BPP: 0.429
17:37:04 INFO - compress: [ATTAINED]
17:37:04 INFO - compress: BPP: 0.958
17:37:04 INFO - compress: HL BPP: 0.325
17:37:04 INFO - compress: L BPP: 0.633
17:37:05 INFO - compress: [ESTIMATED]
17:37:05 INFO - compress: BPP: 0.648
17:37:05 INFO - compress: HL BPP: 0.021
17:37:05 INFO - compress: L BPP: 0.627
17:37:05 INFO - compress: [ATTAINED]
17:37:05 INFO - compress: BPP: 1.154
17:37:05 INFO - compress: HL BPP: 0.325
17:37:05 INFO - compress: L BPP: 0.829
17:37:05 INFO - compress: [ESTIMATED]
17:37:05 INFO - compress: BPP: 0.200
17:37:05 INFO - compress: HL BPP: 0.018
17:37:05 INFO - compress: L BPP: 0.182
17:37:05 INFO - compress: [ATTAINED]
17:37:05 INFO - compress: BPP: 0.706
17:37:05 INFO - compress: HL BPP: 0.319
17:37:05 INFO - compress: L BPP: 0.386
17:37:06 INFO - compress: [ESTIMATED]
17:37:06 INFO - compress: BPP: 0.447
17:37:06 INFO - compress: HL BPP: 0.019
17:37:06 INFO - compress: L BPP: 0.428
17:37:06 INFO - compress: [ATTAINED]
17:37:06 INFO - compress: BPP: 0.953
17:37:06 INFO - compress: HL BPP: 0.321
17:37:06 INFO - compress: L BPP: 0.631
17:37:06 INFO - compress: [ESTIMATED]
17:37:06 INFO - compress: BPP: 0.194
17:37:06 INFO - compress: HL BPP: 0.020
17:37:06 INFO - compress: L BPP: 0.174
17:37:06 INFO - compress: [ATTAINED]
17:37:06 INFO - compress: BPP: 0.700
17:37:06 INFO - compress: HL BPP: 0.322
17:37:06 INFO - compress: L BPP: 0.378
17:37:07 INFO - compress: [ESTIMATED]
17:37:07 INFO - compress: BPP: 0.464
17:37:07 INFO - compress: HL BPP: 0.022
17:37:07 INFO - compress: L BPP: 0.442
17:37:07 INFO - compress: [ATTAINED]
17:37:07 INFO - compress: BPP: 0.973
17:37:07 INFO - compress: HL BPP: 0.325
17:37:07 INFO - compress: L BPP: 0.648
17:37:07 INFO - compress: [ESTIMATED]
17:37:07 INFO - compress: BPP: 0.587
17:37:07 INFO - compress: HL BPP: 0.022
17:37:07 INFO - compress: L BPP: 0.565
17:37:07 INFO - compress: [ATTAINED]
17:37:07 INFO - compress: BPP: 1.095
17:37:07 INFO - compress: HL BPP: 0.324
17:37:07 INFO - compress: L BPP: 0.771
17:37:08 INFO - compress: [ESTIMATED]
17:37:08 INFO - compress: BPP: 0.268
17:37:08 INFO - compress: HL BPP: 0.021
17:37:08 INFO - compress: L BPP: 0.247
17:37:08 INFO - compress: [ATTAINED]
17:37:08 INFO - compress: BPP: 0.775
17:37:08 INFO - compress: HL BPP: 0.324
17:37:08 INFO - compress: L BPP: 0.451
17:37:09 INFO - compress: [ESTIMATED]
17:37:09 INFO - compress: BPP: 0.453
17:37:09 INFO - compress: HL BPP: 0.021
17:37:09 INFO - compress: L BPP: 0.433
17:37:09 INFO - compress: [ATTAINED]
17:37:09 INFO - compress: BPP: 0.963
17:37:09 INFO - compress: HL BPP: 0.324
17:37:09 INFO - compress: L BPP: 0.639
17:37:09 INFO - compress: [ESTIMATED]
17:37:09 INFO - compress: BPP: 0.441
17:37:09 INFO - compress: HL BPP: 0.022
17:37:09 INFO - compress: L BPP: 0.419
17:37:09 INFO - compress: [ATTAINED]
17:37:09 INFO - compress: BPP: 0.949
17:37:09 INFO - compress: HL BPP: 0.325
17:37:09 INFO - compress: L BPP: 0.625
17:37:10 INFO - compress: [ESTIMATED]
17:37:10 INFO - compress: BPP: 0.243
17:37:10 INFO - compress: HL BPP: 0.018
17:37:10 INFO - compress: L BPP: 0.225
17:37:10 INFO - compress: [ATTAINED]
17:37:10 INFO - compress: BPP: 0.747
17:37:10 INFO - compress: HL BPP: 0.319
17:37:10 INFO - compress: L BPP: 0.428
17:37:10 INFO - compress: [ESTIMATED]
17:37:10 INFO - compress: BPP: 0.484
17:37:10 INFO - compress: HL BPP: 0.020
17:37:10 INFO - compress: L BPP: 0.465
17:37:10 INFO - compress: [ATTAINED]
17:37:10 INFO - compress: BPP: 0.994
17:37:10 INFO - compress: HL BPP: 0.322
17:37:10 INFO - compress: L BPP: 0.671
17:37:11 INFO - compress: [ESTIMATED]
17:37:11 INFO - compress: BPP: 0.445
17:37:11 INFO - compress: HL BPP: 0.021
17:37:11 INFO - compress: L BPP: 0.424
17:37:11 INFO - compress: [ATTAINED]
17:37:11 INFO - compress: BPP: 0.952
17:37:11 INFO - compress: HL BPP: 0.324
17:37:11 INFO - compress: L BPP: 0.628
17:37:11 INFO - compress: [ESTIMATED]
17:37:11 INFO - compress: BPP: 0.551
17:37:11 INFO - compress: HL BPP: 0.022
17:37:11 INFO - compress: L BPP: 0.529
17:37:11 INFO - compress: [ATTAINED]
17:37:11 INFO - compress: BPP: 1.056
17:37:11 INFO - compress: HL BPP: 0.324
17:37:11 INFO - compress: L BPP: 0.732
17:37:12 INFO - compress: [ESTIMATED]
17:37:12 INFO - compress: BPP: 0.547
17:37:12 INFO - compress: HL BPP: 0.020
17:37:12 INFO - compress: L BPP: 0.527
17:37:12 INFO - compress: [ATTAINED]
17:37:12 INFO - compress: BPP: 1.053
17:37:12 INFO - compress: HL BPP: 0.322
17:37:12 INFO - compress: L BPP: 0.730
17:37:13 INFO - compress: [ESTIMATED]
17:37:13 INFO - compress: BPP: 0.266
17:37:13 INFO - compress: HL BPP: 0.021
17:37:13 INFO - compress: L BPP: 0.245
17:37:13 INFO - compress: [ATTAINED]
17:37:13 INFO - compress: BPP: 0.772
17:37:13 INFO - compress: HL BPP: 0.323
17:37:13 INFO - compress: L BPP: 0.449
17:37:13 INFO - compress: [ESTIMATED]
17:37:13 INFO - compress: BPP: 0.430
17:37:13 INFO - compress: HL BPP: 0.020
17:37:13 INFO - compress: L BPP: 0.410
17:37:13 INFO - compress: [ATTAINED]
17:37:13 INFO - compress: BPP: 0.938
17:37:13 INFO - compress: HL BPP: 0.323
17:37:13 INFO - compress: L BPP: 0.616
17:37:14 INFO - compress: [ESTIMATED]
17:37:14 INFO - compress: BPP: 0.483
17:37:14 INFO - compress: HL BPP: 0.020
17:37:14 INFO - compress: L BPP: 0.463
17:37:14 INFO - compress: [ATTAINED]
17:37:14 INFO - compress: BPP: 0.991
17:37:14 INFO - compress: HL BPP: 0.323
17:37:14 INFO - compress: L BPP: 0.667
17:37:14 INFO - compress: [ESTIMATED]
17:37:14 INFO - compress: BPP: 0.408
17:37:14 INFO - compress: HL BPP: 0.023
17:37:14 INFO - compress: L BPP: 0.385
17:37:14 INFO - compress: [ATTAINED]
17:37:14 INFO - compress: BPP: 0.916
17:37:14 INFO - compress: HL BPP: 0.326
17:37:14 INFO - compress: L BPP: 0.590
17:37:15 INFO - compress: [ESTIMATED]
17:37:15 INFO - compress: BPP: 0.553
17:37:15 INFO - compress: HL BPP: 0.023
17:37:15 INFO - compress: L BPP: 0.530
17:37:15 INFO - compress: [ATTAINED]
17:37:15 INFO - compress: BPP: 1.063
17:37:15 INFO - compress: HL BPP: 0.328
17:37:15 INFO - compress: L BPP: 0.735
17:37:15 INFO - compress: [ESTIMATED]
17:37:15 INFO - compress: BPP: 0.285
17:37:15 INFO - compress: HL BPP: 0.020
17:37:15 INFO - compress: L BPP: 0.265
17:37:15 INFO - compress: [ATTAINED]
17:37:15 INFO - compress: BPP: 0.790
17:37:15 INFO - compress: HL BPP: 0.322
17:37:15 INFO - compress: L BPP: 0.468
17:37:16 INFO - compress: [ESTIMATED]
17:37:16 INFO - compress: BPP: 0.443
17:37:16 INFO - compress: HL BPP: 0.021
17:37:16 INFO - compress: L BPP: 0.423
17:37:16 INFO - compress: [ATTAINED]
17:37:16 INFO - compress: BPP: 0.952
17:37:16 INFO - compress: HL BPP: 0.324
17:37:16 INFO - compress: L BPP: 0.628
17:37:16 INFO - compress: [ESTIMATED]
17:37:16 INFO - compress: BPP: 0.495
17:37:16 INFO - compress: HL BPP: 0.020
17:37:16 INFO - compress: L BPP: 0.475
17:37:16 INFO - compress: [ATTAINED]
17:37:16 INFO - compress: BPP: 1.001
17:37:16 INFO - compress: HL BPP: 0.323
17:37:16 INFO - compress: L BPP: 0.679
17:37:16 INFO - compress: [ESTIMATED]
17:37:16 INFO - compress: BPP: 0.540
17:37:16 INFO - compress: HL BPP: 0.019
17:37:16 INFO - compress: L BPP: 0.521
17:37:16 INFO - compress: [ATTAINED]
17:37:16 INFO - compress: BPP: 1.048
17:37:16 INFO - compress: HL BPP: 0.321
17:37:16 INFO - compress: L BPP: 0.727
17:37:17 INFO - compress: [ESTIMATED]
17:37:17 INFO - compress: BPP: 0.369
17:37:17 INFO - compress: HL BPP: 0.020
17:37:17 INFO - compress: L BPP: 0.350
17:37:17 INFO - compress: [ATTAINED]
17:37:17 INFO - compress: BPP: 0.876
17:37:17 INFO - compress: HL BPP: 0.322
17:37:17 INFO - compress: L BPP: 0.554
17:37:17 INFO - compress: [ESTIMATED]
17:37:17 INFO - compress: BPP: 0.501
17:37:17 INFO - compress: HL BPP: 0.023
17:37:17 INFO - compress: L BPP: 0.478
17:37:17 INFO - compress: [ATTAINED]
17:37:17 INFO - compress: BPP: 1.009
17:37:17 INFO - compress: HL BPP: 0.326
17:37:17 INFO - compress: L BPP: 0.684
17:37:18 INFO - compress: [ESTIMATED]
17:37:18 INFO - compress: BPP: 0.348
17:37:18 INFO - compress: HL BPP: 0.019
17:37:18 INFO - compress: L BPP: 0.329
17:37:18 INFO - compress: [ATTAINED]
17:37:18 INFO - compress: BPP: 0.857
17:37:18 INFO - compress: HL BPP: 0.323
17:37:18 INFO - compress: L BPP: 0.534
17:37:18 INFO - compress: [ESTIMATED]
17:37:18 INFO - compress: BPP: 0.375
17:37:18 INFO - compress: HL BPP: 0.022
17:37:18 INFO - compress: L BPP: 0.354
17:37:18 INFO - compress: [ATTAINED]
17:37:18 INFO - compress: BPP: 0.881
17:37:18 INFO - compress: HL BPP: 0.325
17:37:18 INFO - compress: L BPP: 0.556
17:37:19 INFO - compress: [ESTIMATED]
17:37:19 INFO - compress: BPP: 0.665
17:37:19 INFO - compress: HL BPP: 0.022
17:37:19 INFO - compress: L BPP: 0.643
17:37:19 INFO - compress: [ATTAINED]
17:37:19 INFO - compress: BPP: 1.172
17:37:19 INFO - compress: HL BPP: 0.326
17:37:19 INFO - compress: L BPP: 0.847
17:37:19 INFO - compress: [ESTIMATED]
17:37:19 INFO - compress: BPP: 0.442
17:37:19 INFO - compress: HL BPP: 0.021
17:37:19 INFO - compress: L BPP: 0.420
17:37:19 INFO - compress: [ATTAINED]
17:37:19 INFO - compress: BPP: 0.948
17:37:19 INFO - compress: HL BPP: 0.325
17:37:19 INFO - compress: L BPP: 0.623
17:37:20 INFO - compress: [ESTIMATED]
17:37:20 INFO - compress: BPP: 0.243
17:37:20 INFO - compress: HL BPP: 0.018
17:37:20 INFO - compress: L BPP: 0.224
17:37:20 INFO - compress: [ATTAINED]
17:37:20 INFO - compress: BPP: 0.749
17:37:20 INFO - compress: HL BPP: 0.320
17:37:20 INFO - compress: L BPP: 0.429
17:37:20 INFO - compress: [ESTIMATED]
17:37:20 INFO - compress: BPP: 0.417
17:37:20 INFO - compress: HL BPP: 0.020
17:37:20 INFO - compress: L BPP: 0.397
17:37:20 INFO - compress: [ATTAINED]
17:37:20 INFO - compress: BPP: 0.926
17:37:20 INFO - compress: HL BPP: 0.324
17:37:20 INFO - compress: L BPP: 0.602
17:37:21 INFO - compress: [ESTIMATED]
17:37:21 INFO - compress: BPP: 0.505
17:37:21 INFO - compress: HL BPP: 0.021
17:37:21 INFO - compress: L BPP: 0.484
17:37:21 INFO - compress: [ATTAINED]
17:37:21 INFO - compress: BPP: 1.011
17:37:21 INFO - compress: HL BPP: 0.322
17:37:21 INFO - compress: L BPP: 0.689
17:37:21 INFO - compress: [ESTIMATED]
17:37:21 INFO - compress: BPP: 0.400
17:37:21 INFO - compress: HL BPP: 0.019
17:37:21 INFO - compress: L BPP: 0.381
17:37:21 INFO - compress: [ATTAINED]
17:37:21 INFO - compress: BPP: 0.906
17:37:21 INFO - compress: HL BPP: 0.321
17:37:21 INFO - compress: L BPP: 0.585
17:37:22 INFO - compress: [ESTIMATED]
17:37:22 INFO - compress: BPP: 0.413
17:37:22 INFO - compress: HL BPP: 0.019
17:37:22 INFO - compress: L BPP: 0.394
17:37:22 INFO - compress: [ATTAINED]
17:37:22 INFO - compress: BPP: 0.920
17:37:22 INFO - compress: HL BPP: 0.321
17:37:22 INFO - compress: L BPP: 0.599
17:37:22 INFO - compress: [ESTIMATED]
17:37:22 INFO - compress: BPP: 0.519
17:37:22 INFO - compress: HL BPP: 0.022
17:37:22 INFO - compress: L BPP: 0.497
17:37:22 INFO - compress: [ATTAINED]
17:37:22 INFO - compress: BPP: 1.026
17:37:22 INFO - compress: HL BPP: 0.324
17:37:22 INFO - compress: L BPP: 0.702
17:37:23 INFO - compress: [ESTIMATED]
17:37:23 INFO - compress: BPP: 0.429
17:37:23 INFO - compress: HL BPP: 0.020
17:37:23 INFO - compress: L BPP: 0.409
17:37:23 INFO - compress: [ATTAINED]
17:37:23 INFO - compress: BPP: 0.937
17:37:23 INFO - compress: HL BPP: 0.323
17:37:23 INFO - compress: L BPP: 0.613
17:37:23 INFO - compress: [ESTIMATED]
17:37:23 INFO - compress: BPP: 0.605
17:37:23 INFO - compress: HL BPP: 0.022
17:37:23 INFO - compress: L BPP: 0.583
17:37:23 INFO - compress: [ATTAINED]
17:37:23 INFO - compress: BPP: 1.112
17:37:23 INFO - compress: HL BPP: 0.325
17:37:23 INFO - compress: L BPP: 0.787
17:37:24 INFO - compress: [ESTIMATED]
17:37:24 INFO - compress: BPP: 0.522
17:37:24 INFO - compress: HL BPP: 0.021
17:37:24 INFO - compress: L BPP: 0.500
17:37:24 INFO - compress: [ATTAINED]
17:37:24 INFO - compress: BPP: 1.030
17:37:24 INFO - compress: HL BPP: 0.325
17:37:24 INFO - compress: L BPP: 0.706
17:37:24 INFO - compress: [ESTIMATED]
17:37:24 INFO - compress: BPP: 0.210
17:37:24 INFO - compress: HL BPP: 0.019
17:37:24 INFO - compress: L BPP: 0.191
17:37:24 INFO - compress: [ATTAINED]
17:37:24 INFO - compress: BPP: 0.718
17:37:24 INFO - compress: HL BPP: 0.322
17:37:24 INFO - compress: L BPP: 0.396
17:37:25 INFO - compress: [ESTIMATED]
17:37:25 INFO - compress: BPP: 0.470
17:37:25 INFO - compress: HL BPP: 0.021
17:37:25 INFO - compress: L BPP: 0.449
17:37:25 INFO - compress: [ATTAINED]
17:37:25 INFO - compress: BPP: 0.979
17:37:25 INFO - compress: HL BPP: 0.324
17:37:25 INFO - compress: L BPP: 0.655
17:37:25 INFO - compress: [ESTIMATED]
17:37:25 INFO - compress: BPP: 0.484
17:37:25 INFO - compress: HL BPP: 0.020
17:37:25 INFO - compress: L BPP: 0.464
17:37:25 INFO - compress: [ATTAINED]
17:37:25 INFO - compress: BPP: 0.991
17:37:25 INFO - compress: HL BPP: 0.323
17:37:25 INFO - compress: L BPP: 0.668
17:37:26 INFO - compress: [ESTIMATED]
17:37:26 INFO - compress: BPP: 0.197
17:37:26 INFO - compress: HL BPP: 0.017
17:37:26 INFO - compress: L BPP: 0.179
17:37:26 INFO - compress: [ATTAINED]
17:37:26 INFO - compress: BPP: 0.701
17:37:26 INFO - compress: HL BPP: 0.320
17:37:26 INFO - compress: L BPP: 0.381
17:37:26 INFO - compress: [ESTIMATED]
17:37:26 INFO - compress: BPP: 0.319
17:37:26 INFO - compress: HL BPP: 0.020
17:37:26 INFO - compress: L BPP: 0.299
17:37:26 INFO - compress: [ATTAINED]
17:37:26 INFO - compress: BPP: 0.824
17:37:26 INFO - compress: HL BPP: 0.321
17:37:26 INFO - compress: L BPP: 0.503
17:37:27 INFO - compress: [ESTIMATED]
17:37:27 INFO - compress: BPP: 0.340
17:37:27 INFO - compress: HL BPP: 0.020
17:37:27 INFO - compress: L BPP: 0.319
17:37:27 INFO - compress: [ATTAINED]
17:37:27 INFO - compress: BPP: 0.846
17:37:27 INFO - compress: HL BPP: 0.323
17:37:27 INFO - compress: L BPP: 0.523
17:37:27 INFO - compress: [ESTIMATED]
17:37:27 INFO - compress: BPP: 0.329
17:37:27 INFO - compress: HL BPP: 0.019
17:37:27 INFO - compress: L BPP: 0.310
17:37:27 INFO - compress: [ATTAINED]
17:37:27 INFO - compress: BPP: 0.836
17:37:27 INFO - compress: HL BPP: 0.322
17:37:27 INFO - compress: L BPP: 0.515
17:37:28 INFO - compress: [ESTIMATED]
17:37:28 INFO - compress: BPP: 0.351
17:37:28 INFO - compress: HL BPP: 0.021
17:37:28 INFO - compress: L BPP: 0.330
17:37:28 INFO - compress: [ATTAINED]
17:37:28 INFO - compress: BPP: 0.862
17:37:28 INFO - compress: HL BPP: 0.325
17:37:28 INFO - compress: L BPP: 0.537
17:37:28 INFO - compress: [ESTIMATED]
17:37:28 INFO - compress: BPP: 0.552
17:37:28 INFO - compress: HL BPP: 0.020
17:37:28 INFO - compress: L BPP: 0.532
17:37:28 INFO - compress: [ATTAINED]
17:37:28 INFO - compress: BPP: 1.060
17:37:28 INFO - compress: HL BPP: 0.323
17:37:28 INFO - compress: L BPP: 0.737
17:37:29 INFO - compress: [ESTIMATED]
17:37:29 INFO - compress: BPP: 0.445
17:37:29 INFO - compress: HL BPP: 0.020
17:37:29 INFO - compress: L BPP: 0.426
17:37:29 INFO - compress: [ATTAINED]
17:37:29 INFO - compress: BPP: 0.951
17:37:29 INFO - compress: HL BPP: 0.322
17:37:29 INFO - compress: L BPP: 0.629
17:37:30 INFO - compress: [ESTIMATED]
17:37:30 INFO - compress: BPP: 0.355
17:37:30 INFO - compress: HL BPP: 0.021
17:37:30 INFO - compress: L BPP: 0.334
17:37:30 INFO - compress: [ATTAINED]
17:37:30 INFO - compress: BPP: 0.864
17:37:30 INFO - compress: HL BPP: 0.323
17:37:30 INFO - compress: L BPP: 0.541
17:37:30 INFO - compress: [ESTIMATED]
17:37:30 INFO - compress: BPP: 0.411
17:37:30 INFO - compress: HL BPP: 0.021
17:37:30 INFO - compress: L BPP: 0.390
17:37:30 INFO - compress: [ATTAINED]
17:37:30 INFO - compress: BPP: 0.917
17:37:30 INFO - compress: HL BPP: 0.323
17:37:30 INFO - compress: L BPP: 0.594
17:37:31 INFO - compress: [ESTIMATED]
17:37:31 INFO - compress: BPP: 0.364
17:37:31 INFO - compress: HL BPP: 0.021
17:37:31 INFO - compress: L BPP: 0.343
17:37:31 INFO - compress: [ATTAINED]
17:37:31 INFO - compress: BPP: 0.868
17:37:31 INFO - compress: HL BPP: 0.323
17:37:31 INFO - compress: L BPP: 0.545
17:37:31 INFO - compress: [ESTIMATED]
17:37:31 INFO - compress: BPP: 0.258
17:37:31 INFO - compress: HL BPP: 0.020
17:37:31 INFO - compress: L BPP: 0.238
17:37:31 INFO - compress: [ATTAINED]
17:37:31 INFO - compress: BPP: 0.764
17:37:31 INFO - compress: HL BPP: 0.323
17:37:31 INFO - compress: L BPP: 0.441
17:37:32 INFO - compress: [ESTIMATED]
17:37:32 INFO - compress: BPP: 0.285
17:37:32 INFO - compress: HL BPP: 0.019
17:37:32 INFO - compress: L BPP: 0.266
17:37:32 INFO - compress: [ATTAINED]
17:37:32 INFO - compress: BPP: 0.792
17:37:32 INFO - compress: HL BPP: 0.322
17:37:32 INFO - compress: L BPP: 0.471
17:37:32 INFO - compress: [ESTIMATED]
17:37:32 INFO - compress: BPP: 0.388
17:37:32 INFO - compress: HL BPP: 0.021
17:37:32 INFO - compress: L BPP: 0.366
17:37:32 INFO - compress: [ATTAINED]
17:37:32 INFO - compress: BPP: 0.892
17:37:32 INFO - compress: HL BPP: 0.325
17:37:32 INFO - compress: L BPP: 0.567
17:37:33 INFO - compress: [ESTIMATED]
17:37:33 INFO - compress: BPP: 0.241
17:37:33 INFO - compress: HL BPP: 0.020
17:37:33 INFO - compress: L BPP: 0.222
17:37:33 INFO - compress: [ATTAINED]
17:37:33 INFO - compress: BPP: 0.748
17:37:33 INFO - compress: HL BPP: 0.322
17:37:33 INFO - compress: L BPP: 0.426
17:37:33 INFO - compress: [ESTIMATED]
17:37:33 INFO - compress: BPP: 0.606
17:37:33 INFO - compress: HL BPP: 0.021
17:37:33 INFO - compress: L BPP: 0.585
17:37:33 INFO - compress: [ATTAINED]
17:37:33 INFO - compress: BPP: 1.113
17:37:33 INFO - compress: HL BPP: 0.325
17:37:33 INFO - compress: L BPP: 0.788
17:37:34 INFO - compress: [ESTIMATED]
17:37:34 INFO - compress: BPP: 0.454
17:37:34 INFO - compress: HL BPP: 0.020
17:37:34 INFO - compress: L BPP: 0.434
17:37:34 INFO - compress: [ATTAINED]
17:37:34 INFO - compress: BPP: 0.962
17:37:34 INFO - compress: HL BPP: 0.324
17:37:34 INFO - compress: L BPP: 0.638
17:37:35 INFO - compress: [ESTIMATED]
17:37:35 INFO - compress: BPP: 0.240
17:37:35 INFO - compress: HL BPP: 0.020
17:37:35 INFO - compress: L BPP: 0.220
17:37:35 INFO - compress: [ATTAINED]
17:37:35 INFO - compress: BPP: 0.748
17:37:35 INFO - compress: HL BPP: 0.323
17:37:35 INFO - compress: L BPP: 0.425
17:37:35 INFO - compress: [ESTIMATED]
17:37:35 INFO - compress: BPP: 0.497
17:37:35 INFO - compress: HL BPP: 0.019
17:37:35 INFO - compress: L BPP: 0.478
17:37:35 INFO - compress: [ATTAINED]
17:37:35 INFO - compress: BPP: 1.004
17:37:35 INFO - compress: HL BPP: 0.322
17:37:35 INFO - compress: L BPP: 0.682
17:37:36 INFO - compress: [ESTIMATED]
17:37:36 INFO - compress: BPP: 0.146
17:37:36 INFO - compress: HL BPP: 0.017
17:37:36 INFO - compress: L BPP: 0.129
17:37:36 INFO - compress: [ATTAINED]
17:37:36 INFO - compress: BPP: 0.653
17:37:36 INFO - compress: HL BPP: 0.319
17:37:36 INFO - compress: L BPP: 0.333
17:37:36 INFO - compress: [ESTIMATED]
17:37:36 INFO - compress: BPP: 0.511
17:37:36 INFO - compress: HL BPP: 0.021
17:37:36 INFO - compress: L BPP: 0.489
17:37:36 INFO - compress: [ATTAINED]
17:37:36 INFO - compress: BPP: 1.019
17:37:36 INFO - compress: HL BPP: 0.324
17:37:36 INFO - compress: L BPP: 0.695
17:37:37 INFO - compress: [ESTIMATED]
17:37:37 INFO - compress: BPP: 0.389
17:37:37 INFO - compress: HL BPP: 0.022
17:37:37 INFO - compress: L BPP: 0.367
17:37:37 INFO - compress: [ATTAINED]
17:37:37 INFO - compress: BPP: 0.897
17:37:37 INFO - compress: HL BPP: 0.324
17:37:37 INFO - compress: L BPP: 0.573
17:37:37 INFO - compress: [ESTIMATED]
17:37:37 INFO - compress: BPP: 0.236
17:37:37 INFO - compress: HL BPP: 0.020
17:37:37 INFO - compress: L BPP: 0.217
17:37:37 INFO - compress: [ATTAINED]
17:37:37 INFO - compress: BPP: 0.743
17:37:37 INFO - compress: HL BPP: 0.322
17:37:37 INFO - compress: L BPP: 0.421
17:37:38 INFO - compress: [ESTIMATED]
17:37:38 INFO - compress: BPP: 0.502
17:37:38 INFO - compress: HL BPP: 0.020
17:37:38 INFO - compress: L BPP: 0.483
17:37:38 INFO - compress: [ATTAINED]
17:37:38 INFO - compress: BPP: 1.012
17:37:38 INFO - compress: HL BPP: 0.323
17:37:38 INFO - compress: L BPP: 0.689
17:37:39 INFO - compress: [ESTIMATED]
17:37:39 INFO - compress: BPP: 0.473
17:37:39 INFO - compress: HL BPP: 0.021
17:37:39 INFO - compress: L BPP: 0.452
17:37:39 INFO - compress: [ATTAINED]
17:37:39 INFO - compress: BPP: 0.980
17:37:39 INFO - compress: HL BPP: 0.323
17:37:39 INFO - compress: L BPP: 0.658
17:37:39 INFO - compress: [ESTIMATED]
17:37:39 INFO - compress: BPP: 0.336
17:37:39 INFO - compress: HL BPP: 0.022
17:37:39 INFO - compress: L BPP: 0.314
17:37:39 INFO - compress: [ATTAINED]
17:37:39 INFO - compress: BPP: 0.844
17:37:39 INFO - compress: HL BPP: 0.326
17:37:39 INFO - compress: L BPP: 0.518
17:37:40 INFO - compress: [ESTIMATED]
17:37:40 INFO - compress: BPP: 0.367
17:37:40 INFO - compress: HL BPP: 0.022
17:37:40 INFO - compress: L BPP: 0.346
17:37:40 INFO - compress: [ATTAINED]
17:37:40 INFO - compress: BPP: 0.877
17:37:40 INFO - compress: HL BPP: 0.325
17:37:40 INFO - compress: L BPP: 0.552
17:37:40 INFO - compress: [ESTIMATED]
17:37:40 INFO - compress: BPP: 0.439
17:37:40 INFO - compress: HL BPP: 0.019
17:37:40 INFO - compress: L BPP: 0.420
17:37:40 INFO - compress: [ATTAINED]
17:37:40 INFO - compress: BPP: 0.947
17:37:40 INFO - compress: HL BPP: 0.321
17:37:40 INFO - compress: L BPP: 0.625
17:37:41 INFO - compress: [ESTIMATED]
17:37:41 INFO - compress: BPP: 0.381
17:37:41 INFO - compress: HL BPP: 0.020
17:37:41 INFO - compress: L BPP: 0.361
17:37:41 INFO - compress: [ATTAINED]
17:37:41 INFO - compress: BPP: 0.889
17:37:41 INFO - compress: HL BPP: 0.323
17:37:41 INFO - compress: L BPP: 0.566
17:37:41 INFO - compress: [ESTIMATED]
17:37:41 INFO - compress: BPP: 0.410
17:37:41 INFO - compress: HL BPP: 0.019
17:37:41 INFO - compress: L BPP: 0.390
17:37:41 INFO - compress: [ATTAINED]
17:37:41 INFO - compress: BPP: 0.916
17:37:41 INFO - compress: HL BPP: 0.322
17:37:41 INFO - compress: L BPP: 0.594
17:37:42 INFO - compress: [ESTIMATED]
17:37:42 INFO - compress: BPP: 0.445
17:37:42 INFO - compress: HL BPP: 0.019
17:37:42 INFO - compress: L BPP: 0.426
17:37:42 INFO - compress: [ATTAINED]
17:37:42 INFO - compress: BPP: 0.954
17:37:42 INFO - compress: HL BPP: 0.323
17:37:42 INFO - compress: L BPP: 0.631
17:37:43 INFO - compress: [ESTIMATED]
17:37:43 INFO - compress: BPP: 0.385
17:37:43 INFO - compress: HL BPP: 0.021
17:37:43 INFO - compress: L BPP: 0.364
17:37:43 INFO - compress: [ATTAINED]
17:37:43 INFO - compress: BPP: 0.892
17:37:43 INFO - compress: HL BPP: 0.324
17:37:43 INFO - compress: L BPP: 0.568
17:37:43 INFO - compress: [ESTIMATED]
17:37:43 INFO - compress: BPP: 0.427
17:37:43 INFO - compress: HL BPP: 0.020
17:37:43 INFO - compress: L BPP: 0.407
17:37:43 INFO - compress: [ATTAINED]
17:37:43 INFO - compress: BPP: 0.933
17:37:43 INFO - compress: HL BPP: 0.323
17:37:43 INFO - compress: L BPP: 0.610
17:37:44 INFO - compress: [ESTIMATED]
17:37:44 INFO - compress: BPP: 0.328
17:37:44 INFO - compress: HL BPP: 0.022
17:37:44 INFO - compress: L BPP: 0.306
17:37:44 INFO - compress: [ATTAINED]
17:37:44 INFO - compress: BPP: 0.837
17:37:44 INFO - compress: HL BPP: 0.326
17:37:44 INFO - compress: L BPP: 0.511
17:37:44 INFO - compress: [ESTIMATED]
17:37:44 INFO - compress: BPP: 0.332
17:37:44 INFO - compress: HL BPP: 0.020
17:37:44 INFO - compress: L BPP: 0.312
17:37:44 INFO - compress: [ATTAINED]
17:37:44 INFO - compress: BPP: 0.838
17:37:44 INFO - compress: HL BPP: 0.322
17:37:44 INFO - compress: L BPP: 0.517
17:37:45 INFO - compress: [ESTIMATED]
17:37:45 INFO - compress: BPP: 0.408
17:37:45 INFO - compress: HL BPP: 0.018
17:37:45 INFO - compress: L BPP: 0.389
17:37:45 INFO - compress: [ATTAINED]
17:37:45 INFO - compress: BPP: 0.915
17:37:45 INFO - compress: HL BPP: 0.321
17:37:45 INFO - compress: L BPP: 0.594
17:37:45 INFO - compress: [ESTIMATED]
17:37:45 INFO - compress: BPP: 0.463
17:37:45 INFO - compress: HL BPP: 0.023
17:37:45 INFO - compress: L BPP: 0.440
17:37:45 INFO - compress: [ATTAINED]
17:37:45 INFO - compress: BPP: 0.973
17:37:45 INFO - compress: HL BPP: 0.327
17:37:45 INFO - compress: L BPP: 0.646
17:37:46 INFO - compress: [ESTIMATED]
17:37:46 INFO - compress: BPP: 0.469
17:37:46 INFO - compress: HL BPP: 0.020
17:37:46 INFO - compress: L BPP: 0.449
17:37:46 INFO - compress: [ATTAINED]
17:37:46 INFO - compress: BPP: 0.979
17:37:46 INFO - compress: HL BPP: 0.323
17:37:46 INFO - compress: L BPP: 0.656
17:37:46 INFO - compress: [ESTIMATED]
17:37:46 INFO - compress: BPP: 0.363
17:37:46 INFO - compress: HL BPP: 0.019
17:37:46 INFO - compress: L BPP: 0.344
17:37:46 INFO - compress: [ATTAINED]
17:37:46 INFO - compress: BPP: 0.869
17:37:46 INFO - compress: HL BPP: 0.320
17:37:46 INFO - compress: L BPP: 0.548
17:37:47 INFO - compress: [ESTIMATED]
17:37:47 INFO - compress: BPP: 0.477
17:37:47 INFO - compress: HL BPP: 0.019
17:37:47 INFO - compress: L BPP: 0.457
17:37:47 INFO - compress: [ATTAINED]
17:37:47 INFO - compress: BPP: 0.983
17:37:47 INFO - compress: HL BPP: 0.322
17:37:47 INFO - compress: L BPP: 0.662
17:37:48 INFO - compress: [ESTIMATED]
17:37:48 INFO - compress: BPP: 0.367
17:37:48 INFO - compress: HL BPP: 0.019
17:37:48 INFO - compress: L BPP: 0.348
17:37:48 INFO - compress: [ATTAINED]
17:37:48 INFO - compress: BPP: 0.875
17:37:48 INFO - compress: HL BPP: 0.321
17:37:48 INFO - compress: L BPP: 0.553
17:37:48 INFO - compress: [ESTIMATED]
17:37:48 INFO - compress: BPP: 0.319
17:37:48 INFO - compress: HL BPP: 0.019
17:37:48 INFO - compress: L BPP: 0.300
17:37:48 INFO - compress: [ATTAINED]
17:37:48 INFO - compress: BPP: 0.824
17:37:48 INFO - compress: HL BPP: 0.320
17:37:48 INFO - compress: L BPP: 0.504
17:37:49 INFO - compress: [ESTIMATED]
17:37:49 INFO - compress: BPP: 0.651
17:37:49 INFO - compress: HL BPP: 0.023
17:37:49 INFO - compress: L BPP: 0.628
17:37:49 INFO - compress: [ATTAINED]
17:37:49 INFO - compress: BPP: 1.163
17:37:49 INFO - compress: HL BPP: 0.328
17:37:49 INFO - compress: L BPP: 0.835
17:37:49 INFO - compress: [ESTIMATED]
17:37:49 INFO - compress: BPP: 0.221
17:37:49 INFO - compress: HL BPP: 0.019
17:37:49 INFO - compress: L BPP: 0.202
17:37:49 INFO - compress: [ATTAINED]
17:37:49 INFO - compress: BPP: 0.727
17:37:49 INFO - compress: HL BPP: 0.321
17:37:49 INFO - compress: L BPP: 0.406
17:37:50 INFO - compress: [ESTIMATED]
17:37:50 INFO - compress: BPP: 0.505
17:37:50 INFO - compress: HL BPP: 0.023
17:37:50 INFO - compress: L BPP: 0.482
17:37:50 INFO - compress: [ATTAINED]
17:37:50 INFO - compress: BPP: 1.013
17:37:50 INFO - compress: HL BPP: 0.326
17:37:50 INFO - compress: L BPP: 0.687
17:37:50 INFO - compress: [ESTIMATED]
17:37:50 INFO - compress: BPP: 0.399
17:37:50 INFO - compress: HL BPP: 0.020
17:37:50 INFO - compress: L BPP: 0.379
17:37:50 INFO - compress: [ATTAINED]
17:37:50 INFO - compress: BPP: 0.908
17:37:50 INFO - compress: HL BPP: 0.323
17:37:50 INFO - compress: L BPP: 0.584
17:37:51 INFO - compress: [ESTIMATED]
17:37:51 INFO - compress: BPP: 0.384
17:37:51 INFO - compress: HL BPP: 0.020
17:37:51 INFO - compress: L BPP: 0.364
17:37:51 INFO - compress: [ATTAINED]
17:37:51 INFO - compress: BPP: 0.891
17:37:51 INFO - compress: HL BPP: 0.323
17:37:51 INFO - compress: L BPP: 0.568
17:37:52 INFO - compress: [ESTIMATED]
17:37:52 INFO - compress: BPP: 0.408
17:37:52 INFO - compress: HL BPP: 0.019
17:37:52 INFO - compress: L BPP: 0.389
17:37:52 INFO - compress: [ATTAINED]
17:37:52 INFO - compress: BPP: 0.917
17:37:52 INFO - compress: HL BPP: 0.323
17:37:52 INFO - compress: L BPP: 0.594
17:37:52 INFO - compress: [ESTIMATED]
17:37:52 INFO - compress: BPP: 0.640
17:37:52 INFO - compress: HL BPP: 0.022
17:37:52 INFO - compress: L BPP: 0.618
17:37:52 INFO - compress: [ATTAINED]
17:37:52 INFO - compress: BPP: 1.148
17:37:52 INFO - compress: HL BPP: 0.325
17:37:52 INFO - compress: L BPP: 0.824
17:37:53 INFO - compress: [ESTIMATED]
17:37:53 INFO - compress: BPP: 0.539
17:37:53 INFO - compress: HL BPP: 0.024
17:37:53 INFO - compress: L BPP: 0.516
17:37:53 INFO - compress: [ATTAINED]
17:37:53 INFO - compress: BPP: 1.048
17:37:53 INFO - compress: HL BPP: 0.327
17:37:53 INFO - compress: L BPP: 0.721
17:37:53 INFO - compress: [ESTIMATED]
17:37:53 INFO - compress: BPP: 0.423
17:37:53 INFO - compress: HL BPP: 0.022
17:37:53 INFO - compress: L BPP: 0.402
17:37:53 INFO - compress: [ATTAINED]
17:37:53 INFO - compress: BPP: 0.929
17:37:53 INFO - compress: HL BPP: 0.323
17:37:53 INFO - compress: L BPP: 0.605
17:37:54 INFO - compress: [ESTIMATED]
17:37:54 INFO - compress: BPP: 0.361
17:37:54 INFO - compress: HL BPP: 0.019
17:37:54 INFO - compress: L BPP: 0.341
17:37:54 INFO - compress: [ATTAINED]
17:37:54 INFO - compress: BPP: 0.870
17:37:54 INFO - compress: HL BPP: 0.323
17:37:54 INFO - compress: L BPP: 0.547
17:37:54 INFO - compress: [ESTIMATED]
17:37:54 INFO - compress: BPP: 0.449
17:37:54 INFO - compress: HL BPP: 0.021
17:37:54 INFO - compress: L BPP: 0.427
17:37:54 INFO - compress: [ATTAINED]
17:37:54 INFO - compress: BPP: 0.958
17:37:54 INFO - compress: HL BPP: 0.324
17:37:54 INFO - compress: L BPP: 0.634
17:37:55 INFO - compress: [ESTIMATED]
17:37:55 INFO - compress: BPP: 0.371
17:37:55 INFO - compress: HL BPP: 0.018
17:37:55 INFO - compress: L BPP: 0.352
17:37:55 INFO - compress: [ATTAINED]
17:37:55 INFO - compress: BPP: 0.875
17:37:55 INFO - compress: HL BPP: 0.320
17:37:55 INFO - compress: L BPP: 0.555
17:37:55 INFO - compress: [ESTIMATED]
17:37:55 INFO - compress: BPP: 0.377
17:37:55 INFO - compress: HL BPP: 0.020
17:37:55 INFO - compress: L BPP: 0.356
17:37:55 INFO - compress: [ATTAINED]
17:37:55 INFO - compress: BPP: 0.886
17:37:55 INFO - compress: HL BPP: 0.324
17:37:55 INFO - compress: L BPP: 0.562
17:37:56 INFO - compress: [ESTIMATED]
17:37:56 INFO - compress: BPP: 0.536
17:37:56 INFO - compress: HL BPP: 0.020
17:37:56 INFO - compress: L BPP: 0.516
17:37:56 INFO - compress: [ATTAINED]
17:37:56 INFO - compress: BPP: 1.044
17:37:56 INFO - compress: HL BPP: 0.325
17:37:56 INFO - compress: L BPP: 0.719
17:37:57 INFO - compress: [ESTIMATED]
17:37:57 INFO - compress: BPP: 0.435
17:37:57 INFO - compress: HL BPP: 0.020
17:37:57 INFO - compress: L BPP: 0.415
17:37:57 INFO - compress: [ATTAINED]
17:37:57 INFO - compress: BPP: 0.944
17:37:57 INFO - compress: HL BPP: 0.323
17:37:57 INFO - compress: L BPP: 0.622
17:37:57 INFO - compress: [ESTIMATED]
17:37:57 INFO - compress: BPP: 0.542
17:37:57 INFO - compress: HL BPP: 0.020
17:37:57 INFO - compress: L BPP: 0.522
17:37:57 INFO - compress: [ATTAINED]
17:37:57 INFO - compress: BPP: 1.050
17:37:57 INFO - compress: HL BPP: 0.323
17:37:57 INFO - compress: L BPP: 0.728
17:37:58 INFO - compress: [ESTIMATED]
17:37:58 INFO - compress: BPP: 0.614
17:37:58 INFO - compress: HL BPP: 0.020
17:37:58 INFO - compress: L BPP: 0.594
17:37:58 INFO - compress: [ATTAINED]
17:37:58 INFO - compress: BPP: 1.120
17:37:58 INFO - compress: HL BPP: 0.323
17:37:58 INFO - compress: L BPP: 0.797
17:37:58 INFO - compress: [ESTIMATED]
17:37:58 INFO - compress: BPP: 0.264
17:37:58 INFO - compress: HL BPP: 0.017
17:37:58 INFO - compress: L BPP: 0.247
17:37:58 INFO - compress: [ATTAINED]
17:37:58 INFO - compress: BPP: 0.770
17:37:58 INFO - compress: HL BPP: 0.319
17:37:58 INFO - compress: L BPP: 0.451
17:37:59 INFO - compress: [ESTIMATED]
17:37:59 INFO - compress: BPP: 0.428
17:37:59 INFO - compress: HL BPP: 0.019
17:37:59 INFO - compress: L BPP: 0.409
17:37:59 INFO - compress: [ATTAINED]
17:37:59 INFO - compress: BPP: 0.934
17:37:59 INFO - compress: HL BPP: 0.321
17:37:59 INFO - compress: L BPP: 0.612
17:37:59 INFO - compress: [ESTIMATED]
17:37:59 INFO - compress: BPP: 0.368
17:37:59 INFO - compress: HL BPP: 0.020
17:37:59 INFO - compress: L BPP: 0.348
17:37:59 INFO - compress: [ATTAINED]
17:37:59 INFO - compress: BPP: 0.874
17:37:59 INFO - compress: HL BPP: 0.323
17:37:59 INFO - compress: L BPP: 0.550
17:38:00 INFO - compress: [ESTIMATED]
17:38:00 INFO - compress: BPP: 0.332
17:38:00 INFO - compress: HL BPP: 0.021
17:38:00 INFO - compress: L BPP: 0.310
17:38:00 INFO - compress: [ATTAINED]
17:38:00 INFO - compress: BPP: 0.839
17:38:00 INFO - compress: HL BPP: 0.324
17:38:00 INFO - compress: L BPP: 0.515
17:38:01 INFO - compress: [ESTIMATED]
17:38:01 INFO - compress: BPP: 0.523
17:38:01 INFO - compress: HL BPP: 0.020
17:38:01 INFO - compress: L BPP: 0.503
17:38:01 INFO - compress: [ATTAINED]
17:38:01 INFO - compress: BPP: 1.030
17:38:01 INFO - compress: HL BPP: 0.322
17:38:01 INFO - compress: L BPP: 0.708
17:38:01 INFO - compress: [ESTIMATED]
17:38:01 INFO - compress: BPP: 0.397
17:38:01 INFO - compress: HL BPP: 0.021
17:38:01 INFO - compress: L BPP: 0.375
17:38:01 INFO - compress: [ATTAINED]
17:38:01 INFO - compress: BPP: 0.902
17:38:01 INFO - compress: HL BPP: 0.323
17:38:01 INFO - compress: L BPP: 0.579
17:39:55 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:40:01 INFO - load_model: Loading model ...
17:40:01 INFO - load_model: MODEL TYPE: compression_gan
17:40:01 INFO - load_model: MODEL MODE: evaluation
17:40:01 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:40:01 INFO - load_model: Trainable parameters:
17:40:01 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:40:01 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:40:01 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:40:01 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:40:01 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:40:01 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:40:01 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:40:01 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:40:01 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:40:01 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:40:01 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:40:01 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:40:01 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:40:01 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:40:01 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:40:01 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:40:01 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:40:01 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:40:01 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:40:01 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:40:01 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:40:01 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:40:01 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:40:01 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:40:01 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:40:01 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:40:01 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:40:01 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:40:01 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:40:01 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:40:01 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:40:01 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:40:01 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:40:01 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:40:01 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:40:01 INFO - load_model: Number of trainable parameters: 181484483
17:40:01 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:40:01 INFO - load_model: Model init 6.024s
17:40:01 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:40:01 INFO - compress_and_decompress: Building hyperprior probability tables...
17:40:06 INFO - compress_and_decompress: All tables built.
17:40:06 INFO - compress_and_decompress: Starting compression...
17:46:55 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:47:00 INFO - load_model: Loading model ...
17:47:00 INFO - load_model: MODEL TYPE: compression_gan
17:47:00 INFO - load_model: MODEL MODE: evaluation
17:47:00 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:47:00 INFO - load_model: Trainable parameters:
17:47:00 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:47:00 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:47:00 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:47:00 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:47:00 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:47:00 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:47:00 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:47:00 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:47:00 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:47:00 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:47:00 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:47:00 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:47:00 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:47:00 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:47:00 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:47:00 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:47:00 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:47:00 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:47:00 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:47:00 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:47:00 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:47:00 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:47:00 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:47:00 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:47:00 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:47:00 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:47:00 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:47:00 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:47:00 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:47:00 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:47:00 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:47:00 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:47:00 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:47:00 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:47:00 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:47:00 INFO - load_model: Number of trainable parameters: 181484483
17:47:00 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:47:00 INFO - load_model: Model init 5.569s
17:47:01 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 0.5, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_22_20_32', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'high', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_22_20_32', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_22_20_32/storage', 'target_rate': 0.45, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_22_20_32/tensorboard', 'timestamp': '2022_06_23_10:27', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_22_14_49/checkpoints/vimeo_compression_2022_06_22_14_49_epoch1_idx64612_2022_06_22_19:38.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_22_20_32/checkpoints/vimeo_compression_gan_2022_06_22_20_32_epoch4_idx129224_2022_06_23_10:27.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:47:01 INFO - compress_and_decompress: Building hyperprior probability tables...
17:47:11 INFO - compress_and_decompress: All tables built.
17:47:11 INFO - compress_and_decompress: Starting compression...
17:51:33 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
17:51:33 INFO - compress_and_decompress: Time elapsed: 262.656 s
17:51:33 INFO - compress_and_decompress: Rate: 178.728 Images / s:
17:57:48 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
17:58:22 INFO - load_model: Loading model ...
17:58:22 INFO - load_model: MODEL TYPE: compression_gan
17:58:22 INFO - load_model: MODEL MODE: evaluation
17:58:22 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
17:58:22 INFO - load_model: Trainable parameters:
17:58:22 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
17:58:22 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
17:58:22 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
17:58:22 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
17:58:22 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
17:58:22 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
17:58:22 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
17:58:22 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
17:58:22 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
17:58:22 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
17:58:22 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
17:58:22 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
17:58:22 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
17:58:22 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
17:58:22 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
17:58:22 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
17:58:22 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
17:58:22 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
17:58:22 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
17:58:22 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
17:58:22 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
17:58:22 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
17:58:22 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
17:58:22 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
17:58:22 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
17:58:22 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
17:58:22 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
17:58:22 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
17:58:22 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
17:58:22 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
17:58:22 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
17:58:22 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
17:58:22 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
17:58:22 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
17:58:22 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
17:58:22 INFO - load_model: Number of trainable parameters: 181484483
17:58:22 INFO - load_model: Estimated model size (under fp32): 725.938 MB
17:58:22 INFO - load_model: Model init 33.134s
17:58:22 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 2, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_20_17_40', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'low', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_20_17_40', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/storage', 'target_rate': 0.14, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_20_17_40/tensorboard', 'timestamp': '2022_06_21_14:22', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_20_12_28/checkpoints/vimeo_compression_2022_06_20_12_28_epoch1_idx64612_2022_06_20_17:14.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=False, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': False}
17:58:22 INFO - compress_and_decompress: Building hyperprior probability tables...
17:58:25 INFO - compress_and_decompress: All tables built.
17:58:25 INFO - compress_and_decompress: Starting compression...
18:02:35 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
18:02:35 INFO - compress_and_decompress: Time elapsed: 249.591 s
18:02:35 INFO - compress_and_decompress: Rate: 2.003 Images / s:
12:14:14 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
12:14:23 INFO - load_model: Loading model ...
12:14:23 INFO - load_model: MODEL TYPE: compression_gan
12:14:23 INFO - load_model: MODEL MODE: evaluation
12:14:23 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
12:14:23 INFO - load_model: Trainable parameters:
12:14:23 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
12:14:23 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
12:14:23 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
12:14:23 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
12:14:23 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
12:14:23 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
12:14:23 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
12:14:23 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
12:14:23 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
12:14:23 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
12:14:23 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
12:14:23 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
12:14:23 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
12:14:23 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
12:14:23 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
12:14:23 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
12:14:23 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
12:14:23 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
12:14:23 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
12:14:23 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
12:14:23 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
12:14:23 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
12:14:23 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
12:14:23 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
12:14:23 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
12:14:23 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
12:14:23 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
12:14:23 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
12:14:23 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
12:14:23 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
12:14:23 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
12:14:23 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
12:14:23 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
12:14:23 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
12:14:23 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
12:14:23 INFO - load_model: Number of trainable parameters: 181484483
12:14:23 INFO - load_model: Estimated model size (under fp32): 725.938 MB
12:14:23 INFO - load_model: Model init 9.054s
12:14:23 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_23_19_02/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_23_19_02/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 2, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 1000000, 'name': 'vimeo_compression_gan_2022_06_23_19_02', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'low', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_23_19_02', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_23_19_02/storage', 'target_rate': 0.14, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_23_19_02/tensorboard', 'timestamp': '2022_06_25_05:10', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_23_19_02/checkpoints/vimeo_compression_gan_2022_06_23_19_02_epoch7_idx258448_2022_06_25_05:10.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_23_19_02/checkpoints/vimeo_compression_gan_2022_06_23_19_02_epoch7_idx258448_2022_06_25_05:10.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_23_19_02/checkpoints/vimeo_compression_gan_2022_06_23_19_02_epoch7_idx258448_2022_06_25_05:10.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': True}
12:14:23 INFO - compress_and_decompress: Building hyperprior probability tables...
12:14:32 INFO - compress_and_decompress: All tables built.
12:14:32 INFO - compress_and_decompress: Starting compression...
12:43:32 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
12:43:32 INFO - compress_and_decompress: Time elapsed: 1739.450 s
12:43:32 INFO - compress_and_decompress: Rate: 26.988 Images / s:
11:38:00 INFO - logger_setup: /home/kumarana/tmp/high_fidel/compress.py
11:38:46 INFO - load_model: Loading model ...
11:38:46 INFO - load_model: MODEL TYPE: compression_gan
11:38:46 INFO - load_model: MODEL MODE: evaluation
11:38:46 INFO - load_model: Model(
  (Encoder): Encoder(
    (pre_pad): ReflectionPad2d((3, 3, 3, 3))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((1, 1, 1, 1))
    (conv_block1): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(6, 60, kernel_size=(7, 7), stride=(1, 1))
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block2): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(60, 120, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block3): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(120, 240, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block4): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(240, 480, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block5): Sequential(
      (0): ReflectionPad2d((0, 1, 1, 0))
      (1): Conv2d(480, 960, kernel_size=(3, 3), stride=(2, 2), padding_mode=reflect)
      (2): ChannelNorm2D()
      (3): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): Conv2d(960, 220, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (Generator): Generator(
    (pre_pad): ReflectionPad2d((1, 1, 1, 1))
    (asymmetric_pad): ReflectionPad2d((0, 1, 1, 0))
    (post_pad): ReflectionPad2d((3, 3, 3, 3))
    (conv_block_init): Sequential(
      (0): ChannelNorm2D()
      (1): ReflectionPad2d((1, 1, 1, 1))
      (2): Conv2d(220, 960, kernel_size=(3, 3), stride=(1, 1))
      (3): ChannelNorm2D()
    )
    (resblock_0): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_1): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_2): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_3): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_4): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_5): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_6): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_7): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (resblock_8): ResidualBlock(
      (pad): ReflectionPad2d((1, 1, 1, 1))
      (conv1): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1))
      (norm1): ChannelNorm2D()
      (norm2): ChannelNorm2D()
    )
    (upconv_block1): Sequential(
      (0): ConvTranspose2d(960, 480, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block2): Sequential(
      (0): ConvTranspose2d(480, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block3): Sequential(
      (0): ConvTranspose2d(240, 120, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (upconv_block4): Sequential(
      (0): ConvTranspose2d(120, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (1): ChannelNorm2D()
      (2): ReLU()
    )
    (conv_block_out): Sequential(
      (0): ReflectionPad2d((3, 3, 3, 3))
      (1): Conv2d(60, 3, kernel_size=(7, 7), stride=(1, 1))
    )
  )
  (Hyperprior): Hyperprior(
    (analysis_net): HyperpriorAnalysis(
      (conv1): Conv2d(220, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
      (conv3): Conv2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), padding_mode=reflect)
    )
    (synthesis_mu): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (synthesis_std): HyperpriorSynthesis(
      (conv1): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv2): ConvTranspose2d(320, 320, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), output_padding=(1, 1))
      (conv3): ConvTranspose2d(320, 220, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (hyperlatent_likelihood): HyperpriorDensity()
    (hyperprior_entropy_model): HyperpriorEntropyModel(
      (distribution): HyperpriorDensity()
    )
    (prior_density): PriorDensity()
    (prior_entropy_model): PriorEntropyModel(
      (distribution): PriorDensity()
    )
  )
  (squared_difference): MSELoss()
  (perceptual_loss): PerceptualLoss()
)
11:38:46 INFO - load_model: Trainable parameters:
11:38:46 INFO - load_model: Encoder.conv_block1.1.weight - torch.Size([60, 6, 7, 7])
11:38:46 INFO - load_model: Encoder.conv_block1.1.bias - torch.Size([60])
11:38:46 INFO - load_model: Encoder.conv_block1.2.gamma - torch.Size([1, 60, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block1.2.beta - torch.Size([1, 60, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block2.1.weight - torch.Size([120, 60, 3, 3])
11:38:46 INFO - load_model: Encoder.conv_block2.1.bias - torch.Size([120])
11:38:46 INFO - load_model: Encoder.conv_block2.2.gamma - torch.Size([1, 120, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block2.2.beta - torch.Size([1, 120, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block3.1.weight - torch.Size([240, 120, 3, 3])
11:38:46 INFO - load_model: Encoder.conv_block3.1.bias - torch.Size([240])
11:38:46 INFO - load_model: Encoder.conv_block3.2.gamma - torch.Size([1, 240, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block3.2.beta - torch.Size([1, 240, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block4.1.weight - torch.Size([480, 240, 3, 3])
11:38:46 INFO - load_model: Encoder.conv_block4.1.bias - torch.Size([480])
11:38:46 INFO - load_model: Encoder.conv_block4.2.gamma - torch.Size([1, 480, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block4.2.beta - torch.Size([1, 480, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block5.1.weight - torch.Size([960, 480, 3, 3])
11:38:46 INFO - load_model: Encoder.conv_block5.1.bias - torch.Size([960])
11:38:46 INFO - load_model: Encoder.conv_block5.2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block5.2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Encoder.conv_block_out.1.weight - torch.Size([220, 960, 3, 3])
11:38:46 INFO - load_model: Encoder.conv_block_out.1.bias - torch.Size([220])
11:38:46 INFO - load_model: Generator.conv_block_init.0.gamma - torch.Size([1, 220, 1, 1])
11:38:46 INFO - load_model: Generator.conv_block_init.0.beta - torch.Size([1, 220, 1, 1])
11:38:46 INFO - load_model: Generator.conv_block_init.2.weight - torch.Size([960, 220, 3, 3])
11:38:46 INFO - load_model: Generator.conv_block_init.2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.conv_block_init.3.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.conv_block_init.3.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_0.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_0.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_0.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_0.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_0.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_0.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_0.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_0.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_1.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_1.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_1.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_1.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_1.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_1.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_1.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_1.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_2.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_2.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_2.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_2.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_2.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_2.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_2.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_2.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_3.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_3.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_3.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_3.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_3.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_3.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_3.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_3.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_4.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_4.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_4.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_4.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_4.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_4.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_4.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_4.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_5.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_5.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_5.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_5.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_5.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_5.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_5.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_5.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_6.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_6.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_6.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_6.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_6.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_6.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_6.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_6.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_7.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_7.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_7.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_7.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_7.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_7.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_7.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_7.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_8.conv1.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_8.conv1.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_8.conv2.weight - torch.Size([960, 960, 3, 3])
11:38:46 INFO - load_model: Generator.resblock_8.conv2.bias - torch.Size([960])
11:38:46 INFO - load_model: Generator.resblock_8.norm1.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_8.norm1.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_8.norm2.gamma - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.resblock_8.norm2.beta - torch.Size([1, 960, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block1.0.weight - torch.Size([960, 480, 3, 3])
11:38:46 INFO - load_model: Generator.upconv_block1.0.bias - torch.Size([480])
11:38:46 INFO - load_model: Generator.upconv_block1.1.gamma - torch.Size([1, 480, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block1.1.beta - torch.Size([1, 480, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block2.0.weight - torch.Size([480, 240, 3, 3])
11:38:46 INFO - load_model: Generator.upconv_block2.0.bias - torch.Size([240])
11:38:46 INFO - load_model: Generator.upconv_block2.1.gamma - torch.Size([1, 240, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block2.1.beta - torch.Size([1, 240, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block3.0.weight - torch.Size([240, 120, 3, 3])
11:38:46 INFO - load_model: Generator.upconv_block3.0.bias - torch.Size([120])
11:38:46 INFO - load_model: Generator.upconv_block3.1.gamma - torch.Size([1, 120, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block3.1.beta - torch.Size([1, 120, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block4.0.weight - torch.Size([120, 60, 3, 3])
11:38:46 INFO - load_model: Generator.upconv_block4.0.bias - torch.Size([60])
11:38:46 INFO - load_model: Generator.upconv_block4.1.gamma - torch.Size([1, 60, 1, 1])
11:38:46 INFO - load_model: Generator.upconv_block4.1.beta - torch.Size([1, 60, 1, 1])
11:38:46 INFO - load_model: Generator.conv_block_out.1.weight - torch.Size([3, 60, 7, 7])
11:38:46 INFO - load_model: Generator.conv_block_out.1.bias - torch.Size([3])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv1.weight - torch.Size([320, 220, 3, 3])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv1.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv2.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv2.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv3.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.analysis_net.conv3.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv1.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv1.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv2.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv2.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv3.weight - torch.Size([320, 220, 3, 3])
11:38:46 INFO - load_model: Hyperprior.synthesis_mu.conv3.bias - torch.Size([220])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv1.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv1.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv2.weight - torch.Size([320, 320, 5, 5])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv2.bias - torch.Size([320])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv3.weight - torch.Size([320, 220, 3, 3])
11:38:46 INFO - load_model: Hyperprior.synthesis_std.conv3.bias - torch.Size([220])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_0 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_0 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_0 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_1 - torch.Size([320, 3, 3])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_1 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_1 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_2 - torch.Size([320, 3, 3])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_2 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_2 - torch.Size([320, 3, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.H_3 - torch.Size([320, 1, 3])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.a_3 - torch.Size([320, 1, 1])
11:38:46 INFO - load_model: Hyperprior.hyperlatent_likelihood.b_3 - torch.Size([320, 1, 1])
11:38:46 INFO - load_model: Hyperprior.prior_entropy_model.CDF - torch.Size([64, 1481])
11:38:46 INFO - load_model: Hyperprior.prior_entropy_model.CDF_offset - torch.Size([64])
11:38:46 INFO - load_model: Hyperprior.prior_entropy_model.CDF_length - torch.Size([64])
11:38:46 INFO - load_model: Number of trainable parameters: 181484483
11:38:46 INFO - load_model: Estimated model size (under fp32): 725.938 MB
11:38:46 INFO - load_model: Model init 45.616s
11:38:46 INFO - compress_and_decompress: {'batch_size': 1, 'beta': 0.15, 'checkpoints_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints', 'crop_size': 256, 'dataset': 'vimeo', 'dataset_path': '/data/videocoding/dnnvc/datasets/Vimeo-90k/tmp/vimeo_septuplet/sequences/', 'discriminator_steps': 1, 'figures_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/figures', 'force_set_gpu': False, 'gan_loss_type': 'non_saturating', 'gpu': 0, 'ignore_schedule': True, 'image_dims': (6, 256, 256), 'k_M': 0.00234375, 'k_P': 1.0, 'lambda_A': 2, 'lambda_A_map': {'low': 2, 'med': 1, 'high': 0.5}, 'lambda_B': 0.0625, 'lambda_schedule': {'vals': [2.0, 1.0], 'steps': [50000]}, 'latent_channels': 220, 'latent_channels_DLMM': 64, 'latent_dims': (220, 16, 16), 'learning_rate': 0.0001, 'likelihood_type': 'gaussian', 'log_interval': 1000, 'lr_schedule': {'vals': [1.0, 0.1], 'steps': [500000]}, 'mixture_components': 4, 'model_mode': 'training', 'model_type': 'compression_gan', 'multigpu': False, 'n_data': 387672, 'n_epochs': 8, 'n_residual_blocks': 9, 'n_steps': 200000, 'name': 'vimeo_compression_gan_2022_06_20_17_40', 'noise_dim': 32, 'normalize_input_image': False, 'regime': 'low', 'sample_noise': False, 'save': False, 'save_interval': 50000, 'shuffle': True, 'silent': True, 'snapshot': 'experiments/vimeo_compression_gan_2022_06_20_17_40', 'storage_save': 'experiments/vimeo_compression_gan_2022_06_20_17_40/storage', 'target_rate': 0.14, 'target_rate_map': {'low': 0.14, 'med': 0.3, 'high': 0.45}, 'target_schedule': {'vals': [1.4285714285714286, 1.0], 'steps': [50000]}, 'tensorboard_runs': 'experiments/vimeo_compression_gan_2022_06_20_17_40/tensorboard', 'timestamp': '2022_06_21_14:22', 'use_channel_norm': True, 'use_latent_mixture_model': False, 'warmstart': True, 'warmstart_ckpt': 'experiments/vimeo_compression_2022_06_20_12_28/checkpoints/vimeo_compression_2022_06_20_12_28_epoch1_idx64612_2022_06_20_17:14.pt', 'weight_decay': 1e-06, '_get_args': <bound method _AttributeHolder._get_args of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, '_get_kwargs': <bound method _AttributeHolder._get_kwargs of Namespace(ckpt_path='experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', image_dir='vimeo', output_dir='data/reconstructions', batch_size=1, reconstruct=True, save=False, metrics=True, img_save=False)>, 'ckpt_path': 'experiments/vimeo_compression_gan_2022_06_20_17_40/checkpoints/vimeo_compression_gan_2022_06_20_17_40_epoch6_idx200001_2022_06_21_14:22.pt', 'image_dir': 'vimeo', 'img_save': False, 'metrics': True, 'output_dir': 'data/reconstructions', 'reconstruct': True}
11:38:46 INFO - compress_and_decompress: Building hyperprior probability tables...
11:38:49 INFO - compress_and_decompress: All tables built.
11:38:50 INFO - compress_and_decompress: Starting compression...
12:07:08 INFO - compress_and_decompress: Complete. Reconstructions saved to data/reconstructions. Output statistics saved to data/reconstructions/compression_metrics.h5
12:07:08 INFO - compress_and_decompress: Time elapsed: 1697.947 s
12:07:08 INFO - compress_and_decompress: Rate: 27.648 Images / s:
